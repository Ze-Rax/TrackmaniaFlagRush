/**
 * Modebase for FlagRush that handles the general match progression (when a round ends, when a map ends, show respective messages, ...)
 * This modebase extends a modified version of Nadeos lowest level mode base, contains the main server loop. Mind the differences.
 */

// #RequireContext CSmMode

#Extends "Libs/Zrx/ModeLibs/BaseModes/ModeBase.Script.txt"

///////////////
// Libraries //
///////////////

// General Libs
#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/Zrx/ModeLibs/Common/EventFeed.Script.txt"										as EventFeed
#Include "Libs/Zrx/ModeLibs/Common/Commands/ModeCommands.Script.txt"				as ModeCommands
#Include "Libs/Zrx/ModeLibs/Common/Commands/CommandUtils.Script.txt"				as CommandUtils
#Include "Libs/Zrx/ModeLibs/Common/ModeUtils.Script.txt"										as ModeUtils
#Include "Libs/Zrx/ModeLibs/Common/WarmUpReadyUp/WarmUpReadyUp.Script.txt"	as WarmUpReadyUp

// FlagRush Libs
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"						as FlagRush_Common
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_Messages.Script.txt"				as FlagRush_Messages
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Scores.Script.txt"						as FlagRush_Scores
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_MatchEvaluation.Script.txt"		as FlagRush_MatchEvaluation
#Include "Libs/Zrx/ModeLibs/FlagRush/GameplayPhase.Script.txt"							as FlagRush_GameplayPhase
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt"							as FlagRush_Teams

#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_UI2.Script.txt"								as FlagRush_UI

///////////////
// Constants //
///////////////

// TODO: Fix timings
#Const C_Duration_Podium			1000 // 10000
#Const C_Duration_MapStart		1000 // 3000
#Const C_Duration_MapEnd			1000 // 5000
#Const C_Duration_RoundStart	1000 // 3000
#Const C_Duration_RoundEnd		1000 // 3000
#Const C_Duration_Overtime		1000 // 3000
#Const C_Duration_WarmUpStart	1000 // 3000
#Const C_Duration_WarmUpEnd		1000 // 3000
#Const C_Duration_PauseStart	1000 // 3000
#Const C_Duration_PauseEnd		1000 // 3000

//////////////
// Settings //
//////////////

#Setting S_UseWarmUp												True		as "Use warm up"
#Setting S_UseCollisions										False		as "Use collisions (experimental)"

#Setting S_NbMapsToWinMatch									1 			as "Number of maps to win a match"
#Setting S_NbRoundsToWinMap									2 			as "Number of rounds to win a map"
#Setting S_NbFlagsToWinRound								3				as "Number of flags scored to win a round"
#Setting S_RoundTimeLimitSeconds						360 		as "Round Timelimit (seconds)"
#Setting S_UseTurns													False 	as "<hidden>" // "Use turns (Reset after a player scores a flag)"
#Setting S_UseOvertime											True 		as "Use overtime when round is tied"

//////////////
// Commands //
//////////////

// Constants are used for Commands from other sources, like UI Events.
// Constants value has to be the same as the name of the respective command without the Command_ prefix.
// The Parameter for the Command has to be sent with the Event in the Params array.
// In case of Vec2/Vec3/Int2/Int3 commands, X, Y & Z each take a seperate entry in the params array.
#Command	Command_PauseRound							(Boolean) as		"Pause round"
#Const		C_Command_Pause																	"PauseRound"

#Command	Command_EndWarmup								(Boolean) as 		"End warmup"
#Const		C_Command_EndWarmup															"EndWarmup"

// #Command	Command_SkipRound								(Boolean) as				"Skip round"
#Const		C_Command_SkipRound															"SkipRound"

// #Command	Command_SkipMap									(Boolean) as				"Skip map"
#Const		C_Command_SkipMap																"SkipMap"

#Command	Command_SetTeam1RoundScore			(Integer) as		"Set Team 1 Round Score"
#Const		C_Command_SetTeam1RoundScore										"SetTeam1RoundScore"

#Command	Command_SetTeam2RoundScore			(Integer) as		"Set Team 2 Round Score"
#Const		C_Command_SetTeam2RoundScore										"SetTeam2RoundScore"

#Command	Command_SetTeam1MapScore				(Integer) as		"Set Team 1 Map Score"
#Const		C_Command_SetTeam1MapScore											"SetTeam1MapScore"

#Command	Command_SetTeam2MapScore				(Integer) as		"Set Team 2 Map Score"
#Const		C_Command_SetTeam2MapScore											"SetTeam2MapScore"

#Command	Command_SetTeam1MatchScore			(Integer) as		"Set Team 1 Match Score"
#Const		C_Command_SetTeam1MatchScore										"SetTeam1MatchScore"

#Command	Command_SetTeam2MatchScore			(Integer) as		"Set Team 2 Match Score"
#Const		C_Command_SetTeam2MatchScore										"SetTeam2MatchScore"

#Command	Command_ClearScores							(Boolean) as		"Clear all scores"
#Const		C_Command_ClearScores														"ClearScores"

// #Command	Command_Announce								(Text)		as		"Show big anouncement message"
#Const		C_Command_Announce															"Announce"

// #Command	Command_BalanceTeams						(Boolean) as		"Balance Teams"
#Const		C_Command_BalanceTeams													"BalanceTeams"

#Const		C_Command_SetBots																"SetBots"

//////////////////////
// Global Variables //
//////////////////////

///////////
// Plugs //
///////////

// ~~~~~~~~~~ Setup ~~~~~~~~~~ //

***MB_Settings***
***
MB_Settings_UseDefaultPodiumSequence = False;

SpawnInvulnerabilityDuration = 0;
UnspawnAnimDuration = 0;
SpawnDelayDuration = 0;
RespawnBehaviour = CSmMode::ERespawnBehaviour::Custom;
GiveUpBehaviour = CSmMode::EGiveUpBehaviour::DoNothing; // Still just givesup when set to "Custom" and no Event? TODO: Test with RespawnBehaviour_RespawnAfter
CheckpointBehaviour = CSmMode::ECheckpointBehaviour::Custom;
UseMultiClans = False;
UseClans = True;
UseForcedClans = False;
// UsePvPCollisions = False; // Should be set by FlagRush.Script.txt depending on S_UseCollisions
UsePvECollisions = True; // Force player visibility and dynamic item sync
UseGuns = False;
UsePvPWeapons = False;
UseInterractiveScreensIn3d = False;
UseLaserVsBullets = False;
UseLaserSkewering = False;
UsePlayerTagging = False;
UseBeaconsWithRecipients = False;
UseAmmoBonusOnHit = False;
UseSameWallJump = False;
UseDefaultActionEvents = False;
UseLaunchedCheckpoints = False;
ReadonlyLaunchedCheckpoints = False;
UseProtectClanmates = False;
UseAllies = False;
CrudeExtrapolation_AllowDelay = False;

ModeUtils::SetEndTime(-1);
Net_SendModeSettings(S_NbMapsToWinMatch, S_NbRoundsToWinMap, S_NbFlagsToWinRound);
***

***MB_LoadLibraries***
***
FlagRush_GameplayPhase::Set(0);
FlagRush_Teams::Init();

ModeCommands::AddAdmin("W2ZNWNzVQV6z3hXuNgRMRg");	// Ze-Rax
ModeCommands::AddAdmin("EdbzfLXMS_aI_PjZCVaygQ");	// Reaby
ModeCommands::AddAdmin("BiC3-GdBTzaUQxlcSw-qbQ"); // Geekid
ModeCommands::AddAdmin("pTuyJG9STcCN_11BiU3t0Q"); // Rxelux
ModeCommands::AddQuickCommand(C_Command_EndWarmup, "UICommon64_1", "Play_light");
ModeCommands::AddQuickCommand(C_Command_Pause, "UICommon64_1", "Pause_light");
ModeCommands::AddQuickCommand(C_Command_SkipRound, "UICommon64_1", "FastForward_light");
ModeCommands::AddQuickCommand(C_Command_SkipMap, "UICommon64_1", "GoLastFrame_light");
***

***MB_LoadHud***
***
FlagRush_UI::Load();
***

***MB_LoadItems***
***
FlagRush_Teams::LoadSkins();
***

// ~~~~~~~~~~ Match ~~~~~~~~~~ //

***MB_InitMatch***
***
FlagRush_Scores::StartMatch();
***

***MB_AfterEndMatch***
***
FlagRush_Scores::EndMatch();
***

// ~~~~~~~~~~ Map ~~~~~~~~~~ //

***MB_InitMap***
***
FlagRush_Scores::StartMap();
***

***MB_StartMap***
***
MB_Sleep(C_Duration_MapStart);

if (S_UseWarmUp) Private_ExecuteWarmUp();
***

***MB_EndMap***
***

declare Text Message;
if (MapInvalid()) {
	Message = FlagRush_Messages::MapSkip();
} else {
	declare Integer WinnerClan = FlagRush_MatchEvaluation::EvaluateMap();
	if (WinnerClan == 0) {
		Message = FlagRush_Messages::MapDraw();
	} else {
		Message = FlagRush_Messages::MapWin(WinnerClan);
		FlagRush_Scores::OnClanMapWin(WinnerClan);
	}
}

UIManager.UIAll.QueueMessage(
	C_Duration_MapEnd,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::EndRound,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
MB_Sleep(C_Duration_MapEnd);

if (MatchPointLimitReached()) {
	MB_StopMatch();
} else {
	MB_SkipPodiumSequence(); // Podium == Match end MVP
}
***

***MB_AfterEndMap***
***
FlagRush_Scores::EndMap();
***

// ~~~~~~~~~~ Round ~~~~~~~~~~ //

***MB_InitRound***
***
FlagRush_Scores::StartRound();
declare Boolean RoundEndRequested for This;
RoundEndRequested = False;
***

***MB_StartRound***
***
declare Text Message = FlagRush_Messages::RoundStart(MB_GetRoundCount());
UIManager.UIAll.QueueMessage(
	C_Duration_RoundStart,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::Default,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
MB_Sleep(C_Duration_RoundStart);
FlagRush_GameplayPhase::Set(FlagRush_GameplayPhase::C_Round);
StartTime = Now;
if (S_RoundTimeLimitSeconds > 0) {
	ModeUtils::SetEndTime(Now + S_RoundTimeLimitSeconds * 1000 + FlagRush_Common::C_SpawnAnimDuration);
} else {
	ModeUtils::SetEndTime(-1);
}
***

***MB_EndRound***
***
FlagRush_GameplayPhase::Set(FlagRush_GameplayPhase::C_None);

declare Text Message;
if (RoundInvalid()) {
	Message = FlagRush_Messages::RoundSkip();
} else {
	declare Integer WinnerClan = FlagRush_MatchEvaluation::EvaluateRound();
	if (WinnerClan == 0) {
		Message = FlagRush_Messages::RoundDraw();
	} else {
		Message = FlagRush_Messages::RoundWin(WinnerClan);
		FlagRush_Scores::OnClanRoundWin(WinnerClan);
	}
}

UIManager.UIAll.QueueMessage(
	C_Duration_RoundEnd,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::EndRound,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
MB_Sleep(C_Duration_RoundEnd);

if (MapPointLimitReached()) MB_StopMap();
***

***MB_AfterEndRound***
***
FlagRush_Scores::EndRound();
***

// ~~~~~~~~~~ WarmUp ~~~~~~~~~~ //

***StartWarmUp***
***
declare Text Message = FlagRush_Messages::WarmUpStart();
UIManager.UIAll.QueueMessage(
	C_Duration_RoundStart,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::Default,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
MB_Sleep(C_Duration_WarmUpStart);
***

***EndWarmUp***
***
declare Text Message = FlagRush_Messages::WarmUpEnd();
UIManager.UIAll.QueueMessage(
	C_Duration_RoundStart,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::Default,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
MB_Sleep(C_Duration_WarmUpEnd);
***

// ~~~~~~~~~~ PlayLoop ~~~~~~~~~~ //

***MB_PlayLoop***
***
// Round skip (Map skip handled by base mode)
declare Boolean RoundEndRequested for This;
if (RoundEndRequested) MB_StopRound();

// Round end & overtime conditions
switch (FlagRush_GameplayPhase::Get()) {
	case FlagRush_GameplayPhase::C_Round: {
		if (FlagLimitReached()) {
			MB_StopRound();
		} else if (TimeLimitReached()) {
			if (RoundIsTied() && S_UseOvertime) {
				+++StartOvertime+++
			} else {
				MB_StopRound();
			}
		}
	}
	case FlagRush_GameplayPhase::C_Overtime: {
		if (!RoundIsTied()) {
			MB_StopRound();
		}
	}
	default: {}
}

// Pause handling
declare Boolean PauseRequested for This;
if (PauseRequested) {
	PauseRequested = False;
	Private_ExecutePause();
}
***

***StartOvertime***
***
declare Text Message = FlagRush_Messages::OvertimeStart();
FlagRush_GameplayPhase::Set(FlagRush_GameplayPhase::C_Overtime);
UIManager.UIAll.QueueMessage(
	C_Duration_Overtime,
	1,
	CUIConfig::EMessageDisplay::Big,
	Message,
	CUIConfig::EUISound::Default,
	0
);
EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
***

// ~~~~~~~~~~ Podium (Match end MVP) ~~~~~~~~~~ //

***MB_PodiumSequence***
***
// TODO: implement
{}
***

// ~~~~~~~~~~ Yield ~~~~~~~~~~ //

// Cannot use non-library functions or globales in here, as this is executed during MB_Yield() in the modebase,
// which is defined before any function or globale that could be defined in any extend.
// Only code directly or plugs which don't contain non-library functions or non ModeBase globales themselves.
***MB_Yield***
***
ModeCommands::Yield();
+++Private_HandleProgressionsCommands+++
FlagRush_UI::Yield();
FlagRush_Teams::Yield();

// TODO: What if player is already spawned
foreach (Player in Players) {
	if (Player.CurrentClan != Player.RequestedClan) {
		SetPlayerClan(Player, Player.RequestedClan);
	}
}
***

***Private_HandleProgressionsCommands***
***
declare CommandUtils::K_Command[] PendingCommands;
foreach (Event in PendingEvents) {
	if (Event.Type == CSmModeEvent::EType::OnCommand) {
		PendingCommands.add(CommandUtils::FromEvent(Event));
	}
}

foreach (Command in ModeCommands::GetPendingCommands()) {
	PendingCommands.add(Command);
}

foreach (Command in PendingCommands) {
	// Display a message in chat
	declare Text CommandName = TL::Replace(Command.Name, CommandUtils::C_CommandPrefix, "");
	declare Text CommandSource = CommandUtils::ResolveSource(Command);
	declare Text CommandText;

	// Handle the command
	switch(CommandName) {
		case C_Command_EndWarmup: {
			WarmUpReadyUp::Stop();
			CommandText = "The warmup was ended.";
		}
		case C_Command_Pause: {
			declare Boolean PauseRequested for This;
			PauseRequested = True;
			CommandText = "The round was paused.";
		}
		case C_Command_SkipRound: {
			declare Boolean RoundEndRequested for This;
			RoundEndRequested = True;
			CommandText = "The round was skipped.";
		}
		case C_Command_SkipMap: {
			MatchEndRequested = True;
			CommandText = "The map was skipped.";
		}
		case C_Command_SetTeam1RoundScore: {
			declare Integer Value = ML::Max(Command.ValueInteger, 0);
			FlagRush_Scores::SetClanRoundPoints(1, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[0].Name }}} round score to {{{ Value }}}.""";
		}
		case C_Command_SetTeam2RoundScore: {
			declare Integer Value = ML::Max(Command.ValueInteger, 0);
			FlagRush_Scores::SetClanRoundPoints(2, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[1].Name }}} round score to {{{ Value }}}.""";
		}
		case C_Command_SetTeam1MapScore: {
			declare Integer Value = ML::Clamp(Command.ValueInteger, 0, S_NbRoundsToWinMap);
			FlagRush_Scores::SetClanMapPoints(1, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[0].Name }}} map score to {{{ Value }}}.""";
		}
		case C_Command_SetTeam2MapScore: {
			declare Integer Value = ML::Clamp(Command.ValueInteger, 0, S_NbRoundsToWinMap);
			FlagRush_Scores::SetClanMapPoints(2, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[1].Name }}} map score to {{{ Value }}}.""";
		}
		case C_Command_SetTeam1MatchScore: {
			declare Integer Value = ML::Clamp(Command.ValueInteger, 0, S_NbMapsToWinMatch);
			FlagRush_Scores::SetClanMatchPoints(1, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[0].Name }}} match score to {{{ Value }}}.""";
		}
		case C_Command_SetTeam2MatchScore: {
			declare Integer Value = ML::Clamp(Command.ValueInteger, 0, S_NbMapsToWinMatch);
			FlagRush_Scores::SetClanMatchPoints(2, Value);
			FlagRush_Scores::Net_SendTeamScores();
			CommandText = """Set {{{ Teams[1].Name }}} match score to {{{ Value }}}.""";
		}
		case C_Command_ClearScores: {
			FlagRush_Scores::Clear();
			CommandText = "Cleared all scores.";
		}
		case C_Command_BalanceTeams: {
			ServerAdmin.AutoTeamBalance();
			CommandText = "The teams were balanced.";
		}
		case C_Command_SetBots: {
			declare Integer Amount = ML::Max(Command.ValueInteger, 0);
			Users_SetNbFakeUsers(Amount, Amount);
			CommandText = """Set {{{ Amount }}} bots.""";
		}
		case C_Command_Announce: {
			UIManager.UIAll.QueueMessage(3000, 1, CUIConfig::EMessageDisplay::Big, Command.ValueText, CUIConfig::EUISound::Default, 0);
			CommandText = """Message: {{{ Command.ValueText }}}""";
		}
		default: {
			return;
		}
	}

	declare Text Message = """{{{ FlagRush_Common::C_LogPrefix }}} Received command "{{{ TL::Replace(Command.Name, CommandUtils::C_CommandPrefix, "") }}}" by {{{ CommandSource }}}.""";
	if (CommandText != "") Message ^= " " ^ CommandText;
	UIManager.UIAll.SendChat(Message);
}
***

///////////////
// Functions //
///////////////

/**
 * Starts and loops a warmup based on WarmUpReadyUp.
 * Can be extended with ***StartWarmUp***, ***WarmUpLoop*** and ***EndWarmUp***.
 */
Void Private_ExecuteWarmUp() {
	{ +++StartWarmUp+++ }
	WarmUpReadyUp::Start();
	declare PreviousGameplayPhase = FlagRush_GameplayPhase::Get();
	FlagRush_GameplayPhase::Set(FlagRush_GameplayPhase::C_Warmup);
	while(!WarmUpReadyUp::WarmUpShouldStop()) {
		MB_Yield();
		WarmUpReadyUp::Yield();
		foreach (WuruEvent in WarmUpReadyUp::GetPendingEvents()) {
			switch (WuruEvent.Type) {
				case WarmUpReadyUp::C_Event_Type_TimeoutStart,
						WarmUpReadyUp::C_Event_Type_TimeoutUpdate,
						WarmUpReadyUp::C_Event_Type_TimeoutAbort: {
					// Refrech EndTime net variable when it's updated by WURU
					ModeUtils::SetEndTime(EndTime);
				}
			}
		}
		+++WarmUpLoop+++
	}
	{ +++EndWarmUp+++ }
	FlagRush_GameplayPhase::Set(PreviousGameplayPhase);
}

/**
 * Starts and loops a pause during a round.
 * Saves the remaining round time and sets it again when the pause end.
 * Pause is based on and therefore wraps Private_ExecuteWarmUp().
 */
Void Private_ExecutePause() {
	declare Integer TimeRemaining = EndTime - Now;
	ModeUtils::SetEndTime(-1);
	declare Text Message = FlagRush_Messages::PauseStart();
	UIManager.UIAll.QueueMessage(
		C_Duration_PauseStart,
		1,
		CUIConfig::EMessageDisplay::Big,
		Message,
		CUIConfig::EUISound::Default,
		0
	);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
	MB_Sleep(C_Duration_PauseStart);

	Private_ExecuteWarmUp();

	Message = FlagRush_Messages::PauseEnd();
	UIManager.UIAll.QueueMessage(
		C_Duration_PauseEnd,
		1,
		CUIConfig::EMessageDisplay::Big,
		Message,
		CUIConfig::EUISound::Default,
		0
	);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
	MB_Sleep(C_Duration_PauseEnd);
	ModeUtils::SetEndTime(Now + TimeRemaining + FlagRush_Common::C_SpawnAnimDuration);
}

/**
 * Returns whether any team has won enough maps to win the match.
 */
Boolean MatchPointLimitReached() {
	return ML::Max(FlagRush_Scores::GetClanMatchPoints(1), FlagRush_Scores::GetClanMatchPoints(2)) >= S_NbMapsToWinMatch;
}

/**
 * Returns whether any team has won enough rounds to win the map.
 */
Boolean MapPointLimitReached() {
	return ML::Max(FlagRush_Scores::GetClanMapPoints(1), FlagRush_Scores::GetClanMapPoints(2)) >= S_NbRoundsToWinMap;
}

/**
 * Returns whether any team has scored enough flags to win the round.
 */
Boolean FlagLimitReached() {
	if (S_NbFlagsToWinRound <= 0) return False;
	declare Integer RoundPointsTeam1 = FlagRush_Scores::GetClanRoundPoints(1);
	declare Integer RoundPointsTeam2 = FlagRush_Scores::GetClanRoundPoints(2);
	return ML::Max(RoundPointsTeam1, RoundPointsTeam2) >= S_NbFlagsToWinRound;
}

/**
 * Returns whether the round time ran out.
 */
Boolean TimeLimitReached() {
	if (S_RoundTimeLimitSeconds <= 0) return False;
	return Now > EndTime;
}

/**
 * Returns whether both teams have the same amount of flags scored.
 */
Boolean RoundIsTied() {
	return FlagRush_MatchEvaluation::EvaluateRound() == 0;
}

/**
 * Returns whether the current map is considered invalid.
 * A map is invalid when it was explicitly skipped (MatchEndRequested == True).
 */
Boolean MapInvalid() {
	return MatchEndRequested;
}

/**
 * Return whether the current round is considered invalid.
 * A round is invalid when the map is invalid or the round was explicitly skipped (RoundEndRequested (Trait!) == True).
 */
Boolean RoundInvalid() {
	declare Boolean RoundEndRequested for This;
	return RoundEndRequested || MatchEndRequested;
}

/**
 * Sends relevant mode settings values to the clients via netwrite.
 */
 Void Net_SendModeSettings(Integer NbMapsToWinMatch, Integer NbRoundsToWinMap, Integer NbFlagsToWinRound) {
	declare netwrite Integer Net_FlagRush_NbMapsToWinMatch for Teams[0];
	Net_FlagRush_NbMapsToWinMatch = NbMapsToWinMatch;

	declare netwrite Integer Net_FlagRush_NbRoundsToWinMap for Teams[0];
	Net_FlagRush_NbRoundsToWinMap = NbRoundsToWinMap;

	declare netwrite Integer Net_FlagRush_NbFlagsToWinRound for Teams[0];
	Net_FlagRush_NbFlagsToWinRound = NbFlagsToWinRound;
}