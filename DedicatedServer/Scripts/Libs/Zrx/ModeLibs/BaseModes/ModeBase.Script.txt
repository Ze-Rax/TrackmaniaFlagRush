#RequireContext CSmMode

/**
 *	Base for a standard game mode
 */
#Const C_MB_Version			"2022-08-27"
#Const C_MB_ScriptName	"Libs/Zrx/ModeLibs/BaseModes/ModeBase.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Settings
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#Setting S_ChatTime 10 as _("Chat time") ///< Chat time at the end of a map or match

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#Const C_LoopLevel_Server 0
#Const C_LoopLevel_Match 1
#Const C_LoopLevel_Map 2
#Const C_LoopLevel_Round 3
#Const C_LoopLevel_Turn 4

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Boolean MB_Private_RunSection_Script; ///< While this is true the script can't stop
declare Boolean MB_Private_RunSection_Server; ///< Run the server section as long as this is true
declare Boolean MB_Private_RunSection_Match; ///< Run the match section as long as this is true
declare Boolean MB_Private_RunSection_Map; ///< Run the map section as long as this is true
declare Boolean MB_Private_RunSection_Round; ///< Run the round section as long as this is true
declare Boolean MB_Private_RunSection_Turn; ///< Run the turn section as long as this is true
declare Boolean MB_Private_SkipIntroSequence; ///< Skip the intro sequence
declare Boolean MB_Private_SkipPodiumSequence; ///< Skip the podium sequence
declare Integer MB_Private_SectionCount_Match; ///< Number of matches played since the beginning of the script
declare Integer MB_Private_SectionCount_Map; ///< Number of maps played since the beginning of the match
declare Integer MB_Private_SectionCount_Round; ///< Number of rounds played since the beginning of the map
declare Integer MB_Private_SectionCount_Turn; ///< Number of turns played since the beginning of the map
declare Integer MB_Private_SectionCount_PlayLoop; ///< Number of playloops played since the beginning of the turn
declare Integer MB_Private_CurrentNow; ///< Save the value of Now after the yield

declare Boolean MB_Settings_UseDefaultIntroSequence; ///< Use the default introduction sequence at the beginning of the map
declare Boolean MB_Settings_UseDefaultPodiumSequence; ///< Use the default podium sequence at the end of the map

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Extends
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

***MB_Settings***
***
MB_Settings_UseDefaultIntroSequence = True;
MB_Settings_UseDefaultPodiumSequence = True;
***

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop the server
Void MB_StopServer() {
	MB_Private_RunSection_Server = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Restart the script
Void MB_RestartScript() {
	MB_Private_RunSection_Script = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop the current match
Void MB_StopMatch() {
	MB_Private_RunSection_Match = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop the current map
Void MB_StopMap() {
	MB_Private_RunSection_Map = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop the current round
Void MB_StopRound() {
	MB_Private_RunSection_Round = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Stop the current turn
Void MB_StopTurn() {
	MB_Private_RunSection_Turn = False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the server must be running
	*
	*	@return														True the server must run, False the server must stop
	*/
Boolean MB_ServerIsRunning() {
	return (
		!ServerShutdownRequested &&
		MB_Private_RunSection_Server
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the script must be running
	*
	*	@return														True the script must run, False the script must stop
	*/
Boolean MB_ScriptIsRunning() {
	return (
		MB_ServerIsRunning() &&
		MB_Private_RunSection_Script
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the match must be running
	*
	*	@return														True the match must run, False the match must stop
	*/
Boolean MB_MatchIsRunning() {
	return (
		MB_ScriptIsRunning() &&
		MB_Private_RunSection_Match
	);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the map must be running
	*
	*	@return														True the map must run, False the map must stop
	*/
Boolean MB_MapIsRunning() {
	return (
		MB_MatchIsRunning() &&
		!MatchEndRequested &&
		MB_Private_RunSection_Map
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the round must be running
	*
	*	@return														True the round must run, False the round must stop
	*/
Boolean MB_RoundIsRunning() {
	return (
		MB_MapIsRunning() &&
		MB_Private_RunSection_Round
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if the turn must be running
	*
	*	@return														True the turn must run, False the turn must stop
	*/
Boolean MB_TurnIsRunning() {
	return (
		MB_RoundIsRunning() &&
		MB_Private_RunSection_Turn
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the number of matches played since the beginning of the script
	*
	*	@return														The number of match
	*/
Integer MB_GetMatchCount() {
	return MB_Private_SectionCount_Match;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the number of maps played since the beginning of the match
	*
	*	@return														The number of maps
	*/
Integer MB_GetMapCount() {
	return MB_Private_SectionCount_Map;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the number of rounds played since the beginning of the map
	*
	*	@return														The number of rounds
	*/
Integer MB_GetRoundCount() {
	return MB_Private_SectionCount_Round;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the number of turns played since the beginning of the map
	*
	*	@return														The number of turns
	*/
Integer MB_GetTurnCount() {
	return MB_Private_SectionCount_Turn;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Skip the intro sequence one time
Void MB_SkipIntroSequence() {
	MB_Private_SkipIntroSequence = True;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Skip the podium sequence one time
Void MB_SkipPodiumSequence() {
	MB_Private_SkipPodiumSequence = True;
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** yield; the script
 *	This should be the only place in a game mode script
 *	where a script yields
 */
 Void MB_Yield() {
	+++MB_BeforeYield+++
	if (MB_Private_CurrentNow > 0 && Now > MB_Private_CurrentNow) {
		log("WARNING: A frame was skipped with `yield`, `sleep()` or `wait()` ("^MB_Private_CurrentNow^" > "^Now^"). This is considered bad practice. Always use `MB_Yield()` or `MB_Sleep()` to advance to the next frame.");
	}
	yield;
	MB_Private_CurrentNow = Now;
	+++MB_Yield+++
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Sleep for the given duration
 *
 *	@param	_Time											The duration of the sleep
 */
Void MB_Sleep(Integer _Duration) {
	declare End = Now + _Duration;
	while (Now < End && MB_ServerIsRunning()) MB_Yield();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Sleep for the given duration in a specific
 *	game mode loop
 *
 *	@param	_Level										The game mode loop in which the sleep happens
 *	@param	_Time											The duration of the sleep
 */
Void MB_Sleep(Integer _Level, Integer _Duration) {
	declare End = Now + _Duration;
	switch (_Level) {
		case C_LoopLevel_Match: {
			while (Now < End && MB_MatchIsRunning()) MB_Yield();
		}
		case C_LoopLevel_Map: {
			while (Now < End && MB_MapIsRunning()) MB_Yield();
		}
		case C_LoopLevel_Round: {
			while (Now < End && MB_RoundIsRunning()) MB_Yield();
		}
		case C_LoopLevel_Turn: {
			while (Now < End && MB_TurnIsRunning()) MB_Yield();
		}
		default: { //< Server level
			while (Now < End && MB_ServerIsRunning()) MB_Yield();
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Load the next map
Void MB_Private_LoadMap() {
	if (!MapLoaded) RequestLoadMap();
	while (!MapLoaded) MB_Yield();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Unload the current map
Void MB_Private_UnloadMap() {
	if (MapLoaded) RequestUnloadMap();
	while (MapLoaded) MB_Yield();
}

/// Do a synchronization
Void MB_Synchro() {
	declare Barrier = Synchro_AddBarrier();
	while (!Synchro_BarrierReached(Barrier) && !ServerShutdownRequested) MB_Yield();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Play the intro sequence
Void MB_Private_IntroSequence() {
	declare PrevUISequence = UIManager.UIAll.UISequence;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
	while (MB_MapIsRunning() && !UIManager.UIAll.UISequenceIsCompleted) {
		MB_Yield();
		+++MB_Private_IntroSequenceYield+++
	}
	UIManager.UIAll.UISequence = PrevUISequence;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Play the podium sequence :
 *	Podium + Scores table
 */
Void MB_Private_PodiumSequence() {
	declare PrevUISequence = UIManager.UIAll.UISequence;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
	MB_Sleep((S_ChatTime*1000)/2);
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	MB_Sleep((S_ChatTime*1000)/2);
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
	UIManager.UIAll.UISequence = PrevUISequence;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Clear all queued messages
Void MB_ClearAllMessages() {
	UIManager.UIAll.ClearMessages();
	foreach (Player in AllPlayers) {
		declare CUIConfig UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			UI.ClearMessages();
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Script start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
main() {
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	MB_Private_RunSection_Server = True;

	declare MB_Private_ServerModeName for This = "";
	declare MB_Private_ServerModeUpdated = False;
	if (MB_Private_ServerModeName != "" && MB_Private_ServerModeName != ServerModeName) {
		MB_Private_ServerModeUpdated = True;
	}
	MB_Private_ServerModeName = ServerModeName;

	while (MB_ServerIsRunning()) {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Server section start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
		// Initialize section
		MB_Private_SectionCount_Match = 0;
		MB_Private_SectionCount_Map = 0;
		MB_Private_SectionCount_Round = 0;
		MB_Private_SectionCount_Turn = 0;
		MB_Private_RunSection_Script = True;

		declare persistent MB_Private_PersistentServerRestarted = False;
		declare MB_Private_ServerRestarted = MB_Private_PersistentServerRestarted;
		MB_Private_PersistentServerRestarted = True;

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
		{ +++MB_Settings+++ }
		{ +++MB_LoadLibraries+++ }
		ItemList_Begin();
		{ +++MB_LoadItems+++ }
		ItemList_End();
		{ +++MB_LoadHud+++ }
		{ +++MB_Rules+++ }
		{ +++MB_StartServer+++ }

		while (MB_ScriptIsRunning()) {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Match section start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
			// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
			// Initialize section
			MB_Private_RunSection_Match = True;
			MB_Private_SectionCount_Match += 1;
			MB_Private_SectionCount_Map = 0;
			MB_Private_SectionCount_Round = 0;
			MB_Private_SectionCount_Turn = 0;
			MB_Private_SectionCount_PlayLoop = 0;

			{ +++MB_InitMatch+++ }
			{ +++MB_StartMatch+++ }

			while (MB_MatchIsRunning()) {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Map section start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// Initialize section
				MatchEndRequested = False; //< (True when a vote for next map pass)
				MB_Private_RunSection_Map = True;
				MB_Private_SectionCount_Map += 1;
				MB_Private_SectionCount_Round = 0;
				MB_Private_SectionCount_Turn = 0;
				MB_Private_SectionCount_PlayLoop = 0;
				MB_Private_SkipIntroSequence = False;
				MB_Private_SkipPodiumSequence = False;

				declare persistent MB_Private_PersistentMapRestarted = False;
				declare MB_Private_MapRestarted = MB_Private_PersistentMapRestarted;
				MB_Private_PersistentMapRestarted = True;

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// Load a map
				{ +++MB_BeforeLoadMap+++ }
				MB_Private_LoadMap();
				{ +++MB_AfterLoadMap+++ }
				{ +++MB_InitMap+++ }

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// Play intro sequence
				if (!MB_Private_SkipIntroSequence) {
					{ +++MB_BeforeIntroSequence+++ }
					if (MB_Settings_UseDefaultIntroSequence) {
						MB_Private_IntroSequence();
					} else {
						{ +++MB_IntroSequence+++ }
					}
					{ +++MB_AfterIntroSequence+++ }
				}

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				{ +++MB_StartMap+++ }

				while (MB_MapIsRunning()) {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Round section start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
					// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
					// Initialize section
					MB_Private_RunSection_Round = True;
					MB_Private_SectionCount_Round += 1;
					MB_Private_SectionCount_Turn = 0;
					MB_Private_SectionCount_PlayLoop = 0;

					{ +++MB_InitRound+++ }
					{ +++MB_StartRound+++ }

					while (MB_RoundIsRunning()) {
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Turn section start
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
						// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
						// Initialize section
						MB_Private_RunSection_Turn = True;
						MB_Private_SectionCount_Turn += 1;
						MB_Private_SectionCount_PlayLoop = 0;

						{ +++MB_InitTurn+++ }
						{ +++MB_StartTurn+++ }

						MB_Private_SectionCount_PlayLoop += 1;

						{ +++MB_InitPlayLoop+++ }
						{ +++MB_StartPlayLoop+++ }

						while (MB_TurnIsRunning()) {
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
	// Play loop section
	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
							MB_Yield();
							{ +++MB_PlayLoop+++ }
						}

						{ +++MB_EndPlayLoop+++ }

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Turn section end
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

						{ +++MB_EndTurn+++ }
						{ +++MB_AfterEndTurn+++ }
					}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Round section end
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

					{ +++MB_EndRound+++ }
					{ +++MB_AfterEndRound+++ }
				}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Map section end
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

				{ +++MB_EndMap+++ }
				{ +++MB_AfterEndMap+++ }

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// Podium sequence
				if(!MB_Private_SkipPodiumSequence) {
					{ +++MB_BeforePodiumSequence+++ }
					if (MB_Settings_UseDefaultPodiumSequence) {
						MB_Private_PodiumSequence();
					} else {
						+++MB_PodiumSequence+++
					}
					{ +++MB_AfterPodiumSequence+++ }
				}

				// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
				// Unload the current map
				{ +++MB_BeforeUnloadMap+++ }
				// Yield to process and remove every events before unloading the map
				// This is necessary to avoid getting errors in the events about variables that does not exist anymore
				// because they were deleted by the C++ cleaning at the map unload
				MB_Yield();
				MB_Private_UnloadMap();
				{ +++MB_AfterUnloadMap+++ }

				MB_Private_PersistentMapRestarted = False;
				MB_Yield(); //< Needed to properly save persistent variable
			}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Match section end
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

			{ +++MB_EndMatch+++ }
			{ +++MB_AfterEndMatch+++ }
		}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Main/Server end
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

		{ +++MB_EndServer+++ }

		// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
		// Unload libraries
		{ +++MB_UnloadLibraries+++ }

		MB_Private_PersistentServerRestarted = False;
	}

	// Last yield for logging
	yield;
}