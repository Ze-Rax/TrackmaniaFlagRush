// #RequireContext CSmMode

#Include "TextLib"	as TL
#Include "ColorLib"	as CL

#Include "Libs/Zrx/Common/ColorUtils.Script.txt"	as ColorUtils

#Const C_RegexPattern_NameHex3Color			"\\$[0-9a-fA-F]{1,3}"
#Const C_TeamColorMinSaturation					0.5
#Const C_TeamColorMinValue							0.5
#Const C_InvalidColor										<0., 0., 0.>

/** /!\ Notice this needs to be same as FlagRush_Teams::K_TeamConfig /!\
* @see Libs\Zrx\ModeLibs\FlagRush\FlagRush_Teams.Script.txt
*/
#Struct K_TeamConfig {
	Text ClubTag;
	Text Name;
	Vec3 Color;
}

Vec3[] Private_FilterColors(Vec3[] ColorsRgb) {
	declare Vec3[] ValidColors = [];
	foreach (Color in ColorsRgb) {
		declare ColorHsv = CL::RgbToHsv(Color);
		if (ColorHsv.Y != 0. && ColorHsv.Z != 0.) {
			ValidColors.add(Color);
		}
	}
	return ValidColors;
}

Vec3 Private_ChooseColor(Vec3[] ColorsRgb) {
	declare Vec3 TeamColor;
	declare Real MaxSPlusV = 0.;
	foreach (Color in ColorsRgb) {
		declare ColorHsv = CL::RgbToHsv(Color);
		declare ColorSPlusV = ColorHsv.Y + ColorHsv.Z;
		if (ColorSPlusV > MaxSPlusV) {
			MaxSPlusV = ColorSPlusV;
			TeamColor = Color;
		}
	}
	return TeamColor;
}

Vec3 ClubTagToColor(Text ClubTag) {
	// Get color texts from clubtag
	declare Text[] ClubTagColorsText = TL::RegexFind(C_RegexPattern_NameHex3Color, ClubTag, "g");

	declare Vec3[] ClubTagColors = [];
	foreach (ColorText in ClubTagColorsText) {
		declare Text ColorHex = TL::SubText(ColorText, 1, 3);
		for (I, 1, 3 - TL::Length(ColorHex)) {
			ColorHex ^= "0"; // Add 0s for $f and $ff formats, else HexToRgb outputs values that don't correspond to text formatting.
		}
		ClubTagColors.add(CL::HexToRgb(ColorHex));
	}
	if (ClubTagColors.count < 1) return C_InvalidColor;

	declare Vec3[] ValidColors = Private_FilterColors(ClubTagColors);
	if (ValidColors.count < 1) return C_InvalidColor;

	declare Vec3 TeamColor = Private_ChooseColor(ValidColors);
	return ColorUtils::ColorToMinSaturationAndValue(TeamColor, C_TeamColorMinSaturation, C_TeamColorMinValue);
}

K_TeamConfig GetTeamConfig(Integer Clan) {
	declare K_TeamConfig TeamConfig;

	declare Boolean ClubTagMissmatch;
	declare Text[] ClubTagsTeam;
	foreach (Player in Players) {
		if (Player.CurrentClan == Clan && !Player.RequestsSpectate) { // Is playing
			if (ClubTagsTeam.count == 0) {
				ClubTagsTeam.add(Player.User.ClubTag);
			} else if (!ClubTagsTeam.exists(Player.User.ClubTag)) {
				ClubTagMissmatch = True;
				break;
			}
		}
	}

	if(!ClubTagMissmatch && ClubTagsTeam.count == 1) {
		TeamConfig.ClubTag = ClubTagsTeam[0];
		TeamConfig.Name = TL::StripFormatting(ClubTagsTeam[0]);
	//	TeamConfig.Color = ClubTagToColor(ClubTagsTeam[0]);
	}

	return TeamConfig;
}