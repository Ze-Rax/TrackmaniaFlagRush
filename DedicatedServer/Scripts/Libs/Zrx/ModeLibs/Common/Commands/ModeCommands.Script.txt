#Include "TextLib" as TL

#Include "Libs/Zrx/ModeLibs/Common/Commands/CommandUtils.Script.txt" as CommandUtils
#Include "Libs/Nadeo/CMGame/Modes/Legacy/Layers2.Script.txt" as Layers

#Const C_LayerName	"ModeCommands"

#Const C_UIPosition_Y							50.
#Const C_InternalCommandPrefix		"MC:"

#Const C_PermissionLevel_None					0 // No permissions, cannot use UI
#Const C_PermissionLevel_User					1 // Can execute commands
#Const C_PermissionLevel_Admin				2 // Can add Users
#Const C_PermissionLevel_SuperAdmin		3 // Can add Admins

#Struct CommandUtils::K_Command as K_Command

#Const C_InternalCommand_SetPermissionLevel		"PermitUser" // Requires target permission level < Caller
#Const C_InternalCommand_RemoveUser						"RemoveUser" // Requires target user permission level < Caller
#Const C_InternalCommand_ListUsers						"ListUsers"	 // Requires caller permissions >= Admin

#Struct K_QuickCommand {
	Text Command;
	Text IconStyle;
	Text IconSubstyle;
}

declare K_QuickCommand[] G_QuickCommands;
declare Integer[Text] G_Users; // Login => PermissionLevel
declare K_Command[] G_PendingCommands;

/**
 * Gets the manialink to send to the clients as Layer.
 */
Text GetManialink() {
	declare Text FrameInstancesXml;
	for(I, 0, G_QuickCommands.count - 1) {
		FrameInstancesXml ^= """<frameinstance modelid="model-quick-command" pos="{{{ 12.5 * I }}}" id="quick-command-{{{ I }}}"/>""";
	}

	declare Text QuickCommandReferences;
	for(I, 0, G_QuickCommands.count - 1) {
		QuickCommandReferences ^= """{
		declare CMlFrame FrameQuickCommand = (Page.GetFirstChild("quick-command-{{{ I }}}") as CMlFrame);
		declare CMlQuad Icon = (FrameQuickCommand.GetFirstChild("icon") as CMlQuad);
		declare CMlLabel Label = (FrameQuickCommand.GetFirstChild("label") as CMlLabel);
		Icon.Style = "{{{ G_QuickCommands[I].IconStyle }}}";
		Icon.Substyle = "{{{ G_QuickCommands[I].IconSubstyle }}}";
		Label.Value = "{{{ G_QuickCommands[I].Command }}}";
		QuickCommands[Icon] = Label;
	}""";
	}

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="ModeCommands">
<framemodel id="model-quick-command">
	<quad pos="0 0" z-index="0" size="10 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
	<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFF" halign="center" valign="center" style="Icons64x64_1" substyle="Add" scriptevents="1" id="icon"/>
	<label pos="5 -6" z-index="0" size="50 5" text="myLabelasdasdasd" textemboss="1" id="label" halign="right" valign="top" hidden="1"/>
</framemodel>

<frame id="commands-ui" pos="170 {{{ C_UIPosition_Y }}}" z-index="50">
	<quad  z-index="0" size="10 10" bgcolor="FFF" style="Icons128x128_1" substyle="BackFocusable" scriptevents="1" halign="center" valign="center" id="toggle-menu"/>

	<label  z-index="0" size="65 7.5" text="Mode Commands" halign="left" valign="center" pos="7.5 9" textfont="GameFontBlack" textsize="4" textemboss="1"/>

	<frame id="quick-commands" pos="80">
		{{{ FrameInstancesXml }}}
	</frame>

	<frame id="custom-command" pos="40">
		<quad pos="0 0" z-index="0" size="65 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
		<quad pos="-30 0" z-index="0" size="45 5" bgcolor="000" halign="left" valign="center" opacity="0.5"/>
		<entry pos="-30 0" z-index="2" size="45 5"  id="textedit-command" valign="center" halign="left" textsize="3" style="StyleTextScriptEditor" textcolor="fff"/>
		<label pos="30 0" z-index="2" size="20 5" text="$zî¥‹" valign="center" halign="right" style="CardButtonMediumXS" id="button-sendcommand" scriptevents="1"/>
	</frame>
</frame>

<script> <!--
#Include "TextLib" as TL
#Const C_MenuAnimDuration 750

declare CMlFrame FrameMain;
declare CMlQuad QuadToggleMenu;
declare CMlFrame FrameCustomCommand;
declare CMlEntry TextEditCustomCommand;
declare CMlLabel ButtonCustomCommandSend;
declare Boolean MenuState;

Void ToggleMenu(Boolean State) {
	declare Text PanelAnimTargetPos;
	declare Text ArrowAnimTargetRot;
	if (!State) {
		PanelAnimTargetPos = "155 {{{ C_UIPosition_Y }}}";
		ArrowAnimTargetRot = "0";
	} else {
		PanelAnimTargetPos = "{{{ 85 - G_QuickCommands.count * 12.5 }}} {{{ C_UIPosition_Y }}}";
		ArrowAnimTargetRot = "180";
	}
	AnimMgr.Add(FrameMain, "<frame pos='"^PanelAnimTargetPos^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
	AnimMgr.Add(QuadToggleMenu, "<frame rot='"^ArrowAnimTargetRot^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
}

Void ToggleMenu() {
	MenuState = !MenuState;
	ToggleMenu(MenuState);
}

Void OnSendCommand() {
	declare Text[] CommandSplit = TL::Split(" ", TextEditCustomCommand.Value);
	if(CommandSplit.count >= 1) {
		declare Text CommandName = "{{{ CommandUtils::C_CommandPrefix }}}" ^ CommandSplit[0];
		declare Text[] CommandParams = CommandSplit.slice(1, CommandSplit.count - 1);
		if (CommandParams.count > 10) CommandParams = [TL::Join(" ", CommandParams)]; // Cannot send more than 10 params
		SendCustomEvent(CommandName, CommandParams);
	}
	TextEditCustomCommand.Value = "";
}

main() {
	/* Control References */
	FrameMain = (Page.GetFirstChild("commands-ui") as CMlFrame);
	QuadToggleMenu = (Page.GetFirstChild("toggle-menu") as CMlQuad);

	FrameCustomCommand = (Page.GetFirstChild("custom-command") as CMlFrame);
	TextEditCustomCommand = (Page.GetFirstChild("textedit-command") as CMlEntry);
	ButtonCustomCommandSend = (Page.GetFirstChild("button-sendcommand") as CMlLabel);

	declare CMlLabel[CMlQuad] QuickCommands;
	{{{ QuickCommandReferences }}}

	FrameMain.RelativePosition_V3 = <155., {{{ C_UIPosition_Y }}}>;
	MenuState = False;
	ToggleMenu(MenuState);

	while(True) {
		yield;

		foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.Control == QuadToggleMenu) {
							ToggleMenu();
						} else if (Event.Control == ButtonCustomCommandSend) {
							OnSendCommand();
						} else {
							if(Event.Control is CMlQuad && QuickCommands.existskey(Event.Control as CMlQuad)) {
								declare Text CommandName = "{{{ CommandUtils::C_CommandPrefix }}}" ^ QuickCommands[Event.Control as CMlQuad].Value;
								SendCustomEvent(CommandName, []);
							}
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						if(Event.Control is CMlQuad && QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = True;
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						if(Event.Control is CMlQuad && QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = False;
						}
					}
					case CMlScriptEvent::Type::EntrySubmit: {
						OnSendCommand();
					}
				}
			}
	}
}
--></script>
</manialink>
	""";
}

/**
 * Adds a new quick command button with given icon style and substyle.
 * Command Name should be without the "Command_" prefix.
 */
Void AddQuickCommand(Text _Name, Text _IconStyle, Text _IconSubstyle) {
	declare K_QuickCommand Command;
	Command.Command = _Name;
	Command.IconStyle = _IconStyle;
	Command.IconSubstyle = _IconSubstyle;
	G_QuickCommands.add(Command);
	Layers::Update(C_LayerName, GetManialink());
}

/**
 * Clears all quick commands.
 */
Void ClearQuickCommands() {
	G_QuickCommands.clear();
	Layers::Update(C_LayerName, GetManialink());
}

Boolean HasPermissionLevel(Text _Login, Integer _PermissionLevel) {
	return G_Users.get(_Login, C_PermissionLevel_None) >= _PermissionLevel;
}

Integer GetUserPermissionLevel(Text _Login) {
	return G_Users.get(_Login, C_PermissionLevel_None);
}

Void SetUserPermissionLevel(Text _Login, Integer _PermissionLevel) {
	if (_PermissionLevel <= C_PermissionLevel_None) {
		G_Users.removekey(_Login);
		return;
	}
	G_Users[_Login] = _PermissionLevel;
}

Void RemoveUserPermissions(Text _Login) {
	G_Users.removekey(_Login);
}

Void RemoveAllUserPermissions() {
	G_Users.clear();
}

Void SetUser(Text _Login) {
	SetUserPermissionLevel(_Login, C_PermissionLevel_User);
}

Void SetAdmin(Text _Login) {
	SetUserPermissionLevel(_Login, C_PermissionLevel_Admin);
}

Void SetSuperAdmin(Text _Login) {
	SetUserPermissionLevel(_Login, C_PermissionLevel_SuperAdmin);
}

/**
 * Gets a list of all pending Commands.
 */
K_Command[] GetPendingCommands() {
	return G_PendingCommands;
}

Void Private_HandleInternalCommand_SetPermissionLevel(K_Command _Command) {
	if (_Command.Params.count < 2) {
		return;
	}

	declare Text TargetLogin = _Command.Params[0];
	declare Integer TargetPermissionLevel = TL::ToInteger(_Command.Params[1]);
	if (_Command.Source.Type == CommandUtils::C_SourceType_Player && !HasPermissionLevel(_Command.Source.Login, TargetPermissionLevel + 1)) {
		return;
	}
	SetUserPermissionLevel(TargetLogin, TargetPermissionLevel);
}

Void Private_HandleInternalCommand_RemoveUser(K_Command _Command) {
	declare Text TargetLogin = _Command.ValueText;
	if (_Command.Source.Type == CommandUtils::C_SourceType_Player) {
		declare Integer TargetPermissionLevel = GetUserPermissionLevel(TargetLogin);
		if (!HasPermissionLevel(_Command.Source.Login, TargetPermissionLevel + 1)) {
			return;
		}
	}
	RemoveUserPermissions(TargetLogin);
}

Void Private_HandleInternalCommand_ListUsers(K_Command _Command) {
	if (_Command.Source.Type != CommandUtils::C_SourceType_Player) {
		return;
	}

	declare CSmPlayer SourcePlayer = GetPlayer(_Command.Source.Login);
	if (SourcePlayer == Null) {
		return;
	}

	declare CUIConfig SourceUI = UIManager.GetUI(SourcePlayer);
	if (SourceUI == Null) {
		return;
	}

	declare Text[] UsersFormatted;
	foreach (Login => PermissionLevel in G_Users) {
		declare CSmPlayer Player = GetPlayer(Login);
		declare Text Name;
		if (Player == Null) {
			Name = "Disconnected";
		} else {
			Name = Player.User.Name;
		}
		UsersFormatted.add("""{{{ Name }}} ({{{ Login }}}) => {{{ PermissionLevel }}}""");
	}

	declare Text Message = "[ModeCommands] List of users: " ^ TL::Join(", ", UsersFormatted);
	SourceUI.SendChat(Message);
}

/**
 * Handles commands that manage the lib itself.
 */
Void Private_HandleInternalCommand(K_Command _Command) {
	switch (_Command.Name) {
		case C_InternalCommandPrefix ^ C_InternalCommand_SetPermissionLevel: {
			Private_HandleInternalCommand_SetPermissionLevel(_Command);
		}
		case C_InternalCommandPrefix ^ C_InternalCommand_RemoveUser: {
			Private_HandleInternalCommand_RemoveUser(_Command);
		}
		case C_InternalCommandPrefix ^ C_InternalCommand_ListUsers: {
			Private_HandleInternalCommand_ListUsers(_Command);
		}
	}
}

Void Load() {
	Layers::Create(C_LayerName, GetManialink());
	Layers::SetType(C_LayerName, CUILayer::EUILayerType::Normal);
}

Void Unload() {
	Layers::Destroy(C_LayerName);
}

/**
 * Executes all necessarry procedures during a yield.
 */
Void Yield() {
	G_PendingCommands.clear();

	// Check if ModeCommands users are missing the layer or if Non-Users have the layer
	foreach (Player in AllPlayers) {
		declare Boolean IsMissingLayer = Layers::IsMissing(C_LayerName, Player);
		declare Boolean HasPermissions = HasPermissionLevel(Player.User.Login, C_PermissionLevel_User);
		if (HasPermissions && IsMissingLayer) {
			Layers::Attach(C_LayerName, Player);
		} else if (!HasPermissions && !IsMissingLayer) {
			Layers::Detach(C_LayerName, Player);
		}
	}

	// Check UI Events for Commands
	foreach (Event in UIManager.PendingEvents) {
		if (TL::StartsWith(CommandUtils::C_CommandPrefix, Event.CustomEventType)) {
			declare K_Command Command = CommandUtils::FromEvent(Event);
			declare Boolean IsInternalCommand = TL::StartsWith(C_InternalCommandPrefix, Command.Name);
			if (IsInternalCommand && HasPermissionLevel(Command.Source.Login, C_PermissionLevel_Admin)) {
				Private_HandleInternalCommand(Command);
			} else if (HasPermissionLevel(Command.Source.Login, C_PermissionLevel_User)) {
				G_PendingCommands.add(Command);
			}
		}
	}
}