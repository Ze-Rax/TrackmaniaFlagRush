#Include "TextLib" as TL
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers
#Include "Libs/Zrx/ModeLibs/Common/Commands/CommandUtils.Script.txt" as CommandUtils

#Const C_LayerName "ModeCommands"

#Const C_UIPosition_Y							50.
#Const C_InternalCommandPrefix		"MC:"

#Const C_InternalCommand_AddAdmin									"AddAdmin"
#Const C_InternalCommand_RemoveAdmin							"RemoveAdmin"
#Const C_InternalCommand_AddPermitPermittedUser		"Permit"
#Const C_InternalCommand_RemovePermittedUser			"RemovePermissions"

#Struct K_QuickCommand {
	Text Command;
	Text IconStyle;
	Text IconSubstyle;
}

declare K_QuickCommand[] G_QuickCommands;
declare Text[] G_AdminLogins;
declare Text[] G_PermittedUserLogins;
declare CommandUtils::K_Command[] G_PendingCommands;

/**
 * Sends the changed users to the UIs and saves them persistently for the server.
 */
Void Private_OnPermissionsUpdate() {
	// Send the permitted users to the UIs
	declare netwrite Text[] Net_ModeCommands_PermittedUserLogins for Teams[0];
	Net_ModeCommands_PermittedUserLogins = G_PermittedUserLogins;
}

/**
 * Gets the manialink to send to the clients as Layer.
 */
Text GetManialink() {
	declare Text FrameInstancesXml;
	for(I, 0, G_QuickCommands.count - 1) {
		FrameInstancesXml ^= """<frameinstance modelid="model-quick-command" pos="{{{ 12.5 * I }}}" id="quick-command-{{{ I }}}"/>""";
	}

	declare Text QuickCommandReferences;
	for(I, 0, G_QuickCommands.count - 1) {
		QuickCommandReferences ^= """{
		declare CMlFrame FrameQuickCommand = (Page.GetFirstChild("quick-command-{{{ I }}}") as CMlFrame);
		declare CMlQuad Icon = (FrameQuickCommand.GetFirstChild("icon") as CMlQuad);
		declare CMlLabel Label = (FrameQuickCommand.GetFirstChild("label") as CMlLabel);
		Icon.Style = "{{{ G_QuickCommands[I].IconStyle }}}";
		Icon.Substyle = "{{{ G_QuickCommands[I].IconSubstyle }}}";
		Label.Value = "{{{ G_QuickCommands[I].Command }}}";
		QuickCommands[Icon] = Label;
	}""";
	}

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="ModeCommands">
<framemodel id="model-quick-command">
	<quad pos="0 0" z-index="0" size="10 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
	<quad pos="0 0" z-index="1" size="10 10" bgcolor="FFF" halign="center" valign="center" style="Icons64x64_1" substyle="Add" scriptevents="1" id="icon"/>
	<label pos="5 -6" z-index="0" size="50 5" text="myLabelasdasdasd" textemboss="1" id="label" halign="right" valign="top" hidden="1"/>
</framemodel>

<frame id="commands-ui" pos="170 {{{ C_UIPosition_Y }}}" z-index="50">
	<quad  z-index="0" size="10 10" bgcolor="FFF" style="Icons128x128_1" substyle="BackFocusable" scriptevents="1" halign="center" valign="center" id="toggle-menu"/>

	<label  z-index="0" size="65 7.5" text="Mode Commands" halign="left" valign="center" pos="7.5 9" textfont="GameFontBlack" textsize="4" textemboss="1"/>

	<frame id="quick-commands" pos="80">
		{{{ FrameInstancesXml }}}
	</frame>

	<frame id="custom-command" pos="40">
		<quad pos="0 0" z-index="0" size="65 10" bgcolor="000" halign="center" valign="center" opacity="0.5"/>
		<quad pos="-30 0" z-index="0" size="45 5" bgcolor="000" halign="left" valign="center" opacity="0.5"/>
		<entry pos="-30 0" z-index="2" size="45 5"  id="textedit-command" valign="center" halign="left" textsize="3" style="StyleTextScriptEditor" textcolor="fff"/>
		<label pos="30 0" z-index="2" size="20 5" text="$zî¥‹" valign="center" halign="right" style="CardButtonMediumXS" id="button-sendcommand" scriptevents="1"/>
	</frame>
</frame>

<script> <!--
#Include "TextLib" as TL
#Const C_MenuAnimDuration 750

declare CMlFrame FrameMain;
declare CMlQuad QuadToggleMenu;
declare CMlFrame FrameCustomCommand;
declare CMlEntry TextEditCustomCommand;
declare CMlLabel ButtonCustomCommandSend;
declare Boolean MenuState;

Void ToggleMenu(Boolean State) {
	declare Text PanelAnimTargetPos;
	declare Text ArrowAnimTargetRot;
	if (!State) {
		PanelAnimTargetPos = "155 {{{ C_UIPosition_Y }}}";
		ArrowAnimTargetRot = "0";
	} else {
		PanelAnimTargetPos = "{{{ 85 - G_QuickCommands.count * 12.5 }}} {{{ C_UIPosition_Y }}}";
		ArrowAnimTargetRot = "180";
	}
	AnimMgr.Add(FrameMain, "<frame pos='"^PanelAnimTargetPos^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
	AnimMgr.Add(QuadToggleMenu, "<frame rot='"^ArrowAnimTargetRot^"' />", C_MenuAnimDuration, CAnimManager::EAnimManagerEasing::QuintOut);
}

Void ToggleMenu() {
	MenuState = !MenuState;
	ToggleMenu(MenuState);
}

Void OnSendCommand() {
	declare Text[] CommandSplit = TL::Split(" ", TextEditCustomCommand.Value);
	if(CommandSplit.count >= 1) {
		declare Text CommandName = "{{{ CommandUtils::C_CommandPrefix }}}" ^ CommandSplit[0];
		declare Text[] CommandParams = CommandSplit.slice(1, CommandSplit.count - 1);
		if (CommandParams.count > 10) CommandParams = [TL::Join(" ", CommandParams)]; // Cannot send more than 10 params
		SendCustomEvent(CommandName, CommandParams);
	}
	TextEditCustomCommand.Value = "";
}

main() {
	/* Control References */
	FrameMain = (Page.GetFirstChild("commands-ui") as CMlFrame);
	QuadToggleMenu = (Page.GetFirstChild("toggle-menu") as CMlQuad);

	FrameCustomCommand = (Page.GetFirstChild("custom-command") as CMlFrame);
	TextEditCustomCommand = (Page.GetFirstChild("textedit-command") as CMlEntry);
	ButtonCustomCommandSend = (Page.GetFirstChild("button-sendcommand") as CMlLabel);

	declare netread Text[] Net_ModeCommands_PermittedUserLogins for Teams[0];

	declare CMlLabel[CMlQuad] QuickCommands;
	{{{ QuickCommandReferences }}}

	FrameMain.RelativePosition_V3 = <155., {{{ C_UIPosition_Y }}}>;
	MenuState = False;
	ToggleMenu(MenuState);

	while(True) {
		yield;

		declare Boolean UserIsPermitted = Net_ModeCommands_PermittedUserLogins.exists(LocalUser.Login);
		FrameMain.Visible = UserIsPermitted;
		if (!UserIsPermitted) {
			continue;
		}

		foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.Control == QuadToggleMenu) {
							ToggleMenu();
						} else if (Event.Control == ButtonCustomCommandSend) {
							OnSendCommand();
						} else {
							if(QuickCommands.existskey(Event.Control as CMlQuad)) {
								declare Text CommandName = "{{{ CommandUtils::C_CommandPrefix }}}" ^ QuickCommands[Event.Control as CMlQuad].Value;
								SendCustomEvent(CommandName, []);
							}
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						if(QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = True;
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						if(QuickCommands.existskey(Event.Control as CMlQuad)) {
							QuickCommands[Event.Control as CMlQuad].Visible = False;
						}
					}
					case CMlScriptEvent::Type::EntrySubmit: {
						OnSendCommand();
					}
				}
			}
	}
}
--></script>
</manialink>
	""";
}

/**
 * Adds a new quick command button with given icon style and substyle.
 * Command Name should be without the "Command_" prefix.
 */
Void AddQuickCommand(Text Name, Text IconStyle, Text IconSubstyle) {
	declare K_QuickCommand Command;
	Command.Command = Name;
	Command.IconStyle = IconStyle;
	Command.IconSubstyle = IconSubstyle;
	G_QuickCommands.add(Command);
}

/**
 * Clears all quick commands.
 */
Void ClearQuickCommands() {
	G_QuickCommands.clear();
}

/**
 * Gets a list of all user logins that are permitted to use mode commands.
 */
Text[] GetPermittedUserLogins() {
	return G_PermittedUserLogins;
}

/**
 * Checks if a given user login has permissions to use mode commands.
 */
Boolean IsPermittedUser(Text Login) {
	return G_PermittedUserLogins.exists(Login);
}

/**
 * Grants permissions for a given user login to use mode commands.
 */
Void AddPermittedUser(Text Login) {
	if(!IsPermittedUser(Login)) {
		G_PermittedUserLogins.add(Login);
	}
	Private_OnPermissionsUpdate();
}

/**
 * Removes permissions for a given user login to use mode commands.
 */
Void RemovePermittedUser(Text Login) {
	G_PermittedUserLogins.remove(Login);
	G_AdminLogins.remove(Login);
	Private_OnPermissionsUpdate();
}

/**
 * Removes permissions for all users to use mode commands.
 */
Void ClearPermittedUsers() {
	G_PermittedUserLogins.clear();
	G_AdminLogins.clear();
	Private_OnPermissionsUpdate();
}

/**
 * Get a list of all admin logins for mode commands.
 */
Text[] GetAdminLogins() {
	return G_AdminLogins;
}

/**
 * Checks if a given user login has admin permissions.
 */
Boolean IsAdmin(Text Login) {
	return G_AdminLogins.exists(Login);
}

/**
 * Grants admin permissions for a given user login.
 * Also adds the login to the list of permitted user logins.
 */
Void AddAdmin(Text Login) {
	if(!IsAdmin(Login)) {
		G_AdminLogins.add(Login);
	}
	if(!IsPermittedUser(Login)) {
		G_PermittedUserLogins.add(Login);
	}
	Private_OnPermissionsUpdate();
}

/**
 * Removes admin permissions from a given user login.
 */
Void RemoveAdmin(Text Login) {
	G_AdminLogins.remove(Login);
	Private_OnPermissionsUpdate();
}

/**
 * Removes permissions for all users to use mode commands.
 */
Void ClearAdmins() {
	G_AdminLogins.clear();
	Private_OnPermissionsUpdate();
}

/**
 * Gets a list of all pending Commands.
 */
CommandUtils::K_Command[] GetPendingCommands() {
	return G_PendingCommands;
}

/**
 * Handles commands that manage the lib itself.
 */
Void Private_HandleInternalCommand(CommandUtils::K_Command Command) {
	switch (Command.Name) {
		case CommandUtils::C_CommandPrefix ^ C_InternalCommandPrefix ^ C_InternalCommand_AddAdmin: {
			declare CSmPlayer NewAdmin = GetPlayer(Command.ValueText);
			if(NewAdmin != Null) {
				AddAdmin(NewAdmin.User.Login);
			}
		}
		case CommandUtils::C_CommandPrefix ^ C_InternalCommandPrefix ^ C_InternalCommand_RemoveAdmin: {
			RemoveAdmin(Command.ValueText);
		}
		case CommandUtils::C_CommandPrefix ^ C_InternalCommandPrefix ^ C_InternalCommand_AddPermitPermittedUser: {
			declare CSmPlayer NewPermittedUser = GetPlayer(Command.ValueText);
			if(NewPermittedUser != Null) {
				AddPermittedUser(NewPermittedUser.User.Login);
			}
		}
		case CommandUtils::C_CommandPrefix ^ C_InternalCommandPrefix ^ C_InternalCommand_RemovePermittedUser: {
			RemovePermittedUser(Command.ValueText);
		}
	}
}

/**
 * Executes all necessarry procedures during a yield.
 */
Void Yield() {
	G_PendingCommands.clear();

	foreach (Event in UIManager.PendingEvents) {
		if(TL::StartsWith("Command_", Event.CustomEventType)) {
			declare CommandUtils::K_Command Command = CommandUtils::FromEvent(Event);
			if(TL::StartsWith("Command_MC:", Event.CustomEventType) && IsAdmin(Command.Source)) {
				Private_HandleInternalCommand(Command);
			} else if(IsPermittedUser(Command.Source)) {
				G_PendingCommands.add(Command);
			}
		}
	}
}

Void Attach() {
	Layers::Create(C_LayerName, GetManialink());
	Layers::SetType(C_LayerName, CUILayer::EUILayerType::Normal);
	Layers::Attach(C_LayerName);
}

Void Detach() {
	Layers::Detach(C_LayerName);
}