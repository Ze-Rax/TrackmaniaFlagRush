/**
 *	Library to keep track of players activity in gamemodes; Inspired by Scores library
 */

#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores // Only used for aliasing reset levels

#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

/* General functions for easy operation; Match progression methods at the bottom */

///////////
// Round //
///////////

Void ResetPlayerRoundStatistic(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Round_Integer for _Score = [];
	PlayerStatistics_Round_Integer = [];
	declare Real[Text] PlayerStatistics_Round_Real for _Score = [];
	PlayerStatistics_Round_Real = [];
}

/* Integer */

Void SetPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _Value) {
	declare Integer[Text] PlayerStatistics_Round_Integer for _Score = [];
	PlayerStatistics_Round_Integer[_Key] = _Value;
}

Integer[Text] GetPlayerRoundIntegers(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Round_Integer for _Score = [];
	return PlayerStatistics_Round_Integer;
}

Integer GetPlayerRoundInteger(CSmScore _Score, Text _Key) {
	declare Integer[Text] PlayerStatistics_Round_Integer for _Score = [];
	return PlayerStatistics_Round_Integer.get(_Key, 0);
}

Void AddPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) {
	SetPlayerRoundInteger(_Score, _Key, GetPlayerRoundInteger(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) {
	SetPlayerRoundInteger(_Score, _Key, GetPlayerRoundInteger(_Score, _Key) - _ValueSubtract);
}

/* Real */

Void SetPlayerRoundReal(CSmScore _Score, Text _Key, Real _Value) {
	declare Real[Text] PlayerStatistics_Round_Real for _Score = [];
	PlayerStatistics_Round_Real[_Key] = _Value;
}

Real[Text] GetPlayerRoundReals(CSmScore _Score) {
	declare Real[Text] PlayerStatistics_Round_Real for _Score = [];
	return PlayerStatistics_Round_Real;
}

Real GetPlayerRoundReal(CSmScore _Score, Text _Key) {
	declare Real[Text] PlayerStatistics_Round_Real for _Score = [];
	return PlayerStatistics_Round_Real.get(_Key, 0.);
}

Void AddPlayerRoundReal(CSmScore _Score, Text _Key, Real _ValueAdd) {
	SetPlayerRoundReal(_Score, _Key, GetPlayerRoundReal(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerRoundReal(CSmScore _Score, Text _Key, Real _ValueSubtract) {
	SetPlayerRoundReal(_Score, _Key, GetPlayerRoundReal(_Score, _Key) - _ValueSubtract);
}

/////////
// Map //
/////////

Void ResetPlayerMapStatistic(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Map_Integer for _Score = [];
	PlayerStatistics_Map_Integer = [];
	declare Real[Text] PlayerStatistics_Map_Real for _Score = [];
	PlayerStatistics_Map_Real = [];
}

/* Integer */

Void SetPlayerMapInteger(CSmScore _Score, Text _Key, Integer _Value) {
	declare Integer[Text] PlayerStatistics_Map_Integer for _Score = [];
	PlayerStatistics_Map_Integer[_Key] = _Value;
}

Integer[Text] GetPlayerMapIntegers(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Map_Integer for _Score = [];
	return PlayerStatistics_Map_Integer;
}

Integer GetPlayerMapInteger(CSmScore _Score, Text _Key) {
	declare Integer[Text] PlayerStatistics_Map_Integer for _Score = [];
	return PlayerStatistics_Map_Integer.get(_Key, 0);
}

Void AddPlayerMapInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) {
	SetPlayerMapInteger(_Score, _Key, GetPlayerMapInteger(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerMapInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) {
	SetPlayerMapInteger(_Score, _Key, GetPlayerMapInteger(_Score, _Key) - _ValueSubtract);
}

/* Real */

Void SetPlayerMapReal(CSmScore _Score, Text _Key, Real _Value) {
	declare Real[Text] PlayerStatistics_Map_Real for _Score = [];
	PlayerStatistics_Map_Real[_Key] = _Value;
}

Real[Text] GetPlayerMapReals(CSmScore _Score) {
	declare Real[Text] PlayerStatistics_Map_Real for _Score = [];
	return PlayerStatistics_Map_Real;
}

Real GetPlayerMapReal(CSmScore _Score, Text _Key) {
	declare Real[Text] PlayerStatistics_Map_Real for _Score = [];
	return PlayerStatistics_Map_Real.get(_Key, 0.);
}

Void AddPlayerMapReal(CSmScore _Score, Text _Key, Real _ValueAdd) {
	SetPlayerMapReal(_Score, _Key, GetPlayerMapReal(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerMapReal(CSmScore _Score, Text _Key, Real _ValueSubtract) {
	SetPlayerMapReal(_Score, _Key, GetPlayerMapReal(_Score, _Key) - _ValueSubtract);
}

///////////
// Match //
///////////

Void ResetPlayerMatchStatistic(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Match_Integer for _Score = [];
	PlayerStatistics_Match_Integer = [];
	declare Real[Text] PlayerStatistics_Match_Real for _Score = [];
	PlayerStatistics_Match_Real = [];
}

/* Integer */

Void SetPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _Value) {
	declare Integer[Text] PlayerStatistics_Match_Integer for _Score = [];
	PlayerStatistics_Match_Integer[_Key] = _Value;
}

Integer[Text] GetPlayerMatchIntegers(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Match_Integer for _Score = [];
	return PlayerStatistics_Match_Integer;
}

Integer GetPlayerMatchInteger(CSmScore _Score, Text _Key) {
	declare Integer[Text] PlayerStatistics_Match_Integer for _Score = [];
	return PlayerStatistics_Match_Integer.get(_Key, 0);
}

Void AddPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) {
	SetPlayerMatchInteger(_Score, _Key, GetPlayerMatchInteger(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) {
	SetPlayerMatchInteger(_Score, _Key, GetPlayerMatchInteger(_Score, _Key) - _ValueSubtract);
}

/* Real */

Void SetPlayerMatchReal(CSmScore _Score, Text _Key, Real _Value) {
	declare Real[Text] PlayerStatistics_Match_Real for _Score = [];
	PlayerStatistics_Match_Real[_Key] = _Value;
}

Real[Text] GetPlayerMatchReals(CSmScore _Score) {
	declare Real[Text] PlayerStatistics_Match_Real for _Score = [];
	return PlayerStatistics_Match_Real;
}

Real GetPlayerMatchReal(CSmScore _Score, Text _Key) {
	declare Real[Text] PlayerStatistics_Match_Real for _Score = [];
	return PlayerStatistics_Match_Real.get(_Key, 0.);
}

Void AddPlayerMatchReal(CSmScore _Score, Text _Key, Real _ValueAdd) {
	SetPlayerMatchReal(_Score, _Key, GetPlayerMatchReal(_Score, _Key) + _ValueAdd);
}

Void SubtractPlayerMatchReal(CSmScore _Score, Text _Key, Real _ValueSubtract) {
	SetPlayerMatchReal(_Score, _Key, GetPlayerMatchReal(_Score, _Key) - _ValueSubtract);
}

/* Match Progression Methods */

Void Clear(CSmScore _Score, Integer _Level) {
	if(_Level <= C_Level_Match) ResetPlayerMatchStatistic(_Score);
	if(_Level <= C_Level_Map) ResetPlayerMapStatistic(_Score);
	if(_Level <= C_Level_Round) ResetPlayerRoundStatistic(_Score);
}

Void Clear(CSmScore _Score) {
	Clear(_Score, C_Level_Match);
}

Void Clear(Integer _Level) {
	foreach(_Score in Scores) Clear(_Score, _Level);
}

Void Clear() {
	Clear(C_Level_Match);
}

Void AffectPlayerRoundToMapAndMatchStatistic(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Round_Integer = GetPlayerRoundIntegers(_Score);

	foreach(_Key => _Value in PlayerStatistics_Round_Integer) {
		AddPlayerMapInteger(_Score, _Key, _Value);
		AddPlayerMatchInteger(_Score, _Key, _Value);
	}

	declare Real[Text] PlayerStatistics_Round_Real = GetPlayerRoundReals(_Score);
	foreach(_Key => _Value in PlayerStatistics_Round_Real) {
		AddPlayerMapReal(_Score, _Key, _Value);
		AddPlayerMatchReal(_Score, _Key, _Value);
	}

	Clear(_Score, C_Level_Round);
}

Void AffectPlayersRoundToMapAndMatchStatistic() {
	foreach(_Score in Scores) AffectPlayerRoundToMapAndMatchStatistic(_Score);
}

Void StartMatch() {
	Clear(C_Level_Match);
}

Void EndMatch() {

}

Void StartMap() {
	Clear(C_Level_Map);
}

Void EndMap() {

}

Void StartRound() {
	Clear(C_Level_Round);
}

Void EndRound() {
	AffectPlayersRoundToMapAndMatchStatistic();
}