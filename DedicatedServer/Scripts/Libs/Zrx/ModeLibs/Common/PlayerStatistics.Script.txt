/**
 *	Library to keep track of players activity in gamemodes; Inspired by Scores library
 */

#Include "MathLib" as ML

#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores // Only used for aliasing reset levels

#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

#Struct K_PlayerStatistic {
	Integer ValueInteger;
	Real ValueReal;
	Boolean Cumulative;
}

/* General functions for easy operation */

Void Reset(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	PlayerStatistics[_Level] = [];
}

K_PlayerStatistic[Text] Get(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, []);
}

/* Integer */

Void Set(CSmScore _Score, Text _Key, Integer _Value, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	if (!PlayerStatistics.existskey(_Level)) {
		PlayerStatistics[_Level] = [];
	}
	PlayerStatistics[_Level][_Key] = K_PlayerStatistic{ ValueInteger = _Value, ValueReal = ML::ToReal(_Value) };
}

Integer GetInteger(CSmScore _Score, Text _Key, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, []).get(_Key, K_PlayerStatistic{}).ValueInteger;
}

Void Add(CSmScore _Score, Text _Key, Integer _ValueAdd, Integer _Level) {
	declare Integer Value = GetInteger(_Score, _Key, _Level) + _ValueAdd;
	Set(_Score, _Key, Value, _Level);
}

Void Subtract(CSmScore _Score, Text _Key, Integer _ValueSubtract, Integer _Level) {
	declare Integer Value = GetInteger(_Score, _Key, _Level) - _ValueSubtract;
	Set(_Score, _Key, Value, _Level);
}

/* Reals */

Void Set(CSmScore _Score, Text _Key, Real _Value, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	if (!PlayerStatistics.existskey(_Level)) {
		PlayerStatistics[_Level] = [];
	}
	PlayerStatistics[_Level][_Key] = K_PlayerStatistic{ ValueInteger = ML::NearestInteger(_Value), ValueReal = _Value };
}

Real GetReal(CSmScore _Score, Text _Key, Integer _Level) {
	declare K_PlayerStatistic[Text][Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, []).get(_Key, K_PlayerStatistic{}).ValueReal;
}

Void Add(CSmScore _Score, Text _Key, Real _ValueAdd, Integer _Level) {
	declare Real Value = GetReal(_Score, _Key, _Level) + _ValueAdd;
	Set(_Score, _Key, Value, _Level);
}

Void Subtract(CSmScore _Score, Text _Key, Real _ValueSubtract, Integer _Level) {
	declare Real Value = GetReal(_Score, _Key, _Level) - _ValueSubtract;
	Set(_Score, _Key, Value, _Level);
}

/* Segment specific delegates */

// Round
Void ResetRound(CSmScore _Score) { Reset(_Score, C_Level_Round); }
K_PlayerStatistic[Text] GetRound(CSmScore _Score) { return Get(_Score, C_Level_Round); }

Void SetRound(CSmScore _Score, Text _Key, Integer _Value) { Set(_Score, _Key, _Value, C_Level_Round); }
Integer GetRoundInteger(CSmScore _Score, Text _Key) { return GetInteger(_Score, _Key, C_Level_Round); }
Void AddRound(CSmScore _Score, Text _Key, Integer _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Round); }
Void SubtractRound(CSmScore _Score, Text _Key, Integer _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Round); }

Void SetRound(CSmScore _Score, Text _Key, Real _Value) { Set(_Score, _Key, _Value, C_Level_Round); }
Real GetRoundReal(CSmScore _Score, Text _Key) { return GetReal(_Score, _Key, C_Level_Round); }
Void AddRound(CSmScore _Score, Text _Key, Real _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Round); }
Void SubtractRound(CSmScore _Score, Text _Key, Real _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Round); }

// Map
Void ResetMap(CSmScore _Score) { Reset(_Score, C_Level_Map); }
K_PlayerStatistic[Text] GetMap(CSmScore _Score) { return Get(_Score, C_Level_Map); }

Void SetMap(CSmScore _Score, Text _Key, Integer _Value) { Set(_Score, _Key, _Value, C_Level_Map); }
Integer GetMapInteger(CSmScore _Score, Text _Key) { return GetInteger(_Score, _Key, C_Level_Map); }
Void AddMap(CSmScore _Score, Text _Key, Integer _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Map); }
Void SubtractMap(CSmScore _Score, Text _Key, Integer _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Map); }

Void SetMap(CSmScore _Score, Text _Key, Real _Value) { Set(_Score, _Key, _Value, C_Level_Map); }
Real GetMapReal(CSmScore _Score, Text _Key) { return GetReal(_Score, _Key, C_Level_Map); }
Void AddMap(CSmScore _Score, Text _Key, Real _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Map); }
Void SubtractMap(CSmScore _Score, Text _Key, Real _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Map); }

// Match
Void ResetMatch(CSmScore _Score) { Reset(_Score, C_Level_Match); }
K_PlayerStatistic[Text] GetMatch(CSmScore _Score) { return Get(_Score, C_Level_Match); }

Void SetMatch(CSmScore _Score, Text _Key, Integer _Value) { Set(_Score, _Key, _Value, C_Level_Match); }
Integer GetMatchInteger(CSmScore _Score, Text _Key) { return GetInteger(_Score, _Key, C_Level_Match); }
Void AddMatch(CSmScore _Score, Text _Key, Integer _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Match); }
Void SubtractMatch(CSmScore _Score, Text _Key, Integer _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Match); }

Void SetMatch(CSmScore _Score, Text _Key, Real _Value) { Set(_Score, _Key, _Value, C_Level_Match); }
Real GetMatchReal(CSmScore _Score, Text _Key) { return GetReal(_Score, _Key, C_Level_Match); }
Void AddMatch(CSmScore _Score, Text _Key, Real _ValueAdd) { Add(_Score, _Key, _ValueAdd, C_Level_Match); }
Void SubtractMatch(CSmScore _Score, Text _Key, Real _ValueSubtract) { Subtract(_Score, _Key, _ValueSubtract, C_Level_Match); }

/* Match Progression Methods */

Void Clear(CSmScore _Score, Integer _Level) {
	if(_Level <= C_Level_Match) ResetMatch(_Score);
	if(_Level <= C_Level_Map) ResetMap(_Score);
	if(_Level <= C_Level_Round) ResetRound(_Score);
}

Void Clear(CSmScore _Score) {
	Clear(_Score, C_Level_Match);
}

Void Clear(Integer _Level) {
	foreach(_Score in Scores) Clear(_Score, _Level);
}

Void Clear() {
	Clear(C_Level_Match);
}

Void AffectPlayerRoundToMapAndMatchStatistic(CSmScore _Score) {
	declare K_PlayerStatistic[Text] RoundStatistics = GetRound(_Score);
	foreach (Key => Statistic in RoundStatistics) {
		AddMap(_Score, Key, Statistic.ValueReal);
		AddMatch(_Score, Key, Statistic.ValueReal);
	}
	Clear(_Score, C_Level_Round);
}

Void AffectPlayersRoundToMapAndMatchStatistic() {
	foreach(_Score in Scores) AffectPlayerRoundToMapAndMatchStatistic(_Score);
}

Void StartMatch() {
	Clear(C_Level_Match);
}

Void EndMatch() {

}

Void StartMap() {
	Clear(C_Level_Map);
}

Void EndMap() {

}

Void StartRound() {
	Clear(C_Level_Round);
}

Void EndRound() {
	AffectPlayersRoundToMapAndMatchStatistic();
}