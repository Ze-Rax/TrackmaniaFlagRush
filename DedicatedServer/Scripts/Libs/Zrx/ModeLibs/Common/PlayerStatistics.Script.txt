/**
 *	Library to keep track of players activity in gamemodes; Inspired by Scores library
 */

#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores // Only used for aliasing reset levels

#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

#Struct K_PlayerStatistics {
	Real[Text] Reals;
	Integer[Text] Integers;
}

/* General functions for easy operation */

Void ResetPlayerStatistics(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	PlayerStatistics[_Level] = K_PlayerStatistics{};
}

K_PlayerStatistics GetPlayerStatistics(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, K_PlayerStatistics{});
}

/* Integer */

Void SetPlayerInteger(CSmScore _Score, Text _Key, Integer _Value, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	if (!PlayerStatistics.existskey(_Level)) {
		PlayerStatistics[_Level] = K_PlayerStatistics{};
	}
	PlayerStatistics[_Level].Integers[_Key] = _Value;
}

Integer[Text] GetPlayerIntegers(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, K_PlayerStatistics{}).Integers;
}

Integer GetPlayerInteger(CSmScore _Score, Text _Key, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, K_PlayerStatistics{}).Integers.get(_Key, 0);
}

Void AddPlayerInteger(CSmScore _Score, Text _Key, Integer _ValueAdd, Integer _Level) {
	declare Integer Value = GetPlayerInteger(_Score, _Key, _Level) + _ValueAdd;
	SetPlayerInteger(_Score, _Key, Value, _Level);
}

Void SubtractPlayerInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract, Integer _Level) {
	declare Integer Value = GetPlayerInteger(_Score, _Key, _Level) - _ValueSubtract;
	SetPlayerInteger(_Score, _Key, Value, _Level);
}

/* Reals */

Void SetPlayerReal(CSmScore _Score, Text _Key, Real _Value, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	if (!PlayerStatistics.existskey(_Level)) {
		PlayerStatistics[_Level] = K_PlayerStatistics{};
	}
	PlayerStatistics[_Level].Reals[_Key] = _Value;
}

Real[Text] GetPlayerReals(CSmScore _Score, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, K_PlayerStatistics{}).Reals;
}

Real GetPlayerReal(CSmScore _Score, Text _Key, Integer _Level) {
	declare K_PlayerStatistics[Integer] PlayerStatistics for _Score = [];
	return PlayerStatistics.get(_Level, K_PlayerStatistics{}).Reals.get(_Key, 0.);
}

Void AddPlayerReal(CSmScore _Score, Text _Key, Real _ValueAdd, Integer _Level) {
	declare Real Value = GetPlayerReal(_Score, _Key, _Level) + _ValueAdd;
	SetPlayerReal(_Score, _Key, Value, _Level);
}

Void SubtractPlayerReal(CSmScore _Score, Text _Key, Real _ValueSubtract, Integer _Level) {
	declare Real Value = GetPlayerReal(_Score, _Key, _Level) - _ValueSubtract;
	SetPlayerReal(_Score, _Key, Value, _Level);
}

/* Segment specific delegates */

// Round
Void ResetPlayerRoundStatistics(CSmScore _Score) { ResetPlayerStatistics(_Score, C_Level_Round); }
K_PlayerStatistics GetPlayerRoundStatistics(CSmScore _Score) { return GetPlayerStatistics(_Score, C_Level_Round); }

Void SetPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _Value) { SetPlayerInteger(_Score, _Key, _Value, C_Level_Round); }
Integer[Text] GetPlayerRoundIntegers(CSmScore _Score) { return GetPlayerIntegers(_Score, C_Level_Round); }
Integer GetPlayerRoundInteger(CSmScore _Score, Text _Key) { return GetPlayerInteger(_Score, _Key, C_Level_Round); }
Void AddPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) { AddPlayerInteger(_Score, _Key, _ValueAdd, C_Level_Round); }
Void SubtractPlayerRoundInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) { SubtractPlayerInteger(_Score, _Key, _ValueSubtract, C_Level_Round); }

Void SetPlayerRoundReal(CSmScore _Score, Text _Key, Real _Value) { SetPlayerReal(_Score, _Key, _Value, C_Level_Round); }
Real[Text] GetPlayerRoundReals(CSmScore _Score) { return GetPlayerReals(_Score, C_Level_Round); }
Real GetPlayerRoundReal(CSmScore _Score, Text _Key) { return GetPlayerReal(_Score, _Key, C_Level_Round); }
Void AddPlayerRoundReal(CSmScore _Score, Text _Key, Real _ValueAdd) { AddPlayerReal(_Score, _Key, _ValueAdd, C_Level_Round); }
Void SubtractPlayerRoundReal(CSmScore _Score, Text _Key, Real _ValueSubtract) { SubtractPlayerReal(_Score, _Key, _ValueSubtract, C_Level_Round); }

// Map
Void ResetPlayerMapStatistics(CSmScore _Score) { ResetPlayerStatistics(_Score, C_Level_Map); }
K_PlayerStatistics GetPlayerMapStatistics(CSmScore _Score) { return GetPlayerStatistics(_Score, C_Level_Map); }

Void SetPlayerMapInteger(CSmScore _Score, Text _Key, Integer _Value) { SetPlayerInteger(_Score, _Key, _Value, C_Level_Map); }
Integer[Text] GetPlayerMapIntegers(CSmScore _Score) { return GetPlayerIntegers(_Score, C_Level_Map); }
Integer GetPlayerMapInteger(CSmScore _Score, Text _Key) { return GetPlayerInteger(_Score, _Key, C_Level_Map); }
Void AddPlayerMapInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) { AddPlayerInteger(_Score, _Key, _ValueAdd, C_Level_Map); }
Void SubtractPlayerMapInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) { SubtractPlayerInteger(_Score, _Key, _ValueSubtract, C_Level_Map); }

Void SetPlayerMapReal(CSmScore _Score, Text _Key, Real _Value) { SetPlayerReal(_Score, _Key, _Value, C_Level_Map); }
Real[Text] GetPlayerMapReals(CSmScore _Score) { return GetPlayerReals(_Score, C_Level_Map); }
Real GetPlayerMapReal(CSmScore _Score, Text _Key) { return GetPlayerReal(_Score, _Key, C_Level_Map); }
Void AddPlayerMapReal(CSmScore _Score, Text _Key, Real _ValueAdd) { AddPlayerReal(_Score, _Key, _ValueAdd, C_Level_Map); }
Void SubtractPlayerMapReal(CSmScore _Score, Text _Key, Real _ValueSubtract) { SubtractPlayerReal(_Score, _Key, _ValueSubtract, C_Level_Map); }

// Match
Void ResetPlayerMatchStatistics(CSmScore _Score) { ResetPlayerStatistics(_Score, C_Level_Match); }
K_PlayerStatistics GetPlayerMatchStatistics(CSmScore _Score) { return GetPlayerStatistics(_Score, C_Level_Match); }

Void SetPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _Value) { SetPlayerInteger(_Score, _Key, _Value, C_Level_Match); }
Integer[Text] GetPlayerMatchIntegers(CSmScore _Score) { return GetPlayerIntegers(_Score, C_Level_Match); }
Integer GetPlayerMatchInteger(CSmScore _Score, Text _Key) { return GetPlayerInteger(_Score, _Key, C_Level_Match); }
Void AddPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _ValueAdd) { AddPlayerInteger(_Score, _Key, _ValueAdd, C_Level_Match); }
Void SubtractPlayerMatchInteger(CSmScore _Score, Text _Key, Integer _ValueSubtract) { SubtractPlayerInteger(_Score, _Key, _ValueSubtract, C_Level_Match); }

Void SetPlayerMatchReal(CSmScore _Score, Text _Key, Real _Value) { SetPlayerReal(_Score, _Key, _Value, C_Level_Match); }
Real[Text] GetPlayerMatchReals(CSmScore _Score) { return GetPlayerReals(_Score, C_Level_Match); }
Real GetPlayerMatchReal(CSmScore _Score, Text _Key) { return GetPlayerReal(_Score, _Key, C_Level_Match); }
Void AddPlayerMatchReal(CSmScore _Score, Text _Key, Real _ValueAdd) { AddPlayerReal(_Score, _Key, _ValueAdd, C_Level_Match); }
Void SubtractPlayerMatchReal(CSmScore _Score, Text _Key, Real _ValueSubtract) { SubtractPlayerReal(_Score, _Key, _ValueSubtract, C_Level_Match); }

/* Match Progression Methods */

Void Clear(CSmScore _Score, Integer _Level) {
	if(_Level <= C_Level_Match) ResetPlayerMatchStatistics(_Score);
	if(_Level <= C_Level_Map) ResetPlayerMapStatistics(_Score);
	if(_Level <= C_Level_Round) ResetPlayerRoundStatistics(_Score);
}

Void Clear(CSmScore _Score) {
	Clear(_Score, C_Level_Match);
}

Void Clear(Integer _Level) {
	foreach(_Score in Scores) Clear(_Score, _Level);
}

Void Clear() {
	Clear(C_Level_Match);
}

Void AffectPlayerRoundToMapAndMatchStatistic(CSmScore _Score) {
	declare Integer[Text] PlayerStatistics_Round_Integer = GetPlayerRoundIntegers(_Score);

	foreach(_Key => _Value in PlayerStatistics_Round_Integer) {
		AddPlayerMapInteger(_Score, _Key, _Value);
		AddPlayerMatchInteger(_Score, _Key, _Value);
	}

	declare Real[Text] PlayerStatistics_Round_Real = GetPlayerRoundReals(_Score);
	foreach(_Key => _Value in PlayerStatistics_Round_Real) {
		AddPlayerMapReal(_Score, _Key, _Value);
		AddPlayerMatchReal(_Score, _Key, _Value);
	}

	Clear(_Score, C_Level_Round);
}

Void AffectPlayersRoundToMapAndMatchStatistic() {
	foreach(_Score in Scores) AffectPlayerRoundToMapAndMatchStatistic(_Score);
}

Void StartMatch() {
	Clear(C_Level_Match);
}

Void EndMatch() {

}

Void StartMap() {
	Clear(C_Level_Map);
}

Void EndMap() {

}

Void StartRound() {
	Clear(C_Level_Round);
}

Void EndRound() {
	AffectPlayersRoundToMapAndMatchStatistic();
}