/**
 *	For Tracking Match Score/Points Progression throughout a multiround/-map match
 */

#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores // Only used for aliasing reset levels

#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

declare Integer[Integer] G_ClanTurnsWon;
declare Integer[Integer] G_ClanRoundsWon;
declare Integer[Integer] G_ClanMapsWon;

Void Clear(Integer Level) {
	if(Level <= C_Level_Match) G_ClanMapsWon = [];
	if(Level <= C_Level_Map) G_ClanRoundsWon = [];
	if(Level <= C_Level_Round) G_ClanTurnsWon = [];
}

/* Turns */

Integer GetClanTurnsWon(Integer Clan) {
	return G_ClanTurnsWon.get(Clan, 0);
}

Void SetClanTurnsWon(Integer Clan, Integer TurnsWon) {
	G_ClanTurnsWon[Clan] = TurnsWon;
}

Void AddClanTurnsWon(Integer Clan, Integer TurnsWonAdd) {
	SetClanTurnsWon(Clan, GetClanTurnsWon(Clan) + TurnsWonAdd);
}

/* Rounds */

Integer GetClanRoundsWon(Integer Clan) {
	return G_ClanRoundsWon.get(Clan, 0);
}

Void SetClanRoundsWon(Integer Clan, Integer RoundsWon) {
	G_ClanRoundsWon[Clan] = RoundsWon;
}

Void AddClanRoundsWon(Integer Clan, Integer RoundsWonAdd) {
	SetClanRoundsWon(Clan, GetClanRoundsWon(Clan) + RoundsWonAdd);
}

/* Maps */

Integer GetClanMapsWon(Integer Clan) {
	return G_ClanMapsWon.get(Clan, 0);
}

Void SetClanMapsWon(Integer Clan, Integer MapsWon) {
	G_ClanMapsWon[Clan] = MapsWon;
}

Void AddClanMapsWon(Integer Clan, Integer MapsWonAdd) {
	SetClanMapsWon(Clan, GetClanMapsWon(Clan) + MapsWonAdd);
}

/* Match progression */

Void StartMatch() {
	Clear(C_Level_Match);
}

Void EndMatch() {

}

Void StartMap() {
	Clear(C_Level_Map);
}

Void EndMap() {

}

Void StartRound() {
	Clear(C_Level_Round);
}

Void EndRound() {

}