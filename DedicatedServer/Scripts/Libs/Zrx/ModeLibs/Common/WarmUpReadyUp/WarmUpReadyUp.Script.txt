// #RequireContext CSmMode
/*
 * WarmUp Library with infinite time and ready up mechanic.
 *
 * Players need to ready up before the warmup end.
 * At least one player in every clan must be ready.
 * Warmup can be force stopped by calling Stop()
 *
 * When used in mode, at the place where warmup should be executed:
 *
 *	// Your code to do before warmup
 *	WarmUpReadyUp::Start();
 *	while(!WarmUpReadyUp::WarmUpShouldStop()) {
 *		MB_Yield();
 *		WarmUpReadyUp::Yield();
 *		// Your code to execute during warmup; Can contains WarmUpReadyUp::Stop()
 *	}
 *	// Your code to do after warmup
 */

#Include "TextLib" as TL

#Include "Libs/Zrx/ModeLibs/Common/WarmUpReadyUp/WarmUpReadyUp_UI.Script.txt" as WarmUpReadyUp_UI
#Include "Libs/Nadeo/ModeLibs/Legacy/Layers2.Script.txt" as Layers

#Const C_Event_Type_PlayerReadyChanged	"PlayerReadyChanged"
#Const C_Event_Type_TimeoutStart				"TimeoutStart"
#Const C_Event_Type_TimeoutUpdate				"TimeoutUpdate"
#Const C_Event_Type_TimeoutAbort				"TimeoutAbort"
#Const C_Event_Type_TimeoutEnd					"TimeoutEnd"

#Const C_Timeout_AtLeastOnePlayerReady	60000
#Const C_Timeout_AllPlayersReady				5000

#Const C_Timeout_State_NotStarted				0
#Const C_Timeout_State_OnePlayerReady		1
#Const C_Timeout_State_AllPlayersReady	2

#Struct K_WarmUpReadyUpEvent {
	Text Type;
	Text[] Params;
}

#Struct K_ClanReadyState {
	Integer NbPlayers;
	Integer NbPlayersReady;
}

#Struct K_TimeoutState {
	Integer State;
	Integer StartTime;
}

declare K_WarmUpReadyUpEvent[] PendingEvents;

declare Boolean G_WarmUpShouldStop;
declare Boolean[Text] G_PlayersReady;

declare K_TimeoutState G_TimeoutState;

/**
 * Getter for if warmup should stop.
 */
Boolean WarmUpShouldStop() {
	return G_WarmUpShouldStop;
}

/**
 * Getter for PendingEvents
 */
K_WarmUpReadyUpEvent[] GetPendingEvents() {
	return PendingEvents;
}

/**
 * Getter for PlayersReady
 */
Boolean[Text] GetPlayersReadyStates() {
	return G_PlayersReady;
}

/**
 * Adds an Event to the PendingEvents
 */
Void Private_AddEvent(Text Type, Text[] Params) {
	declare K_WarmUpReadyUpEvent Event = K_WarmUpReadyUpEvent{Type = Type, Params = Params};
	PendingEvents.add(Event);
}

/**
 * Start the timeout
 */
Void Private_StartTimeout(Integer State, Integer Timeout) {
	G_TimeoutState.State = State;
	G_TimeoutState.StartTime = Now;
	EndTime = Now + Timeout;
	Private_AddEvent(C_Event_Type_TimeoutStart, [TL::ToText(Timeout)]);
}

/**
 * Update the Timeout
 */
Void Private_UpdateTimeout(Integer State, Integer RemainingTime) {
	G_TimeoutState.State = State;
	EndTime = Now + RemainingTime;
	Private_AddEvent(C_Event_Type_TimeoutUpdate, [TL::ToText(RemainingTime)]);
}

/**
 * Abort the timeout
 */
Void Private_AbortTimeout() {
	G_TimeoutState.State = C_Timeout_State_NotStarted;
	G_TimeoutState.StartTime = -1;
	EndTime = -1;
	Private_AddEvent(C_Event_Type_TimeoutAbort, []);
}

/**
 * Checks the conditions to update the timeout end time accordingly:
 *
 * If the timeout was not started yet but all players or at least one player is ready,
 * 	then start it.
 * If the timeout was started when at least one player in each clan was ready but now all players are ready,
 * 	then reduce timer.
 * If the itmeout was started when all players where ready but now only one player in each team is ready,
 * 	then extend the timer to the remaining time.
 * If the timeout was start but now not every clan has a player,
 * 	then abort the timeout.
 *
 * This was pain! Please fix this if someone know an easier solution!
 */
Void Private_UpdateWarmUpEndTime(Boolean AllClansAtLeastOnePlayerReady, Boolean AllClansAllPlayersReady) {
	if (AllClansAllPlayersReady) {
		if (G_TimeoutState.State == C_Timeout_State_NotStarted) {
			Private_StartTimeout(C_Timeout_State_AllPlayersReady, C_Timeout_AllPlayersReady);
		} else if (G_TimeoutState.State == C_Timeout_State_OnePlayerReady) {
			Private_UpdateTimeout(C_Timeout_State_AllPlayersReady, C_Timeout_AllPlayersReady);
		}
	} else if (AllClansAtLeastOnePlayerReady) {
		if (G_TimeoutState.State == C_Timeout_State_NotStarted) {
			Private_StartTimeout(C_Timeout_State_OnePlayerReady, C_Timeout_AtLeastOnePlayerReady);
		} else if (G_TimeoutState.State == C_Timeout_State_AllPlayersReady) {
			Private_UpdateTimeout(C_Timeout_State_OnePlayerReady, C_Timeout_AtLeastOnePlayerReady - (Now - G_TimeoutState.StartTime));
		}
	} else {
		if (G_TimeoutState.State != C_Timeout_State_NotStarted) {
			Private_AbortTimeout();
		}
	}
}

/**
 * Checks if the match can start: At least two clans and one ready player in each clan.
 */
Boolean Private_MatchCanStart() {
	// Check players and clans
	declare K_ClanReadyState[Integer] ClanReadyStates;
	foreach (Player in Players) {
		if ((UseClans || UseMultiClans) && Player.CurrentClan == 0) continue;
		declare K_ClanReadyState PlayerClanReadyState = ClanReadyStates.get(Player.CurrentClan, K_ClanReadyState{});
		PlayerClanReadyState.NbPlayers += 1;
		if(G_PlayersReady.get(Player.User.Login, False)) {
			PlayerClanReadyState.NbPlayersReady += 1;
		}
		ClanReadyStates[Player.CurrentClan] = PlayerClanReadyState;
	}

	// There have to be at least two clans
	if ((UseClans || UseMultiClans) && ClanReadyStates.count < 2) {
		if(G_TimeoutState.State != C_Timeout_State_NotStarted) {
			Private_AbortTimeout();
		}
		return False;
	}

	// Check if all or at least one players are ready in all clans
	declare Boolean AllClansAtLeastOnePlayerReady = True;
	declare Boolean AllClansAllPlayersReady = True;
	foreach (Clan => ReadyState in ClanReadyStates) {
		AllClansAtLeastOnePlayerReady = AllClansAtLeastOnePlayerReady && (ReadyState.NbPlayersReady >= 1);
		AllClansAllPlayersReady = AllClansAllPlayersReady && (ReadyState.NbPlayersReady == ReadyState.NbPlayers) && AllClansAtLeastOnePlayerReady;
	}

	// Update Warmup EndTime
	Private_UpdateWarmUpEndTime(AllClansAtLeastOnePlayerReady, AllClansAllPlayersReady);

	// Check if the timeout ended
	declare TimeoutEnded = G_TimeoutState.State != C_Timeout_State_NotStarted && Now > EndTime;
	if(TimeoutEnded) {
		Private_AddEvent(C_Event_Type_TimeoutEnd, []);
	}
	return TimeoutEnded;
}

/**
 * Send the ready states of the players to the clients.
 * This should already be called automatically when a player changes his state.
 */
 Void Net_SendPlayerReadyStates() {
	declare netwrite Boolean[Text] Net_WarmUpReadyUp_ReadyStates for Teams[0];
	Net_WarmUpReadyUp_ReadyStates = G_PlayersReady;
}

/**
 * Starts the warmup.
 */
Void Start() {
	G_WarmUpShouldStop = False;
	PendingEvents = [];
	G_PlayersReady = [];
	G_TimeoutState = K_TimeoutState{};
	Net_SendPlayerReadyStates();

	Layers::Create(WarmUpReadyUp_UI::C_ManialinkName, WarmUpReadyUp_UI::GetManialink());
	Layers::SetType(WarmUpReadyUp_UI::C_ManialinkName, CUILayer::EUILayerType::Normal);
	Layers::Attach(WarmUpReadyUp_UI::C_ManialinkName);
	UIManager.UIAll.SendChat("""$<$f90Warmup!$> Ready up by clicking the "Ready"-Button or pressing F7 / î¦¶""");
}

/**
 * Stops the warmup
 */
Void Stop() {
	G_WarmUpShouldStop = True;
	PendingEvents = [];
	Layers::Destroy(WarmUpReadyUp_UI::C_ManialinkName);
}

/**
 * Checks for XmlRpc events that would stop the warmup.
 */
Void Private_HandleXmlRpcEvents() {
	foreach (XmlRpcEvent in XmlRpc.PendingEvents) {
		switch (XmlRpcEvent.Type) {
			case CXmlRpcEvent::EType::CallbackArray: {
				switch (XmlRpcEvent.ParamArray1) {
					case "Trackmania.ForceEndRound": {
						Stop();
					}
					case "Trackmania.WarmUp.ForceStopRound": {
						Stop();
					}
					case "Trackmania.WarmUp.ForceStop": {
						Stop();
					}
				}
			}
		}
	}
}

/**
 * Handle UI Events coming from the warmup interface
 */
Void Private_HandleUIEvents() {
	foreach (Event in UIManager.PendingEvents) {
		if(Event.CustomEventType == WarmUpReadyUp_UI::C_ReadyEvent_Type) {
			declare Boolean PlayerIsReady = Event.CustomEventData[0] == "True";
			declare CSmPlayer Player = GetPlayer(Event.UI);
			if(Player == Null) continue;
			G_PlayersReady[Player.User.Login] = PlayerIsReady;
			Private_AddEvent(C_Event_Type_PlayerReadyChanged, [Player.User.Login, TL::ToText(PlayerIsReady)]);
			Net_SendPlayerReadyStates();
		}
	}
}

/**
 * Does everything necessary during a frame of the script. Does not yield the mode!
 */
Void Yield() {
	PendingEvents = [];

	Private_HandleXmlRpcEvents();
	Private_HandleUIEvents();

	if (Private_MatchCanStart() || MatchEndRequested) {
		Stop();
	}
}