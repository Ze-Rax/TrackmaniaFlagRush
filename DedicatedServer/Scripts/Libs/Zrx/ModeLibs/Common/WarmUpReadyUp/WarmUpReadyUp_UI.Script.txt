// #RequireContext CSmMlScriptIngame

#Const C_ReadyEvent_Type	"ready"
#Const C_ManialinkName		"WarmUpReadyUp"

Text GetManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="{{{C_ManialinkName}}}">
		<frame id="player-ready-frame" pos="0 65	">
			<quad pos="0 0" z-index="0" size="40 10" style="UICommon64_1" substyle="BgFrame1" halign="center" valign="center" colorize="000" opacity="0.75"/>
			<quad pos="20 0" z-index="1" size="10 10" id="button-ready-background" style="UICommon64_1" substyle="BgFrame1" halign="right" valign="center" colorize="f44"/>
			<label pos="15 0.5" z-index="2" size="10 10" id="button-ready-icon" text="" halign="center" valign="center" style="Default" textfont="GameFontBlack" textsize="4"/>
			<quad pos="-2.11 0" z-index="3" size="44.2 10" id="button-ready-activator" style="UICommon64_1" substyle="BgFrame1" halign="center" valign="center" opacity="0" scriptevents="1"/>
			<label pos="-5 -0.5" z-index="5" size="30 10" text="Ready" halign="center" textsize="4" style="Default" textfont="GameFontSemiBold" valign="center2"/>
		</frame>
<script><!--
		#Include "TextLib" as TL
		#Include "MathLib" as ML
		#Include "ColorLib" as CL

		#Const C_Color_Ready <0.1, 0.7, 0.1>
		#Const C_Color_NotReady <0.9, 0.1, 0.1>

		declare Boolean Ready;

		Vec3 TransformColor(Vec3 _BaseColor, Vec3 _Transformation) {
			declare NewColor = _BaseColor;
			NewColor = CL::RgbToHsv(NewColor);
			NewColor.X = NewColor.X + _Transformation.X;
			if (NewColor.X < 0.) NewColor.X += 1.;
			if (NewColor.X > 1.) NewColor.X -= 1.;
			NewColor.Y = ML::Clamp(NewColor.Y + _Transformation.Y, 0., 1.);
			NewColor.Z = ML::Clamp(NewColor.Z + _Transformation.Z, 0., 1.);

			return CL::HsvToRgb(NewColor);
		}

		Vec3 GetFocusColor(Vec3 _Color) {
			return TransformColor(_Color, <-.0194, 0., -.37>);
		}

		Void SetReady(Boolean IsReady) {
			if(Ready != IsReady) {
				Ready = IsReady;
				SendCustomEvent("{{{C_ReadyEvent_Type}}}", [TL::ToText(Ready)]);
			}
		}

		main() {

			declare CMlFrame FrameReady = (Page.GetFirstChild("player-ready-frame") as CMlFrame);
			declare CMlQuad ButtonReadyBackground = (Page.GetFirstChild("button-ready-background") as CMlQuad);
			declare CMlLabel ButtonReadyIcon = (Page.GetFirstChild("button-ready-icon") as CMlLabel);
			declare CMlQuad ButtonReadyActivator = (Page.GetFirstChild("button-ready-activator") as CMlQuad);
			declare Boolean ButtonHoverState = False;

			declare LastRequestsSpectateState = False;
			SetReady(False);
			ButtonReadyBackground.Colorize = C_Color_NotReady;

			while(True) {
				yield;
				// InputPlayer is not available right at server join
				if(InputPlayer != Null) {
					// Reset Ready if player switched from spectator to player or other way round
					if (InputPlayer.RequestsSpectate != LastRequestsSpectateState) {
						LastRequestsSpectateState = InputPlayer.RequestsSpectate;
						SetReady(False);
					}

					// Hide the ready button when player is in spectator
					FrameReady.Visible = !InputPlayer.RequestsSpectate;
				}

				// Update the ready button
				if(Ready) {
					ButtonReadyIcon.Value = "";
						if(ButtonHoverState) {
							ButtonReadyBackground.Colorize = GetFocusColor(C_Color_Ready);
						} else {
							ButtonReadyBackground.Colorize = C_Color_Ready;
						}
				} else {
					ButtonReadyIcon.Value = "";
					if(ButtonHoverState) {
						ButtonReadyBackground.Colorize = GetFocusColor(C_Color_NotReady);
					} else {
						ButtonReadyBackground.Colorize = C_Color_NotReady;
					}
				}

				foreach(InputEvent in Input.PendingEvents) {
					if(InputEvent.Pad != Null && InputEvent.Pad.ButtonEvents.exists(CInputPad::EButton::RightStick)) {
						SetReady(!Ready);
					}
				}

				// Check if ready button is hovered or clicked
				foreach(Event in PendingEvents) {
					switch (Event.Type) {
						case CMlScriptEvent::Type::KeyPress: {
							if (Event.KeyName == "F7") {
								SetReady(!Ready);
							}
						}
						case CMlScriptEvent::Type::MouseClick: {
							switch (Event.Control) {
								case ButtonReadyActivator: {
									SetReady(!Ready);
								}
							}
						}
						case CMlScriptEvent::Type::MouseOver: {
							switch (Event.Control) {
								case ButtonReadyActivator: {
									ButtonHoverState = True;
								}
							}
						}
						case CMlScriptEvent::Type::MouseOut: {
							switch (Event.Control) {
								case ButtonReadyActivator: {
									ButtonHoverState = False;
								}
							}
						}
					}
				}
			}
		}
		--></script>
	</manialink>
	""";
}