#Include "MathLib" as ML

#Struct K_FlagPass {
	CUser OldCarrier;
	CUser NewCarrier;
	Integer Date;
}

#Struct K_Net_FlagHolder {
	Integer Clan;
	Text Name;
	Text Login;
}

#Struct K_Net_FlagState {
	K_Net_FlagHolder Holder;
	Vec3 Position;
	Integer CurrentStateStartDate;
	Integer CurrentStateEndDate;
}

#Struct K_FlagState {
	CMapLandmark Landmark;
	CUser Carrier;
	Vec3 Position;
	Vec3 PrevPosition;
	Vec3 LastSafePosition;
	Integer LastDropDate;
	Integer CurrentStateEndDate;
	K_FlagPass LastFlagPass;
}

#Const C_TeleportThreshold 32 // One block
#Const C_FlagCarrierName_Dropped 	"Dropped"
#Const C_FlagCarrierName_Spawn		"Spawn"
#Const C_DropVerticalOffset 0.5


declare K_FlagState G_FlagState;

/**
 * Gets the current flag carrier CSmPlayer.
 * Null player not found.
 */
CSmPlayer GetFlagCarrierPlayer() {
	if(G_FlagState.Carrier == Null) return Null;
	return GetPlayer(G_FlagState.Carrier.Login);
}

/**
 * Gets the current flag state.
 */
K_FlagState Get() {
	return G_FlagState;
}

/**
 * Send data about the flag carrier, i.e. name and clan to the UIs via netwrite
 */
 Void Private_Net_SendFlagState() {
	declare netwrite K_Net_FlagState FlagRush_Net_FlagState for Teams[0];
	FlagRush_Net_FlagState.Holder = K_Net_FlagHolder{};

	declare CSmPlayer FlagCarrierPlayer = GetFlagCarrierPlayer();
	if (FlagCarrierPlayer != Null) {
		FlagRush_Net_FlagState.Holder.Clan = FlagCarrierPlayer.CurrentClan;
		FlagRush_Net_FlagState.Holder.Name = FlagCarrierPlayer.User.Name;
		FlagRush_Net_FlagState.Holder.Login = FlagCarrierPlayer.User.Login;
	} else {
		FlagRush_Net_FlagState.Holder.Clan = 0; // Not carried => Neutral

		if (G_FlagState.Landmark  != Null) {
			FlagRush_Net_FlagState.Holder.Name = C_FlagCarrierName_Spawn;
		} else {
			FlagRush_Net_FlagState.Holder.Name = C_FlagCarrierName_Dropped;
		}
	}

	FlagRush_Net_FlagState.Position = G_FlagState.Position;
	FlagRush_Net_FlagState.CurrentStateStartDate = Now; // Only send when state changes?
	FlagRush_Net_FlagState.CurrentStateEndDate = G_FlagState.CurrentStateEndDate;
}

/**
 * Sets the flag state to be at a landmark.
 * Also updates the position, the marker and unsets the carrier
 */
Void SetAtLandmark(CMapLandmark Landmark, Integer CurrentStateEndDate) {
	G_FlagState.Landmark = Landmark;
	G_FlagState.Position = Landmark.Position;
	G_FlagState.Carrier = Null;
	G_FlagState.CurrentStateEndDate = CurrentStateEndDate;
	Private_Net_SendFlagState();
}


Void SetAtLandmark(CMapLandmark Landmark) {
	SetAtLandmark(Landmark, -1);
}

/**
 * Sets the flag state to be at a player.
 * Also updates the position, the marker and unsets the landmark.
 */
Void SetAtCarrier(CSmPlayer Carrier, Integer CurrentStateEndDate) {
	G_FlagState.Carrier = Carrier.User;
	G_FlagState.Landmark = Null;
	G_FlagState.Position = Carrier.Position;
	G_FlagState.CurrentStateEndDate = CurrentStateEndDate;
	Private_Net_SendFlagState();
}

Void SetAtCarrier(CSmPlayer Carrier) {
	SetAtCarrier(Carrier, -1);
}

/**
 * Sets the flag state to be at a position.
 * Also updates the marker and unsets the landmark and the carrier.
 */
Void SetAtPosition(Vec3 Position, Integer CurrentStateEndDate) {
	 G_FlagState.Position = Position;
	 G_FlagState.Carrier = Null;
	 G_FlagState.Landmark = Null;
	 G_FlagState.CurrentStateEndDate = CurrentStateEndDate;
	 Private_Net_SendFlagState();
	}


Void SetAtPosition(Vec3 Position) {
	SetAtPosition(Position, -1);
}

Void DropFlag(Vec3 Position, Integer CurrentStateEndDate) {
	assert(G_FlagState.Carrier != Null, "Cannot drop a flag that is not being carried by anyone");
	G_FlagState.LastDropDate = Now;
	SetAtPosition(Position + <0., C_DropVerticalOffset, 0.>, CurrentStateEndDate);
}

/**
 * Set the new flag carrier and also tracks the last pass
 */
Void PassFlag(CSmPlayer NewCarrier, Integer CurrentStateEndDate) {
	assert(G_FlagState.Carrier != Null, "Cannot pass a flag that is not being carried by anyone");
	assert(NewCarrier != GetFlagCarrierPlayer(), "Cannot pass the flag between same player");
	G_FlagState.LastFlagPass = K_FlagPass{OldCarrier = G_FlagState.Carrier, NewCarrier = NewCarrier.User, Date = Now};
	SetAtCarrier(NewCarrier, CurrentStateEndDate);
}

Boolean IsDropped() {
	return G_FlagState.Carrier == Null && G_FlagState.Landmark == Null;
}

Boolean CarrierDisconnected() {
	declare CSmPlayer CarrierPlayer = GetFlagCarrierPlayer();
	return G_FlagState.Carrier != Null && CarrierPlayer == Null;
}

Boolean CarrierTeleported() {
	return G_FlagState.Carrier != Null && ML::Distance(G_FlagState.PrevPosition, G_FlagState.Position) > C_TeleportThreshold;
}

Void Yield() {
	declare CSmPlayer CarrierPlayer = GetFlagCarrierPlayer();
	if (CarrierPlayer != Null) {
		G_FlagState.PrevPosition = G_FlagState.Position;
		G_FlagState.Position = CarrierPlayer.Position;
		if (CarrierPlayer.WheelsContactCount >= 3) G_FlagState.LastSafePosition = CarrierPlayer.Position;
	}
}

Void Unload() {
	G_FlagState = K_FlagState{};
	Private_Net_SendFlagState();
}

Void Load() {
	Unload();
}