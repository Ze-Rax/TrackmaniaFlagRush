#Include "MathLib" as ML


#Struct K_FlagPass {
	CUser OldCarrier;
	CUser NewCarrier;
	Integer Date;
}

#Struct K_FlagState {
	CMapLandmark Landmark;
	CUser Carrier;
	Vec3 Position;
	Vec3 PrevPosition;
	Vec3 LastSafePosition;
	Integer LastDropDate;
	Integer PickupableDate;
	K_FlagPass LastFlagPass;
}

#Const C_TeleportThreshold 5 //min value 2.78

declare K_FlagState G_FlagState;

/**
 * Gets the current flag carrier CSmPlayer.
 * Null player not found.
 */
CSmPlayer GetFlagCarrierPlayer() {
	if(G_FlagState.Carrier == Null) return Null;
	return GetPlayer(G_FlagState.Carrier.Login);
}

/**
 * Gets the current flag state.
 */
K_FlagState Get() {
	return G_FlagState;
}

/**
 * Sets the flag state to be at a landmark.
 * Also updates the position, the marker and unsets the carrier
 */
Void SetAtLandmark(CMapLandmark Landmark) {
	G_FlagState.Landmark = Landmark;
	G_FlagState.Position = Landmark.Position;
	G_FlagState.Carrier = Null;
}

/**
 * Sets the flag state to be at a player.
 * Also updates the position, the marker and unsets the landmark.
 */
Void SetAtCarrier(CSmPlayer Carrier) {
	G_FlagState.Carrier = Carrier.User;
	G_FlagState.Landmark = Null;
	G_FlagState.Position = Carrier.Position;
}

/**
 * Sets the flag state to be at the player of a user.
 * Will do nothing if player was not found.
 * Also updates the position, the marker and unsets the landmark.
 */
Void SetAtCarrier(CUser Carrier) {
	declare CSmPlayer CarrierPlayer = GetPlayer(Carrier.Login);
	if(CarrierPlayer != Null) {
		SetAtCarrier(CarrierPlayer);
	}
}

/**
 * Sets the flag state to be at a position.
 * Also updates the marker and unsets the landmark and the carrier.
 */
Void SetAtPosition(Vec3 Position) {
	G_FlagState.Position = Position;
	G_FlagState.Carrier = Null;
	G_FlagState.Landmark = Null;
}

/**
 * Sets the pickupable date of the flag and sets the respective net variables.
 */
Void SetPickupableDate(Integer Date) {
	G_FlagState.PickupableDate = Date;

	/* Gauge timing */
	declare FlooredGaugeDuration = Date - Now;
	if (FlooredGaugeDuration < 0) FlooredGaugeDuration = 0;
	declare netwrite Integer Net_FlagRush_FlagGaugeStartDate for Teams[0];
	Net_FlagRush_FlagGaugeStartDate = Now;
	declare netwrite Integer Net_FlagRush_FlagGaugeDuration for Teams[0];
	Net_FlagRush_FlagGaugeDuration = FlooredGaugeDuration;
}

/**
 * Sets the last drop date of the flag.
 */
Void SetLastDropDate(Integer Date) {
	G_FlagState.LastDropDate = Date;
}

/**
 * Set the new flag carrier and also tracks the last pass
 */
Void PassFlag(CSmPlayer NewCarrier) {
	assert(NewCarrier != GetFlagCarrierPlayer(), "Cannot pass the flag between same player");
	G_FlagState.LastFlagPass = K_FlagPass{OldCarrier = G_FlagState.Carrier, NewCarrier = NewCarrier.User, Date = Now};
	SetAtCarrier(NewCarrier);
}

/**
 * Updates the position of the flag when carried by a player.
 */
Void UpdatePosition() {
	declare CSmPlayer CarrierPlayer = GetFlagCarrierPlayer();
	if (CarrierPlayer != Null) {
		G_FlagState.PrevPosition = G_FlagState.Position;
		G_FlagState.Position = CarrierPlayer.Position;
		if (CarrierPlayer.WheelsContactCount >= 3) G_FlagState.LastSafePosition = CarrierPlayer.Position;
	}
}

Boolean IsDropped() {
	return G_FlagState.Carrier == Null && G_FlagState.Landmark == Null;
}

Boolean CheckDisconnect() {
	declare CSmPlayer CarrierPlayer = GetFlagCarrierPlayer();
	return G_FlagState.Carrier != Null && CarrierPlayer == Null;
}

Boolean CheckLag() {
	return G_FlagState.Carrier != Null && ML::Distance(G_FlagState.PrevPosition,G_FlagState.Position) > C_TeleportThreshold;
}