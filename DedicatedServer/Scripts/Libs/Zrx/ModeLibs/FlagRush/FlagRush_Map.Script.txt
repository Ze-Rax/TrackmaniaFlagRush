#Include "MathLib" as ML
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt" as FlagRush_Common

#Const C_LandmarkTag_SpawnTeam1				"SpawnTeam1"
#Const C_LandmarkTag_SpawnTeam2				"SpawnTeam2"
#Const C_LandmarkTag_BaseTeam1				"BaseTeam1"
#Const C_LandmarkTag_BaseTeam2				"BaseTeam2"
#Const C_LandmarkTag_FlagSpawn				"FlagSpawn"
#Const C_LandmarkTag_DefaultFlagSpawn	"DefaultFlagSpawn"
#Const C_LandmarkTag_DeathTrigger			"FlagResetTrigger"

declare CMapLandmark						G_DefaultFlagSpawn;
declare CMapLandmark[]					G_FlagSpawns;
declare CMapLandmark[Integer]		G_Spawns;
declare CMapLandmark[][Integer]	G_Bases;

/**
 * Gets the default flag spawn.
 */
CMapLandmark GetDefaultFlagSpawn() {
	return G_DefaultFlagSpawn;
}

/**
 * Gets all flagspawns.
 */
CMapLandmark[] GetFlagSpawns() {
	return G_FlagSpawns;
}

/**
 * Gets the spawn for a specific clan.
 */
CMapLandmark GetSpawn(Integer Clan) {
	return G_Spawns.get(Clan, Null);
}

/**
 * Gets the spawn for a specific player.
 */
CMapLandmark GetSpawn(CSmPlayer Player) {
	return G_Spawns.get(Player.CurrentClan, Null);
}

/**
 * Gets the bases for a specific clan.
 */
CMapLandmark[] GetBases(Integer Clan) {
	return G_Bases.get(Clan, []);
}

/**
 * Chooses a random flag spawn.
 */
CMapLandmark GetRandomFlagSpawn() {
	declare Integer RandomIndex = ML::Rand(0, G_FlagSpawns.count - 1, Now);
	return G_FlagSpawns[RandomIndex];
}

/**
 * Checks whether a landmark is a flag reset trigger.
 */
Boolean IsDeathTrigger(CMapLandmark Landmark) {
	return Landmark.Tag == C_LandmarkTag_DeathTrigger;
}

/**
 * Looks through all the landmarks on the map and assigns them to the corresponding variables.
 */
Void InitLandmarks() {
	FlagRush_Common::Log("Initialising Landmarks...");
	G_DefaultFlagSpawn = Null;
	G_FlagSpawns.clear();
	G_Bases = [1 => [], 2 => []];
	G_Spawns.clear();

	foreach (Landmark in MapLandmarks) {
		switch (Landmark.Tag) {
			case C_LandmarkTag_SpawnTeam1: if (Landmark.PlayerSpawn != Null) G_Spawns[1] = Landmark;
			case C_LandmarkTag_SpawnTeam2: if (Landmark.PlayerSpawn != Null) G_Spawns[2] = Landmark;
			case C_LandmarkTag_BaseTeam1: if (Landmark.Waypoint != Null) G_Bases[1].add(Landmark);
			case C_LandmarkTag_BaseTeam2: if (Landmark.Waypoint != Null) G_Bases[2].add(Landmark);
			case C_LandmarkTag_FlagSpawn: if (Landmark.Waypoint != Null) G_FlagSpawns.add(Landmark);
			case C_LandmarkTag_DefaultFlagSpawn: if (Landmark.Waypoint != Null) {
				G_FlagSpawns.add(Landmark);
				G_DefaultFlagSpawn = Landmark;
			}
		}
	}

	declare FoundSpawnTeam1 = G_Spawns[1] != Null;
	declare FoundSpawnTeam2 = G_Spawns[2] != Null;
	declare FoundBaseTeam1 = G_Bases[1].count > 0;
	declare FoundBaseTeam2 = G_Bases[2].count > 0;
	declare FoundFlagSpawn = G_FlagSpawns.count > 0;
	declare FoundDefaultFlagSpawn = G_DefaultFlagSpawn != Null;
	declare SameAmountBases = G_Bases[1].count == G_Bases[2].count;

	declare Valid = FoundSpawnTeam1 && FoundSpawnTeam2 && FoundBaseTeam1 && FoundBaseTeam2 && FoundFlagSpawn && FoundDefaultFlagSpawn && SameAmountBases;

	assert(Valid,
		"""Couldn't init all landmarks!
		{{{"\t"}}}{{{C_LandmarkTag_SpawnTeam1}}}: {{{FoundSpawnTeam1}}}
		{{{"\t"}}}{{{C_LandmarkTag_SpawnTeam2}}}: {{{FoundSpawnTeam2}}}
		{{{"\t"}}}{{{C_LandmarkTag_BaseTeam1}}} : {{{FoundBaseTeam1}}}
		{{{"\t"}}}{{{C_LandmarkTag_BaseTeam2}}} : {{{FoundBaseTeam2}}}
		{{{"\t"}}}{{{C_LandmarkTag_FlagSpawn}}} : {{{FoundFlagSpawn}}}
		{{{"\t"}}}{{{C_LandmarkTag_DefaultFlagSpawn}}} : {{{FoundDefaultFlagSpawn}}}
		{{{"\t"}}}Same amount of bases per team: {{{SameAmountBases}}}"""
	);

	FlagRush_Common::Log("All Landmarks found!");
}