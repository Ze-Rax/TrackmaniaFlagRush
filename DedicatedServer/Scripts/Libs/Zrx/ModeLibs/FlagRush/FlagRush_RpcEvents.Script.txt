// #RequireContext CSmMode

#Include "TextLib" as TL

#Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2.Script.txt"							 	as XmlRpc
#Include "Libs/Zrx/ModeLibs/Common/TeamPointsProgression.Script.txt" 		as TeamPointsProgression
#Include "Libs/Nadeo/TMxSM/Race/Scores.Script.txt"											as Scores
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"				as FlagRush_Common
#Include "Libs/Zrx/ModeLibs/Common/PlayerTelemetry.Script.txt" 					as Telemetry
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_FlagState.Script.txt"			as FlagState

// XMLRPC events
#Const		C_XMLRPC_FlagPass																"FlagRush.Flag.Pass"
#Const		C_XMLRPC_FlagDrop																"FlagRush.Flag.Drop"
#Const		C_XMLRPC_FlagReset															"FlagRush.Flag.Reset"
#Const 		C_XMLRPC_FlagPickup															"FlagRush.Flag.Pickup"
#Const		C_XMLRPC_FlagScored															"FlagRush.Flag.Scored"

#Const		C_XMLRPC_PlayerDeath														"FlagRush.PlayerDeath"

#Const		C_XMLRPC_MatchStart															"FlagRush.Flow.MatchStart"
#Const		C_XMLRPC_MatchEnd																"FlagRush.Flow.MatchEnd"
#Const		C_XMLRPC_MapStart																"FlagRush.Flow.MapStart"
#Const		C_XMLRPC_MapEnd																	"FlagRush.Flow.MapEnd"
#Const		C_XMLRPC_RoundStart															"FlagRush.Flow.RoundStart"
#Const		C_XMLRPC_RoundEnd																"FlagRush.Flow.RoundEnd"
#Const		C_XMLRPC_Overtime																"FlagRush.Flow.Overtime"
#Const 		C_XMLRPC_WarmUpStart 														"FlagRush.Flow.WarmUpStart"
#Const 		C_XMLRPC_WarmUpEnd 															"FlagRush.Flow.WarmUpEnd"

/////////////
// Structs //
/////////////

/* Components */

#Struct K_Rpc_Team {
	Integer Num;
	Text Name;
}

#Struct K_Rpc_Player {
	Text Login;
	Text Name;
	K_Rpc_Team Team;
	Vec3 Position;
}

#Struct K_Rpc_FlagSpawn {
	Integer LandmarkId;
	Vec3 Position;
}

#Struct K_Rpc_Flag {
	Vec3 Position;
	K_Rpc_Player Carrier;
	K_Rpc_FlagSpawn Spawn;
}

#Struct K_Rpc_TeamScore {
	K_Rpc_Team Team;
	Integer MatchPoints;
	Integer MapPoints;
	Integer RoundPoints;
}

#Struct K_Rpc_PlayerScore {
	K_Rpc_Player Player;
	Integer RoundPoints;
	Integer MapPoints;
	Integer MatchPoints;
	Integer FlagsScoredRound;
	Integer FlagsScoredMap;
	Integer FlagsScoredMatch;
	Integer FlagsStolenRound;
	Integer FlagsStolenMap;
	Integer FlagsStolenMatch;
	Integer AssistsRound;
	Integer AssistsMap;
	Integer AssistsMatch;
}

#Struct K_Rpc_Map {
	Text Name;
	Text Uid;
	Text AuthorLogin;
	Text AuthorName;
}

/* Events */

#Struct K_Rpc_FlagPass {
	Integer Time;
	K_Rpc_Player OldCarrier;
	K_Rpc_Flag Flag;
}

#Struct K_Rpc_FlagDrop {
	Integer Time;
	K_Rpc_Player OldCarrier;
	K_Rpc_Flag Flag;
}

#Struct K_Rpc_FlagReset {
	Integer Time;
	K_Rpc_Flag Flag;
}

#Struct K_Rpc_FlagPickup {
	Integer Time;
	K_Rpc_Flag Flag;
}

#Struct K_Rpc_FlagScored {
	Integer Time;
	K_Rpc_Player Scorer;
	K_Rpc_Player Assist;
	K_Rpc_TeamScore[] TeamScores;
}

#Struct K_Rpc_PlayerDeath {
	Integer Time;
	K_Rpc_Player Player;
}

#Struct K_Rpc_Flow {
	Integer Time;
	K_Rpc_Map Map;
	Boolean Valid;
}

#Struct K_Rpc_FlowScores {
	Integer Time;
	K_Rpc_Map Map;
	Boolean Valid;
	K_Rpc_PlayerScore[] PlayerScores;
	K_Rpc_TeamScore[] TeamScores;
}

///////////////
// Functions //
///////////////

Void RegisterCallbacks() {
	XmlRpc::RegisterCallback(C_XMLRPC_FlagReset, "Called when flag is reset");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagPickup, "Called when a player picks up the flag");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagDrop, 	"Called when flag is dropped");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagPass, "Called when flag is passed or stolen");
	XmlRpc::RegisterCallback(C_XMLRPC_FlagScored, "Called when flag is scored");

	XmlRpc::RegisterCallback(C_XMLRPC_PlayerDeath, "Called when player gets out of bounds");

	XmlRpc::RegisterCallback(C_XMLRPC_MatchStart, "Called when a match starts");
	XmlRpc::RegisterCallback(C_XMLRPC_MatchEnd, "Called when a match ends");
	XmlRpc::RegisterCallback(C_XMLRPC_MapStart, "Called when a map starts");
	XmlRpc::RegisterCallback(C_XMLRPC_MapEnd, "Called when a map ends");
	XmlRpc::RegisterCallback(C_XMLRPC_RoundStart, "Called when a round starts");
	XmlRpc::RegisterCallback(C_XMLRPC_RoundEnd, "Called when a round ends");
	XmlRpc::RegisterCallback(C_XMLRPC_WarmUpStart, "Called when warmup starts");
	XmlRpc::RegisterCallback(C_XMLRPC_WarmUpEnd, "Called when warmup ends");
	XmlRpc::RegisterCallback(C_XMLRPC_Overtime, "Called when overtime starts");
}

/* Helpers */

CSmScore GetScore(Text Login) {
	foreach(Score in Scores) {
		if(Score.User.Login == Login) return Score;
	}
	return Null;
}

/* Transformation function */

K_Rpc_Team TeamToRpcTeam(CTeam Team) {
	return K_Rpc_Team {
		Num = Teams.keyof(Team) + 1,
		Name = Team.Name
	};
}

K_Rpc_Player PlayerToRpcPlayer(CSmPlayer Player) {
	declare K_Rpc_Team Team;
	if(Player.CurrentClan > 0) {
		Team = TeamToRpcTeam(Teams[Player.CurrentClan - 1]);
	}

	return K_Rpc_Player{
		Login = Player.User.Login,
		Name = Player.User.Name,
		Team = Team,
		Position = Player.Position
	};
}

K_Rpc_Player ScoreToRpcPlayer(CSmScore Score) {
	declare CSmPlayer Player <=> GetPlayer(Score.User.Login);
	if(Player != Null) {
		return PlayerToRpcPlayer(Player);
	}

	declare K_Rpc_Team Team;
	if(Score.TeamNum > 0) {
		Team = TeamToRpcTeam(Teams[Score.TeamNum - 1]);
	}

	return K_Rpc_Player{
		Login = Score.User.Login,
		Name = Score.User.Login,
		Team = Team
	};
}

K_Rpc_Player UserToRpcPlayer(CUser User) {
	declare CSmPlayer Player <=> GetPlayer(User.Login);
	if(Player != Null) {
		return PlayerToRpcPlayer(Player);
	}

	declare CSmScore Score <=> GetScore(User.Login);
	if(Score != Null) {
		return ScoreToRpcPlayer(Score);
	}

	return K_Rpc_Player{
		Login = User.Login,
		Name = User.Name
	};
}

K_Rpc_FlagSpawn LandmarkToRpcFlagSpawn(CMapLandmark Landmark) {
	return K_Rpc_FlagSpawn {
		LandmarkId = TL::ToInteger(TL::Replace("" ^ Landmark.Id, "#", "")),
		Position = Landmark.Position
	};
}

K_Rpc_Flag FlagStateToRpcFlag(FlagState::K_FlagState FlagState) {
	declare K_Rpc_Player Carrier;
	if(FlagState.Carrier != Null) {
		Carrier = UserToRpcPlayer(FlagState.Carrier);
	}

	declare K_Rpc_FlagSpawn FlagSpawn;
	if(FlagState.Landmark != Null) {
		FlagSpawn = LandmarkToRpcFlagSpawn(FlagState.Landmark);
	}

	return K_Rpc_Flag {
		Position = FlagState.Position,
		Carrier = Carrier,
		Spawn = FlagSpawn
	};
}

K_Rpc_Flag CurrentFlagStateToRpcFlag() {
	return FlagStateToRpcFlag(FlagState::Get());
}

K_Rpc_Map MapToRpcMap(CMap Map) {
	return K_Rpc_Map{
		Name = Map.MapInfo.Name,
		Uid = Map.MapInfo.MapUid,
		AuthorLogin = Map.MapInfo.AuthorLogin,
		AuthorName = Map.MapInfo.AuthorNickName
	};
}

K_Rpc_Map CurrentMapToRpcMap() {
	if (Map != Null) {
		return MapToRpcMap(Map);
	}
	return K_Rpc_Map{};
}

K_Rpc_TeamScore TeamToRpcTeamScore(CTeam Team) {
	declare Integer TeamNum = Teams.keyof(Team) + 1;
	return K_Rpc_TeamScore{
		Team = TeamToRpcTeam(Team),
		MatchPoints = TeamPointsProgression::GetClanMapsWon(TeamNum),
		MapPoints = TeamPointsProgression::GetClanRoundsWon(TeamNum),
		RoundPoints = Scores::GetClanRoundPoints(TeamNum)
	};
}

K_Rpc_PlayerScore ScoreToRpcPlayerScore(CSmScore Score) {
	return K_Rpc_PlayerScore{
		Player = ScoreToRpcPlayer(Score),
		RoundPoints = Scores::GetPlayerRoundPoints(Score),
		MapPoints = Scores::GetPlayerMapPoints(Score),
		MatchPoints = Scores::GetPlayerMatchPoints(Score),
		FlagsScoredRound = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsScoredMap = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsScoredMatch = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsScored),
		FlagsStolenRound = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		FlagsStolenMap = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		FlagsStolenMatch = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemetry_Key_FlagsStolen),
		AssistsRound = Telemetry::GetPlayerRoundInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists),
		AssistsMap = Telemetry::GetPlayerMapInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists),
		AssistsMatch = Telemetry::GetPlayerMatchInteger(Score, FlagRush_Common::C_Telemerty_Key_FlagScoreAssists)
	};
}

K_Rpc_Flow CurrentMatchStateToRpcFlow() {
	return K_Rpc_Flow{
		Time = Now,
		Map = CurrentMapToRpcMap()
	};
}

K_Rpc_FlowScores CurrentMatchStateToRpcFlowScores() {
	declare K_Rpc_TeamScore[] TeamScores = [TeamToRpcTeamScore(Teams[0]), TeamToRpcTeamScore(Teams[1])];
	declare K_Rpc_PlayerScore[] PlayerScores = [];
	foreach (Score in Scores) {
		PlayerScores.add(ScoreToRpcPlayerScore(Score));
	}

	return K_Rpc_FlowScores{
		Time = Now,
		Map = CurrentMapToRpcMap(),
		TeamScores = TeamScores,
		PlayerScores = PlayerScores
	};
}

/* Flag-Events */

Void Send_FlagReset(FlagState::K_FlagState FlagState) {
	declare K_Rpc_FlagReset Data = K_Rpc_FlagReset{
		Time = Now,
		Flag = CurrentFlagStateToRpcFlag()
	};
	XmlRpc::SendCallback(C_XMLRPC_FlagReset, Data.tojson());
}

Void Send_FlagPickup(FlagState::K_FlagState FlagState) {
	declare K_Rpc_FlagPickup Data = K_Rpc_FlagPickup{
		Time = Now,
		Flag = CurrentFlagStateToRpcFlag()
	};
	XmlRpc::SendCallback(C_XMLRPC_FlagPickup, Data.tojson());
}

Void Send_FlagDrop(FlagState::K_FlagState FlagState, CUser OldCarrierNullable) {
	declare K_Rpc_Player OldCarrier;
	if(OldCarrierNullable != Null) {
		OldCarrier = UserToRpcPlayer(OldCarrierNullable);
	}

	declare K_Rpc_FlagDrop Data = K_Rpc_FlagDrop{
		Time = Now,
		Flag = CurrentFlagStateToRpcFlag(),
		OldCarrier = OldCarrier
	};
	XmlRpc::SendCallback(C_XMLRPC_FlagDrop, Data.tojson());
}

Void Send_FlagPass(FlagState::K_FlagState FlagState, CSmPlayer OldCarrier) {
	declare K_Rpc_FlagPass Data = K_Rpc_FlagPass{
		Time = Now,
		OldCarrier = PlayerToRpcPlayer(OldCarrier),
		Flag = CurrentFlagStateToRpcFlag()
	};
	XmlRpc::SendCallback(C_XMLRPC_FlagPass, Data.tojson());
}

Void Send_FlagScored(CSmPlayer _Scorer, CUser _AssistNullable) {
	declare K_Rpc_Player Scorer = PlayerToRpcPlayer(_Scorer);
	declare K_Rpc_Player Assist;
	if(_AssistNullable != Null) {
		Assist = UserToRpcPlayer(_AssistNullable);
	}

	declare K_Rpc_FlagScored Data = K_Rpc_FlagScored{
		Time = Now,
		Scorer = Scorer,
		Assist = Assist,
		TeamScores = [TeamToRpcTeamScore(Teams[0]), TeamToRpcTeamScore(Teams[1])]
	};
	XmlRpc::SendCallback(C_XMLRPC_FlagScored, Data.tojson());
}

/* Player-Events */

Void Send_PlayerDeath(CSmPlayer Player) {
	declare K_Rpc_PlayerDeath Data = K_Rpc_PlayerDeath{
		Time = Now,
		Player = PlayerToRpcPlayer(Player)
	};
	XmlRpc::SendCallback(C_XMLRPC_PlayerDeath, Data.tojson());
}

/* Flow-Events */

Void Send_MatchStart() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_MatchStart, Data.tojson());
}

Void Send_MatchEnd() {
	declare K_Rpc_FlowScores Data = CurrentMatchStateToRpcFlowScores();
	Data.Valid = True;
	XmlRpc::SendCallback(C_XMLRPC_MatchEnd, Data.tojson());
}

Void Send_MapStart() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_MapStart, Data.tojson());
}

Void Send_MapEnd(Boolean Valid) {
	declare K_Rpc_FlowScores Data = CurrentMatchStateToRpcFlowScores();
	Data.Valid = Valid;
	XmlRpc::SendCallback(C_XMLRPC_MapEnd, Data.tojson());
}

Void Send_RoundStart() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_RoundStart, Data.tojson());
}

Void Send_RoundEnd(Boolean Valid) {
	declare K_Rpc_FlowScores Data = CurrentMatchStateToRpcFlowScores();
	Data.Valid = Valid;
	XmlRpc::SendCallback(C_XMLRPC_RoundEnd, Data.tojson());
}

Void Send_WarmUpStart() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_WarmUpStart, Data.tojson());
}

Void Send_WarmUpEnd() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_WarmUpEnd, Data.tojson());
}

Void Send_OverTime() {
	declare K_Rpc_Flow Data = CurrentMatchStateToRpcFlow();
	XmlRpc::SendCallback(C_XMLRPC_Overtime, Data.tojson());
}