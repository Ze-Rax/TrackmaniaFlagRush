#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores
#Include "Libs/Zrx/ModeLibs/Common/PlayerTelemetry.Script.txt" as Telemetry
#Include "Libs/Zrx/ModeLibs/Common/TeamPointsProgression.Script.txt" as TeamPointsProgression

#Const C_PointsValue_ScoreFlag				3
#Const C_PointsValue_StealFlag				1
#Const C_PointsValue_ScoreFlagAssist	1

#Const C_Telemetry_Key_FlagsScored				"FlagsScored"
#Const C_Telemetry_Key_FlagsStolen				"FlagsStolen"
#Const C_Telemetry_Key_FlagScoreAssists		"FlagScoreAssists"
#Const C_Telemetry_Key_FlagPossession			"FlagPossession"
#Const C_Telemetry_Key_FlagTeamPass				"FlagTeamPass"
#Const C_Telemetry_Key_Respawn						"Respawn"
#Const C_Telemetry_Key_VehicleChanged			"VehicleChanged"

// Must be same as Scores, Telemetry and TeamPointsProgression Levels
#Const C_Level_Match		0
#Const C_Level_Map			1
#Const C_Level_Round		2

/* Teams */

Integer GetClanRoundPoints(Integer Clan) {
	return Scores::GetClanRoundPoints(Clan);
}

Integer GetClanMapPoints(Integer Clan) {
	return TeamPointsProgression::GetClanRoundsWon(Clan);
}

Integer GetClanMatchPoints(Integer Clan) {
	return TeamPointsProgression::GetClanMapsWon(Clan);
}

Void SetClanRoundPoints(Integer Clan, Integer Value) {
	Scores::SetClanRoundPoints(Clan, Value);
}

Void SetClanMapPoints(Integer Clan, Integer Value) {
	TeamPointsProgression::SetClanRoundsWon(Clan, Value);
}

Void SetClanMatchPoints(Integer Clan, Integer Value) {
	TeamPointsProgression::SetClanMapsWon(Clan, Value);
}

/* Players */

Integer GetPlayerRoundPoints(CSmScore Score) {
	return Scores::GetPlayerRoundPoints(Score);
}

Integer GetPlayerMapPoints(CSmScore Score) {
	return Scores::GetPlayerMapPoints(Score);
}

Integer GetPlayerMatchPoints(CSmScore Score) {
	return Scores::GetPlayerMatchPoints(Score);
}

Integer GetPlayerRoundFlagScores(CSmScore Score) {
	return Telemetry::GetPlayerRoundInteger(Score, C_Telemetry_Key_FlagsScored);
}

Integer GetPlayerMapFlagScores(CSmScore Score) {
	return Telemetry::GetPlayerMapInteger(Score, C_Telemetry_Key_FlagsScored);
}

Integer GetPlayerMatchFlagScores(CSmScore Score) {
	return Telemetry::GetPlayerMatchInteger(Score, C_Telemetry_Key_FlagsScored);
}

Integer GetPlayerRoundFlagScoreAssists(CSmScore Score) {
	return Telemetry::GetPlayerRoundInteger(Score, C_Telemetry_Key_FlagScoreAssists);
}

Integer GetPlayerMapFlagScoreAssists(CSmScore Score) {
	return Telemetry::GetPlayerMapInteger(Score, C_Telemetry_Key_FlagScoreAssists);
}

Integer GetPlayerMatchFlagScoreAssists(CSmScore Score) {
	return Telemetry::GetPlayerMatchInteger(Score, C_Telemetry_Key_FlagScoreAssists);
}

Integer GetPlayerRoundFlagSteals(CSmScore Score) {
	return Telemetry::GetPlayerRoundInteger(Score, C_Telemetry_Key_FlagsStolen);
}

Integer GetPlayerMapFlagSteals(CSmScore Score) {
	return Telemetry::GetPlayerMapInteger(Score, C_Telemetry_Key_FlagsStolen);
}

Integer GetPlayerMatchFlagSteals(CSmScore Score) {
	return Telemetry::GetPlayerMatchInteger(Score, C_Telemetry_Key_FlagsStolen);
}

CSmScore[] Private_MapToScoreArray(Integer[CSmScore] Arr) {
	declare CSmScore[] Result;
	foreach (Score => Value in Arr) {
		Result.add(Score);
	}
	return Result;
}

CSmScore[] GetPlayerFlagsScoredMatchRanking() {
	declare Integer[CSmScore] FlagsScored;
	foreach (Score in Scores) {
		FlagsScored[Score] = GetPlayerMatchFlagScores(Score);
	}
	return Private_MapToScoreArray(FlagsScored.sortreverse());
}

CSmScore[] GetPlayerAssistsMatchRanking() {
	declare Integer[CSmScore] Assists;
	foreach (Score in Scores) {
		Assists[Score] = GetPlayerMatchFlagScoreAssists(Score);
	}
	return Private_MapToScoreArray(Assists.sortreverse());
}

CSmScore[] GetPlayerFlagsStealsMatchRanking() {
	declare Integer[CSmScore] FlagSteals;
	foreach (Score in Scores) {
		FlagSteals[Score] = GetPlayerMatchFlagSteals(Score);
	}
	return Private_MapToScoreArray(FlagSteals.sortreverse());
}

/* Net send scores */

Void Net_SendTeamScores() {
	for(Clan, 1, 2) {
		declare netwrite Integer Net_FlagRush_TeamRoundScore for Teams[Clan-1];
		Net_FlagRush_TeamRoundScore = Scores::GetClanRoundPoints(Clan);
		declare netwrite Integer Net_FlagRush_TeamMapScore for Teams[Clan-1];
		Net_FlagRush_TeamMapScore = TeamPointsProgression::GetClanRoundsWon(Clan);
		declare netwrite Integer Net_FlagRush_TeamMatchScore for Teams[Clan-1];
		Net_FlagRush_TeamMatchScore = TeamPointsProgression::GetClanMapsWon(Clan);
	}
}

Void Net_SendPlayerScore(CSmScore Score) {
	declare netwrite Integer Net_FlagRush_Points_Match for Score;
	declare netwrite Integer Net_FlagRush_FlagsScored_Match for Score;
	declare netwrite Integer Net_FlagRush_FlagsScored_Map for Score;
	declare netwrite Integer Net_FlagRush_FlagsScored_Round for Score;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Match for Score;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Map for Score;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Round for Score;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Match for Score;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Map for Score;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Round for Score;

	Net_FlagRush_Points_Match = GetPlayerMatchPoints(Score);

	Net_FlagRush_FlagsScored_Match = GetPlayerMatchFlagScores(Score);
	Net_FlagRush_FlagsScored_Map = GetPlayerMapFlagScores(Score);
	Net_FlagRush_FlagsScored_Round = GetPlayerRoundFlagScores(Score);

	Net_FlagRush_FlagsStolen_Match = GetPlayerMatchFlagSteals(Score);
	Net_FlagRush_FlagsStolen_Map = GetPlayerMapFlagSteals(Score);
	Net_FlagRush_FlagsStolen_Round = GetPlayerRoundFlagSteals(Score);

	Net_FlagRush_FlagsAssists_Match = GetPlayerMatchFlagScoreAssists(Score);
	Net_FlagRush_FlagsAssists_Map = GetPlayerMapFlagScoreAssists(Score);
	Net_FlagRush_FlagsAssists_Round = GetPlayerRoundFlagScoreAssists(Score);
}

Void Net_SendScores() {
	Net_SendTeamScores();
	foreach (Score in Scores) Net_SendPlayerScore(Score);
}

/* Events */

Void OnClanRoundWin(Integer Clan) {
	TeamPointsProgression::AddClanRoundsWon(Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnClanMapWin(Integer Clan) {
	TeamPointsProgression::AddClanMapsWon(Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnPlayerScoreFlag(CSmScore Score) {
	Telemetry::AddPlayerRoundInteger(Score, C_Telemetry_Key_FlagsScored, 1);
	Scores::AddPlayerRoundPoints(Score, C_PointsValue_ScoreFlag);
	Scores::AddClanRoundPoints(Score.TeamNum, 1); // TeamNum == Clan == Teams[]_Index + 1
	Net_SendPlayerScore(Score);
	Net_SendTeamScores();
}

Void OnPlayerScoreFlagAssist(CSmScore Score) {
	Telemetry::AddPlayerRoundInteger(Score, C_Telemetry_Key_FlagScoreAssists, 1);
	Scores::AddPlayerRoundPoints(Score, C_PointsValue_ScoreFlagAssist);
	Net_SendPlayerScore(Score);
}

Void OnPlayerScoreFlag(CSmScore ScorerScore, CSmScore AssistScore) {
	OnPlayerScoreFlag(ScorerScore);
	OnPlayerScoreFlagAssist(AssistScore);
	Net_SendPlayerScore(ScorerScore);
	Net_SendPlayerScore(AssistScore);
}

Void OnPlayerStealFlag(CSmScore NewCarrierScore) {
	Telemetry::AddPlayerRoundInteger(NewCarrierScore, C_Telemetry_Key_FlagsStolen, 1);
	Scores::AddPlayerRoundPoints(NewCarrierScore, C_PointsValue_StealFlag);
	Net_SendPlayerScore(NewCarrierScore);
}

Void OnPlayerPassFlag(CSmScore OldCarrierScore) {
	Telemetry::AddPlayerRoundInteger(OldCarrierScore, C_Telemetry_Key_FlagPossession, 1);
}

Void OnPlayerCarriesFlag(CSmScore CarrierScore) {
	Telemetry::AddPlayerRoundInteger(CarrierScore, C_Telemetry_Key_FlagTeamPass, Period);
}

Void OnPlayerRespawn(CSmScore Score) {
	Telemetry::AddPlayerRoundInteger(Score, C_Telemetry_Key_Respawn, 1);
}

Void OnPlayerChangesVehicle(CSmScore Score) {
	Telemetry::AddPlayerRoundInteger(Score, C_Telemetry_Key_VehicleChanged, 1);
}

/* Progression */

Void Clear(Integer Level) {
	Scores::Clear(Level);
	Telemetry::Clear(Level);
	TeamPointsProgression::Clear(Level);
	Net_SendScores();
}

Void Clear() {
	Clear(C_Level_Match);
	Net_SendScores();
}

Void StartMatch() {
	Scores::StartMatch();
	Telemetry::StartMatch();
	TeamPointsProgression::StartMatch();
	Net_SendScores();
}

Void EndMatch() {
	Scores::EndMatch();
	Telemetry::EndMatch();
	TeamPointsProgression::EndMatch();
	Net_SendScores();
}

Void StartMap() {
	Scores::StartMap();
	Telemetry::StartMap();
	TeamPointsProgression::StartMap();
	Net_SendScores();
}

Void EndMap() {
	Scores::EndMap();
	Telemetry::EndMap();
	TeamPointsProgression::EndMap();
	Net_SendScores();
}

Void StartRound() {
	Scores::StartRound();
	Telemetry::StartRound();
	TeamPointsProgression::StartRound();
	Net_SendScores();
}

Void EndRound() {
	Scores::EndRound();
	Telemetry::EndRound();
	TeamPointsProgression::EndRound();
	Net_SendScores();
}

Void Yield() {
	Scores::Yield();
}

Void Unload() {
	Scores::Unload();
}

Void Load() {
	Scores::Load();
}