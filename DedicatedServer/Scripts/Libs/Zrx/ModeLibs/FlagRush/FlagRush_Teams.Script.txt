// #RequireContext CSmMode

#Include "ColorLib"	as CL

#Include "Libs/Zrx/Common/ColorUtils.Script.txt"														as ColorUtils
#Include "Libs/Zrx/ModeLibs/Common/ClubTagUtils.Script.txt"									as ClubTagUtils
#Include "/Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt"	as Colors

#Const	C_DefaultTeamName						"Unknown Team"
#Const	C_DefaultTeamNames					[0 => "Team Blue"			, 1 => "Team Red"			]

#Const	C_HueOverlapThreshold				0.166

#Struct K_TeamConfig {
	Text ClubTag;
	Text Name;
	Vec3 Color;
}

#Struct K_TeamSkin {
	Text SkinName;
	Text SkinUrl;
	Ident ItemId;
	Vec3 Color;
}

declare K_TeamConfig[CTeam] G_TeamConfigs;
declare K_TeamSkin[Integer] G_TeamSkins;
declare Text[Integer] G_TeamNameOverrides;
declare Text[Integer] G_TeamColorHexOverrides;
declare Boolean G_UseClubTags;

Void SetTeam1NameOverride(Text Name) {
	G_TeamNameOverrides[0] = Name;
}

Void SetTeam2NameOverride(Text Name) {
	G_TeamNameOverrides[1] = Name;
}

Void SetTeam1ColorHexOverride(Text ColorHex) {
	G_TeamColorHexOverrides[0] = ColorHex;
}

Void SetTeam2ColorHexOverride(Text ColorHex) {
	G_TeamColorHexOverrides[1] = ColorHex;
}

Void UseClubTags(Boolean UseClubTags) {
	G_UseClubTags = UseClubTags;
}

/**
 * Load the skins
 */
Void LoadSkins() {
	declare Text[Integer] Names = [0 => "Skins/Models/CarSport/Stadium_Clan_dolphin.zip", 1 => "Skins/Models/CarSport/Stadium_Clan_ladybug.zip"];
	declare Text[Integer] Urls = [0 => "", 1 => ""];
	declare Vec3[Integer] Colors = [0 => CL::Hex6ToRgb("ffffff"), 1 => CL::Hex6ToRgb("ffffff")];

	G_TeamSkins[0] = K_TeamSkin{SkinName=Names[0], SkinUrl=Urls[0], Color=Colors[0]};
	G_TeamSkins[0].ItemId = ItemList_AddWithSkin("CarSport", Names[0]);

	G_TeamSkins[1] = K_TeamSkin{SkinName=Names[1], SkinUrl=Urls[1], Color=Colors[1]};
	G_TeamSkins[1].ItemId = ItemList_AddWithSkin("CarSport", Names[1]);
}

/**
 * Get ModelId for team
 */
Ident GetSkinModelIdForTeam(Integer Team) {
	if (G_TeamSkins.existskey(Team)) {
		return G_TeamSkins[Team].ItemId;
	}
	return NullId;
}

/**
 * Gets Team Dossard Color
 */
Vec3 GetTeamDossardColor(Integer TeamNum) {
	return G_TeamSkins[TeamNum].Color;
}

/**
 * Gets a team skin
 */
K_TeamSkin[Integer] GetTeamSkins() {
 return G_TeamSkins;
}

/**
 * Gets the team config for the given team.
 */
K_TeamConfig GetConfig(CTeam Team) {
	return G_TeamConfigs.get(Team, K_TeamConfig{});
}

/**
 * Gets the team config by the given clan number (>= 1).
 */
K_TeamConfig GetConfig(Integer Clan) {
	return GetConfig(Teams[Clan-1]);
}

/**
 * Gets the default team color for a given clan.
 */
Vec3 GetDefaultTeamColor(Integer Clan) {
	switch (Clan) {
		case 1: return Colors::C_BlueBase;
		case 2: return Colors::C_RedBase;
	}
	return Colors::C_NeutralLight;
}

/**
 * Gets the default team name for a given clan.
 */
Text GetDefaultTeamName(Integer Clan) {
	return C_DefaultTeamNames.get(Clan-1, C_DefaultTeamName);
}

/**
 * Creates team configs from the club tags of both teams.
 */
Void Private_Configs_InitFromClubTags() {
	// Get TeamConfigs from ClubTags
	declare K_TeamConfig[] TeamConfigs = [
		ClubTagUtils::GetTeamConfig(1),
		ClubTagUtils::GetTeamConfig(2)
	];

	G_TeamConfigs = [Teams[0] => TeamConfigs[0], Teams[1] => TeamConfigs[1]];
}

/**
 * Overrides empty fields in config with forced or default values.
 */
Void Private_Configs_OverrideEmptyFields() {
	for(TeamIndex, 0, 1) {
		declare Team <=> Teams[TeamIndex];
		if (G_TeamNameOverrides.get(TeamIndex, "") != "")	// Forced
			G_TeamConfigs[Team].Name = G_TeamNameOverrides[TeamIndex];
		else if (G_TeamConfigs[Team].Name == "")					// Was empty
			G_TeamConfigs[Team].Name = GetDefaultTeamName(TeamIndex + 1);

		if(G_TeamColorHexOverrides.get(TeamIndex, "") != "")
			G_TeamConfigs[Team].Color = CL::Hex3ToRgb(G_TeamColorHexOverrides[TeamIndex]);
		else if (G_TeamConfigs[Team].Color == ClubTagUtils::C_InvalidColor)
			G_TeamConfigs[Team].Color = GetDefaultTeamColor(TeamIndex + 1);
	}
}

/**
 * Adjusts the colors of a team in the config to avoid hue overlap.
 * The following table shows which team's color to adjust depending on the current settings.
 *
 * - ClubX: Team X color is defined by Club Tag
 * - ForcedX: Team X color is defined by forced-setting
 * - DefaultX: None of the above
 * - Number in Grid: Team number (Index+1) to adjust the color of
 *
 *          | Default2 | Club2 | Forced2
 * ---------+---------------------------
 * Default1 |    2         1        1
 * Club1    |    2         2        1
 * Forced1  |    2         2      NONE
 */
Void Private_Configs_AdjustAvoidHueOverlap() {
	declare Text Team1ColorOverride = G_TeamColorHexOverrides.get(0, "");
	declare Text Team2ColorOverride = G_TeamColorHexOverrides.get(1, "");

	// Only adjust if at least one team color is not forced by settings
	if (Team1ColorOverride == "" || Team2ColorOverride == "") {
		// See table above
		declare Boolean AdjustFirst = Team2ColorOverride != "" ||
				(G_TeamConfigs[Teams[1]].ClubTag != "" && G_TeamConfigs[Teams[0]].ClubTag == "" && Team1ColorOverride == "");

		if (AdjustFirst) G_TeamConfigs[Teams[0]].Color = ColorUtils::AdjustHueOverlap(
				G_TeamConfigs[Teams[1]].Color,
				G_TeamConfigs[Teams[0]].Color,
				C_HueOverlapThreshold);
		else G_TeamConfigs[Teams[1]].Color = ColorUtils::AdjustHueOverlap(
				G_TeamConfigs[Teams[0]].Color,
				G_TeamConfigs[Teams[1]].Color,
				C_HueOverlapThreshold);
	}
}

/**
 * Applies the TeamConfigs to the actual Team objects
 */
Void Private_Configs_ApplyToTeams() {
	for(TeamIndex, 0, 1) {
		Teams[TeamIndex].Name = G_TeamConfigs[Teams[TeamIndex]].Name;
		declare Vec3 PrimaryColor = G_TeamConfigs[Teams[TeamIndex]].Color;

		// Teams have automatic change for colors; Need full saturation and value (HSV)
		Teams[TeamIndex].ColorPrimary = ColorUtils::ColorToFullSaturationAndValue(PrimaryColor);
		Teams[TeamIndex].ColorSecondary = ColorUtils::ColorToFullSaturationAndValue(PrimaryColor);

		// Use "declare for" for actual colors for UI. Player Markers still use Teams[I].ColorPrimary
		declare Vec3 ColorPrimaryUI for Teams[TeamIndex];
		ColorPrimaryUI = PrimaryColor;

		declare netwrite Vec3 Net_FlagRush_PrimaryColor for Teams[TeamIndex];
		Net_FlagRush_PrimaryColor = PrimaryColor;
	}
}

/**
 * Initializes the team configs.
 */
Void Init() {
	if (G_UseClubTags) Private_Configs_InitFromClubTags();
 	else G_TeamConfigs = [Teams[0] => GetConfig(1), Teams[1] => GetConfig(2)];
	Private_Configs_OverrideEmptyFields();
	Private_Configs_AdjustAvoidHueOverlap();
	Private_Configs_ApplyToTeams();
}

Void Yield() {
	foreach (Player in Players) {
		declare Integer PreviousClan for Player;
		if (PreviousClan != Player.CurrentClan) {
			Init();
			PreviousClan = Player.CurrentClan;
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CSmModeEvent::EType::OnPlayerAdded, CSmModeEvent::EType::OnPlayerRemoved: {
				Init();
			}
		}
	}
}