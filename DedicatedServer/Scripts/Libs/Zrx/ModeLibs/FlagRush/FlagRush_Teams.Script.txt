// #RequireContext CSmMode

// #Include "ColorLib"	as CL

// #Include "Libs/Zrx/Common/ColorUtils.Script.txt"														as ColorUtils
// #Include "Libs/Zrx/ModeLibs/Common/ClubTagUtils.Script.txt"									as ClubTagUtils
#Include "/Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt"	as Colors
#Include "/Libs/Rx/ModeLibs/Common/NiceColors.Script.txt"	as NCL
#Include "MathLib" as ML
#Include "TextLib" as TL

#Const	C_DefaultTeamName						"Unknown Team"
#Const	C_DefaultTeamNames					[0 => "Team Teardrop",1 => "Team Feather"]
#Const	C_DefaultTeamHue						120
#Const	C_DefaultTeamHues						[0 => 240,1 => 0]

#Const C_SkinNames [
	"Skins/Models/CarSport/Stadium_Clan_ladybug.zip",
	"Skins/Models/CarSport/Stadium_Clan_fox.zip",
	"Skins/Models/CarSport/Stadium_Clan_bee.zip",
	"Skins/Models/CarSport/Stadium_Clan_grasshopper.zip",
	"Skins/Models/CarSport/Stadium_Clan_crocodile.zip",
	"Skins/Models/CarSport/Stadium_Clan_peafowl.zip",
	"Skins/Models/CarSport/Stadium_Clan_rabbit.zip",//find a better skin for this hue
	"Skins/Models/CarSport/Stadium_Clan_polar_bear.zip",
	"Skins/Models/CarSport/Stadium_Clan_dolphin.zip",
	"Skins/Models/CarSport/Stadium_Clan_butterfly.zip",
	"Skins/Models/CarSport/Stadium_Clan_octopus.zip",
	"Skins/Models/CarSport/Stadium_Clan_pig.zip",
	"Skins/Models/CarSport/Stadium_Clan_ladybug.zip"//wrap around
]
#Const C_HueSkinLut [
	0.,
	30.,
	60.,
	90.,
	120.,
	150.,
	180.,
	210.,
	240.,
	270.,
	300.,
	330.,
	360.
]

// #Const	C_HueOverlapThreshold				0.166
#Struct K_TeamConfig {
	Text ClubTag;
	Text Name;
	Integer Hue;
	Text SkinName;
	Ident ItemId;
}

declare K_TeamConfig[Integer] G_TeamConfigs;
declare Text[Integer] G_TeamNameOverrides;
declare Integer[Integer] G_TeamHueOverrides;
declare Ident[Integer] G_SkinIds;
declare Boolean G_UseClubTags;

Void SetTeam1NameOverride(Text Name) {
	G_TeamNameOverrides[0] = Name;
}

Void SetTeam2NameOverride(Text Name) {
	G_TeamNameOverrides[1] = Name;
}

Void SetTeam1HueOverride(Integer Hue) {
	G_TeamHueOverrides[0] = Hue;
}

Void SetTeam2HueOverride(Integer Hue) {
	G_TeamHueOverrides[1] = Hue;
}

Void UseClubTags(Boolean UseClubTags) {
	G_UseClubTags = UseClubTags;
}

Void LoadSkins() {
	for(i, 0, C_SkinNames.count-1){
		G_SkinIds[i] = ItemList_AddWithSkin("CarSport", C_SkinNames[i]);
		// log(G_SkinIds[i]);
	}
}

Ident GetSkinModelIdForTeam(Integer Team) {
	if (G_TeamConfigs.existskey(Team)) {
		// log("WTF?"^G_TeamConfigs[Team].ItemId);
		return G_TeamConfigs[Team].ItemId;
	}
	return NullId;
}

Text GetSkinNameForTeam(Integer Team) {
	if (G_TeamConfigs.existskey(Team)) {
		return G_TeamConfigs[Team].SkinName;
	}
	return "";
}

Integer GetDefaultTeamHue(Integer Clan) {
	return C_DefaultTeamHues.get(Clan-1, C_DefaultTeamHue);
}

Text GetDefaultTeamName(Integer Clan) {
	return C_DefaultTeamNames.get(Clan-1, C_DefaultTeamName);
}

Void Private_OverrideEmptyFields() {
	for(TeamIndex, 0, 1) {
		if (G_TeamNameOverrides.get(TeamIndex, "") != "")	// Forced
			G_TeamConfigs[TeamIndex].Name = G_TeamNameOverrides[TeamIndex];
		else if (G_TeamConfigs[TeamIndex].Name == "")					// Was empty
			G_TeamConfigs[TeamIndex].Name = GetDefaultTeamName(TeamIndex + 1);

		if(G_TeamHueOverrides.get(TeamIndex, -1) != -1){
			declare Integer Hue = G_TeamHueOverrides[TeamIndex];
			G_TeamConfigs[TeamIndex].Hue = Hue;
			// G_TeamConfigs[TeamIndex].OkHue = OKCL::RgbToOkLch(OKCL::HsvToRgb(<Hue/360.,1.,1.>)).Z;
		}
		else if (G_TeamConfigs[TeamIndex].Hue == 0){
			declare Integer Hue = GetDefaultTeamHue(TeamIndex + 1);
			G_TeamConfigs[TeamIndex].Hue = Hue;
			// G_TeamConfigs[TeamIndex].OkHue = OKCL::RgbToOkLch(OKCL::HsvToRgb(<Hue/360.,1.,1.>)).Z;
		}
	}
}
Void SetTeamNamesFromClubTags(){
	if (G_UseClubTags) {
		for (TeamIndex, 0, 1) {
			declare Boolean ClubTagMissmatch;
			declare Text[] ClubTagsTeam;
			foreach (Player in Players) {
				if (Player.CurrentClan == TeamIndex+1 && !Player.RequestsSpectate) { // Is playing
					if (ClubTagsTeam.count == 0) {
						ClubTagsTeam.add(Player.User.ClubTag);
					} else if (!ClubTagsTeam.exists(Player.User.ClubTag)) {
						ClubTagMissmatch = True;
						break;
					}
				}
			}

			if(!ClubTagMissmatch && ClubTagsTeam.count == 1) {
				G_TeamConfigs[TeamIndex].ClubTag = ClubTagsTeam[0];
				G_TeamConfigs[TeamIndex].Name = TL::StripFormatting(ClubTagsTeam[0]);
				Teams[TeamIndex].Name = G_TeamConfigs[TeamIndex].Name;
			}else{
				Teams[TeamIndex].Name = GetDefaultTeamName(TeamIndex+1);
			}
		}
	}
}

Void Private_ApplyToTeams() {

	for (TeamIndex, 0, 1) {
		declare Real Hue = G_TeamConfigs[TeamIndex].Hue*1.;

		declare Vec3 LightColor =   NCL::GetLightColor(Hue);
		declare Vec3 MidColor = NCL::GetMidColor(Hue);
		declare Vec3 DarkColor = NCL::GetDarkColor(Hue);

		Teams[TeamIndex].ColorPrimary = MidColor;
		Teams[TeamIndex].ColorSecondary = MidColor;

		declare netwrite Vec3 Net_FlagRush_LightColor for Teams[TeamIndex];
		Net_FlagRush_LightColor = LightColor;
		declare netwrite Vec3 Net_FlagRush_MidColor for Teams[TeamIndex];
		Net_FlagRush_MidColor = MidColor;
		declare netwrite Vec3 Net_FlagRush_DarkColor for Teams[TeamIndex];
		Net_FlagRush_DarkColor = DarkColor;

		declare Integer id = 0;
		declare Real dist = 400.;
		for(i, 0, C_HueSkinLut.count-1){
			if(ML::Abs(Hue-C_HueSkinLut[i]) < dist){
				dist = ML::Abs(Hue-C_HueSkinLut[i]);
				id = i;
			}
		}
		G_TeamConfigs[TeamIndex].SkinName = C_SkinNames[id];
		G_TeamConfigs[TeamIndex].ItemId = G_SkinIds.get(id,NullId);
	}
}

Void Init() {
/* 	 else {
		G_TeamConfigs = [Teams[0] => K_TeamConfig{}, Teams[1] => K_TeamConfig{}];
	} */
	G_TeamConfigs = [0 => K_TeamConfig{}, 1 => K_TeamConfig{}];
	Private_OverrideEmptyFields();
	Private_ApplyToTeams();
	SetTeamNamesFromClubTags();
}