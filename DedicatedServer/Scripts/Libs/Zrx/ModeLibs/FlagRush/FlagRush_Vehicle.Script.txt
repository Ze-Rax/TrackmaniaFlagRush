#Struct K_Vehicle {
	Text Id;
	Integer Order;
	Text ModelName;
	Text DisplayName;
	Text DisplayIcon;
}

#Struct K_Tuning {
	Real Acceleration;
	Real Adherence;
	Real Control;
}

// When adding vehicles, also add them to GetAll()
#Const C_Vehicle_Invalid K_Vehicle{ Id = "", Order = -1, ModelName = "", DisplayName = "Invalid", DisplayIcon = "?" }
#Const C_Vehicle_Stadium K_Vehicle{ Id = "stadium", Order = 0, ModelName = "CarSport", DisplayName = "Stadium", DisplayIcon = "" }
#Const C_Vehicle_Snow K_Vehicle{ Id = "snow", Order = 1, ModelName = "CarSnow", DisplayName = "Snow", DisplayIcon = "❄" }
#Const C_Vehicle_Rally K_Vehicle{ Id = "rally", Order = 2, ModelName = "CarRally", DisplayName = "Rally", DisplayIcon = "" }
#Const C_Vehicle_Desert K_Vehicle{ Id = "desert", Order = 3, ModelName = "CarDesert", DisplayName = "Desert", DisplayIcon = "" }

#Const C_Tuning_Default K_Tuning{ Acceleration = 1.0, Adherence = 1.0, Control = 1.0 }

declare Ident[Text] G_VehicleItems;
declare K_Tuning[Text] G_VehicleTunings;

/**
 * Returns a sorted version of the input array. Elements are sorted using Vehicle.Order.
 */
K_Vehicle[] Sort(K_Vehicle[] Vehicles) {
	declare K_Vehicle[Integer] VehicleMap;
	foreach (Vehicle in Vehicles) {
		VehicleMap[Vehicle.Order] = Vehicle;
	}
	VehicleMap = VehicleMap.sortkey();
	declare K_Vehicle[] SortedVehicles;
	foreach (Order => Vehicle in VehicleMap) {
		SortedVehicles.add(Vehicle);
	}
	return SortedVehicles;
}

/**
 * Returns a array of all vehicles that are known to the mode.
 */
K_Vehicle[] GetAll() {
	return [C_Vehicle_Stadium, C_Vehicle_Snow, C_Vehicle_Rally, C_Vehicle_Desert];
}

/**
 * Gets the Vehicle struct for a given VehicleId.
 */
K_Vehicle Get(Text VehicleId) {
	foreach (Vehicle in GetAll()) {
		if (Vehicle.Id == VehicleId) {
			return Vehicle;
		}
	}
	return C_Vehicle_Invalid;
}

K_Vehicle Get(Ident _ModelId) {
	foreach (VehicleId => ModelId in G_VehicleItems) {
		if (ModelId == _ModelId) {
			return Get(VehicleId);
		}
	}
	return C_Vehicle_Invalid;
}

/**
 * Check if a the given VehicleId is valid (known).
 */
Boolean IsValid(Text VehicleId) {
	foreach (Vehicle in GetAll()) {
		if (Vehicle.Id == VehicleId) {
			return True;
		}
	}
	return False;
}

K_Tuning GetTuning(Text _VehicleId) {
	return G_VehicleTunings.get(_VehicleId, C_Tuning_Default);
}

K_Tuning GetTuning(Ident _VehicleModelId) {
	declare Text VehicleId = Get(_VehicleModelId).Id;
	return GetTuning(VehicleId);
}

Void SetTuning(Text _VehicleId, K_Tuning _Tuning) {
	G_VehicleTunings[_VehicleId] = _Tuning;
}

Real GetAcceleration(Text _VehicleId) {
	return GetTuning(_VehicleId).Acceleration;
}

Void SetAcceleration(Text _VehicleId, Real _Acceleration) {
	declare K_Tuning Tuning = GetTuning(_VehicleId);
	Tuning.Acceleration = _Acceleration;
	SetTuning(_VehicleId, Tuning);
}

Real GetAdherence(Text _VehicleId) {
	return GetTuning(_VehicleId).Adherence;
}

Void SetAdherence(Text _VehicleId, Real _Adherence) {
	declare K_Tuning Tuning = GetTuning(_VehicleId);
	Tuning.Adherence = _Adherence;
	SetTuning(_VehicleId, Tuning);
}

Real GetControl(Text _VehicleId) {
	return GetTuning(_VehicleId).Control;
}

Void SetControl(Text _VehicleId, Real _Control) {
	declare K_Tuning Tuning = GetTuning(_VehicleId);
	Tuning.Control = _Control;
	SetTuning(_VehicleId, Tuning);
}

/**
 * Gets the item id for a given vehicle id.
 * Returns NullId for invalid or unloaded items, as well as for the stadium car.
 */
Ident GetItemId(Text VehicleId) {
	return G_VehicleItems.get(VehicleId, NullId);
}

/**
 * Loads the vehicle items in the item list.
 * Does not load a model for the stadium car, as it's the default.
 * Call after ItemList_Begin and before ItemList_End.
 */
Void LoadItems() {
	G_VehicleItems.clear();
	foreach (Vehicle in GetAll()) {
		G_VehicleItems[Vehicle.Id] = ItemList_Add(Vehicle.ModelName);
	}
}
