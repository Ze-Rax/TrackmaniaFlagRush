#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores
#Include "Libs/Zrx/ModeLibs/Common/PlayerStatistics.Script.txt" as PlayerStatistics
#Include "Libs/Zrx/ModeLibs/Common/TeamPointsProgression.Script.txt" as TeamPointsProgression

#Const C_PointsValue_ScoreFlag				3
#Const C_PointsValue_StealFlag				1
#Const C_PointsValue_ScoreFlagAssist	1

#Const C_PlayerStatisticsKey_FlagsScored				"FlagsScored"
#Const C_PlayerStatisticsKey_FlagsStolen				"FlagsStolen"
#Const C_PlayerStatisticsKey_FlagScoreAssists		"FlagScoreAssists"
#Const C_PlayerStatisticsKey_FlagPossession			"FlagPossession"
#Const C_PlayerStatisticsKey_FlagTeamPass				"FlagTeamPass"
#Const C_PlayerStatisticsKey_Respawn						"Respawn"
#Const C_PlayerStatisticsKey_VehicleChanged			"VehicleChanged"
#Const C_PlayerStatisticsKey_DistanceDriven			"DistanceDriven"
#Const C_PlayerStatisticsKey_FlagPickUpLandmark	"PickUpFlagFromLandmark"
#Const C_PlayerStatisticsKey_OutOfBounds				"OutOfBounds"
#Const C_PlayerStatisticsKey_Deaths							"Deaths"
#Const C_PlayerStatisticsKey_TopSpeed						"TopSpeed"
#Const C_PlayerStatisticsKey_Airtime						"Airtime"

// Must be same as Scores, PlayerStatistics and TeamPointsProgression Levels
#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

#Struct K_FlagRushPlayerStatistics {
	Integer FlagsScored;
	Integer FlagsStolen;
	Integer FlagScoreAssists;
	Integer FlagPosessionTimeMs;
	Integer FlagTeamPasses;
	Integer Respawns;
	Integer VehicleChanges;
	Real DistanceDriven;
	Integer FlagsPickedUpFromLandmarks;
	Integer OutOfBoundsCount;
	Integer Deaths;
	Real TopSpeed;
	Integer AirtimeMs;
}

/* Teams */

Integer GetClanRoundPoints(Integer _Clan) {
	return Scores::GetClanRoundPoints(_Clan);
}

Integer GetClanMapPoints(Integer _Clan) {
	return TeamPointsProgression::GetClanRoundsWon(_Clan);
}

Integer GetClanMatchPoints(Integer _Clan) {
	return TeamPointsProgression::GetClanMapsWon(_Clan);
}

Void SetClanRoundPoints(Integer _Clan, Integer _Value) {
	Scores::SetClanRoundPoints(_Clan, _Value);
}

Void SetClanMapPoints(Integer _Clan, Integer _Value) {
	TeamPointsProgression::SetClanRoundsWon(_Clan, _Value);
}

Void SetClanMatchPoints(Integer _Clan, Integer _Value) {
	TeamPointsProgression::SetClanMapsWon(_Clan, _Value);
}

/* Players */

Integer GetPlayerPoints(CSmScore _Score, Integer _Level) {
	switch (_Level) {
		case C_Level_Match: {
			return Scores::GetPlayerMatchPoints(_Score);}
		case C_Level_Map: {
			return Scores::GetPlayerMapPoints(_Score);
		}
		case C_Level_Round: {
			return Scores::GetPlayerRoundPoints(_Score);
		}
	}
	return 0;
}

Integer GetPlayerRoundPoints(CSmScore _Score) {
	return GetPlayerPoints(_Score, C_Level_Round);
}

Integer GetPlayerMapPoints(CSmScore _Score) {
	return GetPlayerPoints(_Score, C_Level_Map);
}

Integer GetPlayerMatchPoints(CSmScore _Score) {
	return GetPlayerPoints(_Score, C_Level_Match);
}

K_FlagRushPlayerStatistics GetPlayerStatistics(CSmScore _Score, Integer _Level) {
	return K_FlagRushPlayerStatistics{
		FlagsScored = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagsScored, _Level),
		FlagsStolen = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagsStolen, _Level),
		FlagScoreAssists = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagScoreAssists, _Level),
		FlagPosessionTimeMs = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagPossession, _Level),
		FlagTeamPasses = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagTeamPass, _Level),
		Respawns = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_Respawn, _Level),
		VehicleChanges = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_VehicleChanged, _Level),
		DistanceDriven = PlayerStatistics::GetReal(_Score, C_PlayerStatisticsKey_DistanceDriven, _Level),
		FlagsPickedUpFromLandmarks = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_FlagPickUpLandmark, _Level),
		OutOfBoundsCount = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_OutOfBounds, _Level),
		Deaths = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_Deaths, _Level),
		TopSpeed = PlayerStatistics::GetReal(_Score, C_PlayerStatisticsKey_TopSpeed, _Level),
		AirtimeMs = PlayerStatistics::GetInteger(_Score, C_PlayerStatisticsKey_Airtime, _Level)
	};
}

K_FlagRushPlayerStatistics GetPlayerRoundStatistics(CSmScore _Score) {
	return GetPlayerStatistics(_Score, C_Level_Round);
}

K_FlagRushPlayerStatistics GetPlayerMapStatistics(CSmScore _Score) {
	return GetPlayerStatistics(_Score, C_Level_Map);
}

K_FlagRushPlayerStatistics GetPlayerMatchStatistics(CSmScore _Score) {
	return GetPlayerStatistics(_Score, C_Level_Match);
}

/* Net send scores */

Void Net_SendTeamScores() {
	for(Clan, 1, 2) {
		declare netwrite Integer Net_FlagRush_TeamRoundScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamRoundScore = Scores::GetClanRoundPoints(Clan);
		declare netwrite Integer Net_FlagRush_TeamMapScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamMapScore = TeamPointsProgression::GetClanRoundsWon(Clan);
		declare netwrite Integer Net_FlagRush_TeamMatchScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamMatchScore = TeamPointsProgression::GetClanMapsWon(Clan);
	}
}

Void Net_SendPlayerScore(CSmScore _Score) {
	declare netwrite K_FlagRushPlayerStatistics[Integer] Net_FlagRush_PlayerStatistics for _Score = [];
	Net_FlagRush_PlayerStatistics[C_Level_Round] = GetPlayerRoundStatistics(_Score);
	Net_FlagRush_PlayerStatistics[C_Level_Map] = GetPlayerMapStatistics(_Score);
	Net_FlagRush_PlayerStatistics[C_Level_Match] = GetPlayerMatchStatistics(_Score);

	declare netwrite Integer Net_FlagRush_Points_Match for _Score = 0;
	Net_FlagRush_Points_Match = GetPlayerMatchPoints(_Score);
}

Void Net_SendScores() {
	Net_SendTeamScores();
	foreach (Score in Scores) Net_SendPlayerScore(Score);
}

/* Events */

Void OnClanRoundWin(Integer _Clan) {
	TeamPointsProgression::AddClanRoundsWon(_Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnClanMapWin(Integer _Clan) {
	TeamPointsProgression::AddClanMapsWon(_Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnPlayerScoresFlag(CSmScore _ScorerScore, CSmScore _AssistScore) {
	PlayerStatistics::AddRound(_ScorerScore, C_PlayerStatisticsKey_FlagsScored, 1);
	Scores::AddPlayerRoundPoints(_ScorerScore, C_PointsValue_ScoreFlag);
	Scores::AddClanRoundPoints(_ScorerScore.TeamNum, 1); // TeamNum == Clan == Teams[]_Index + 1
	Net_SendPlayerScore(_ScorerScore);
	Net_SendTeamScores();

	if (_AssistScore != Null) {
		PlayerStatistics::AddRound(_AssistScore, C_PlayerStatisticsKey_FlagScoreAssists, 1);
		Scores::AddPlayerRoundPoints(_AssistScore, C_PointsValue_ScoreFlagAssist);
		Net_SendPlayerScore(_AssistScore);
	}
}

Void OnPlayerScoresFlag(CSmScore _ScorerScore) {
	OnPlayerScoresFlag(_ScorerScore, Null);
}

Void OnPlayerStealsFlag(CSmScore _NewCarrierScore) {
	PlayerStatistics::AddRound(_NewCarrierScore, C_PlayerStatisticsKey_FlagsStolen, 1);
	Scores::AddPlayerRoundPoints(_NewCarrierScore, C_PointsValue_StealFlag);
	Net_SendPlayerScore(_NewCarrierScore);
}

Void OnPlayerPassesFlag(CSmScore _OldCarrierScore) {
	PlayerStatistics::AddRound(_OldCarrierScore, C_PlayerStatisticsKey_FlagTeamPass, 1);
}

Void OnPlayerCarriesFlag(CSmScore _CarrierScore) {
	PlayerStatistics::AddRound(_CarrierScore, C_PlayerStatisticsKey_FlagPossession, Period);
}

Void OnPlayerRespawn(CSmScore _Score) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_Respawn, 1);
}

Void OnPlayerChangesVehicle(CSmScore _Score) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_VehicleChanged, 1);
}

Void OnPlayerDistanceDriven(CSmScore _Score, Real _Distance) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_DistanceDriven, _Distance);
}

Void OnPlayerPicksUpFlagFromLandmark(CSmScore _Score) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_FlagPickUpLandmark, 1);
}

Void OnPlayerOutOfBounds(CSmScore _Score) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_OutOfBounds, 1);
}

Void OnPlayerDeath(CSmScore _Score) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_Deaths, 1);
}

Void OnPlayerHasSpeed(CSmScore _Score, Real _Speed) {
	declare Real CurrentTopSpeed = PlayerStatistics::GetMatchReal(_Score, C_PlayerStatisticsKey_TopSpeed);
	if (_Speed > CurrentTopSpeed) {
		PlayerStatistics::SetMatch(_Score, C_PlayerStatisticsKey_TopSpeed, _Speed);
	}
}

Void OnPlayerLandedJump(CSmScore _Score, Integer _JumpDuration) {
	PlayerStatistics::AddRound(_Score, C_PlayerStatisticsKey_Airtime, _JumpDuration);
}

/* Progression */

Void Clear(Integer _Level) {
	Scores::Clear(_Level);
	PlayerStatistics::Clear(_Level);
	TeamPointsProgression::Clear(_Level);
	Net_SendScores();
}

Void Clear() {
	Clear(C_Level_Match);
	Net_SendScores();
}

Void StartMatch() {
	Scores::StartMatch();
	PlayerStatistics::StartMatch();
	TeamPointsProgression::StartMatch();
	Net_SendScores();
}

Void EndMatch() {
	Scores::EndMatch();
	PlayerStatistics::EndMatch();
	TeamPointsProgression::EndMatch();
	Net_SendScores();
}

Void StartMap() {
	Scores::StartMap();
	PlayerStatistics::StartMap();
	TeamPointsProgression::StartMap();
	Net_SendScores();
}

Void EndMap() {
	Scores::EndMap();
	PlayerStatistics::EndMap();
	TeamPointsProgression::EndMap();
	Net_SendScores();
}

Void StartRound() {
	Scores::StartRound();
	PlayerStatistics::StartRound();
	TeamPointsProgression::StartRound();
	Net_SendScores();
}

Void EndRound() {
	Scores::EndRound();
	PlayerStatistics::EndRound();
	TeamPointsProgression::EndRound();
	Net_SendScores();
}

Void Yield() {
	Scores::Yield();
}

Void Unload() {
	Scores::Unload();
	PlayerStatistics::Unload();
}

Void Load() {
	Scores::Load();
	PlayerStatistics::Load();
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagsScored,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagsStolen,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagScoreAssists,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagPossession,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagTeamPass,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_Respawn,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_VehicleChanged,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_DistanceDriven,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Real,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_FlagPickUpLandmark,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_OutOfBounds,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_Deaths,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_TopSpeed,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Real,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Max
		}
	);
	PlayerStatistics::Register(
		C_PlayerStatisticsKey_Airtime,
		PlayerStatistics::K_Registration{
			Type = PlayerStatistics::C_StatisticType_Integer,
			AggregationFunction = PlayerStatistics::C_AggregationFunction_Add
		}
	);
}
