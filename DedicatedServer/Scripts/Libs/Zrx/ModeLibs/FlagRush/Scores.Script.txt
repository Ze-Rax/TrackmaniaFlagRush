#Include "Libs/Nadeo/TMGame/Modes/Scores.Script.txt" as Scores
#Include "Libs/Zrx/ModeLibs/Common/PlayerStatistics.Script.txt" as PlayerStatistics
#Include "Libs/Zrx/ModeLibs/Common/TeamPointsProgression.Script.txt" as TeamPointsProgression

#Const C_PointsValue_ScoreFlag				3
#Const C_PointsValue_StealFlag				1
#Const C_PointsValue_ScoreFlagAssist	1

#Const C_PlayerStatisticsKey_FlagsScored				"FlagsScored"
#Const C_PlayerStatisticsKey_FlagsStolen				"FlagsStolen"
#Const C_PlayerStatisticsKey_FlagScoreAssists		"FlagScoreAssists"
#Const C_PlayerStatisticsKey_FlagPossession			"FlagPossession"
#Const C_PlayerStatisticsKey_FlagTeamPass				"FlagTeamPass"
#Const C_PlayerStatisticsKey_Respawn						"Respawn"
#Const C_PlayerStatisticsKey_VehicleChanged			"VehicleChanged"
#Const C_PlayerStatisticsKey_DistanceDriven			"DistanceDriven"

// Must be same as Scores, PlayerStatistics and TeamPointsProgression Levels
#Const Scores::C_Level_Match as C_Level_Match
#Const Scores::C_Level_Map as C_Level_Map
#Const Scores::C_Level_Round as C_Level_Round

/* Teams */

Integer GetClanRoundPoints(Integer _Clan) {
	return Scores::GetClanRoundPoints(_Clan);
}

Integer GetClanMapPoints(Integer _Clan) {
	return TeamPointsProgression::GetClanRoundsWon(_Clan);
}

Integer GetClanMatchPoints(Integer _Clan) {
	return TeamPointsProgression::GetClanMapsWon(_Clan);
}

Void SetClanRoundPoints(Integer _Clan, Integer _Value) {
	Scores::SetClanRoundPoints(_Clan, _Value);
}

Void SetClanMapPoints(Integer _Clan, Integer _Value) {
	TeamPointsProgression::SetClanRoundsWon(_Clan, _Value);
}

Void SetClanMatchPoints(Integer _Clan, Integer _Value) {
	TeamPointsProgression::SetClanMapsWon(_Clan, _Value);
}

/* Players */

Integer GetPlayerRoundPoints(CSmScore _Score) {
	return Scores::GetPlayerRoundPoints(_Score);
}

Integer GetPlayerMapPoints(CSmScore _Score) {
	return Scores::GetPlayerMapPoints(_Score);
}

Integer GetPlayerMatchPoints(CSmScore _Score) {
	return Scores::GetPlayerMatchPoints(_Score);
}

Integer GetPlayerRoundFlagScores(CSmScore _Score) {
	return PlayerStatistics::GetPlayerRoundInteger(_Score, C_PlayerStatisticsKey_FlagsScored);
}

Integer GetPlayerMapFlagScores(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMapInteger(_Score, C_PlayerStatisticsKey_FlagsScored);
}

Integer GetPlayerMatchFlagScores(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMatchInteger(_Score, C_PlayerStatisticsKey_FlagsScored);
}

Integer GetPlayerRoundFlagScoreAssists(CSmScore _Score) {
	return PlayerStatistics::GetPlayerRoundInteger(_Score, C_PlayerStatisticsKey_FlagScoreAssists);
}

Integer GetPlayerMapFlagScoreAssists(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMapInteger(_Score, C_PlayerStatisticsKey_FlagScoreAssists);
}

Integer GetPlayerMatchFlagScoreAssists(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMatchInteger(_Score, C_PlayerStatisticsKey_FlagScoreAssists);
}

Integer GetPlayerRoundFlagSteals(CSmScore _Score) {
	return PlayerStatistics::GetPlayerRoundInteger(_Score, C_PlayerStatisticsKey_FlagsStolen);
}

Integer GetPlayerMapFlagSteals(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMapInteger(_Score, C_PlayerStatisticsKey_FlagsStolen);
}

Integer GetPlayerMatchFlagSteals(CSmScore _Score) {
	return PlayerStatistics::GetPlayerMatchInteger(_Score, C_PlayerStatisticsKey_FlagsStolen);
}

CSmScore[] Private_MapToScoreArray(Integer[CSmScore] _Array) {
	declare CSmScore[] Result;
	foreach (Score => Value in _Array) {
		Result.add(Score);
	}
	return Result;
}

CSmScore[] GetPlayerFlagsScoredMatchRanking() {
	declare Integer[CSmScore] FlagsScored;
	foreach (Score in Scores) {
		FlagsScored[Score] = GetPlayerMatchFlagScores(Score);
	}
	return Private_MapToScoreArray(FlagsScored.sortreverse());
}

CSmScore[] GetPlayerAssistsMatchRanking() {
	declare Integer[CSmScore] Assists;
	foreach (Score in Scores) {
		Assists[Score] = GetPlayerMatchFlagScoreAssists(Score);
	}
	return Private_MapToScoreArray(Assists.sortreverse());
}

CSmScore[] GetPlayerFlagsStealsMatchRanking() {
	declare Integer[CSmScore] FlagSteals;
	foreach (Score in Scores) {
		FlagSteals[Score] = GetPlayerMatchFlagSteals(Score);
	}
	return Private_MapToScoreArray(FlagSteals.sortreverse());
}

/* Net send scores */

Void Net_SendTeamScores() {
	for(Clan, 1, 2) {
		declare netwrite Integer Net_FlagRush_TeamRoundScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamRoundScore = Scores::GetClanRoundPoints(Clan);
		declare netwrite Integer Net_FlagRush_TeamMapScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamMapScore = TeamPointsProgression::GetClanRoundsWon(Clan);
		declare netwrite Integer Net_FlagRush_TeamMatchScore for Teams[Clan-1] = 0;
		Net_FlagRush_TeamMatchScore = TeamPointsProgression::GetClanMapsWon(Clan);
	}
}

Void Net_SendPlayerScore(CSmScore _Score) {
	declare netwrite Integer Net_FlagRush_Points_Match for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsScored_Match for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsScored_Map for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsScored_Round for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Match for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Map for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsStolen_Round for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Match for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Map for _Score = 0;
	declare netwrite Integer Net_FlagRush_FlagsAssists_Round for _Score = 0;

	Net_FlagRush_Points_Match = GetPlayerMatchPoints(_Score);

	Net_FlagRush_FlagsScored_Match = GetPlayerMatchFlagScores(_Score);
	Net_FlagRush_FlagsScored_Map = GetPlayerMapFlagScores(_Score);
	Net_FlagRush_FlagsScored_Round = GetPlayerRoundFlagScores(_Score);

	Net_FlagRush_FlagsStolen_Match = GetPlayerMatchFlagSteals(_Score);
	Net_FlagRush_FlagsStolen_Map = GetPlayerMapFlagSteals(_Score);
	Net_FlagRush_FlagsStolen_Round = GetPlayerRoundFlagSteals(_Score);

	Net_FlagRush_FlagsAssists_Match = GetPlayerMatchFlagScoreAssists(_Score);
	Net_FlagRush_FlagsAssists_Map = GetPlayerMapFlagScoreAssists(_Score);
	Net_FlagRush_FlagsAssists_Round = GetPlayerRoundFlagScoreAssists(_Score);
}

Void Net_SendScores() {
	Net_SendTeamScores();
	foreach (Score in Scores) Net_SendPlayerScore(Score);
}

/* Events */

Void OnClanRoundWin(Integer _Clan) {
	TeamPointsProgression::AddClanRoundsWon(_Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnClanMapWin(Integer _Clan) {
	TeamPointsProgression::AddClanMapsWon(_Clan, 1);
	// Don't send updates scores directly; Instead send when showing scoreboard to show change
}

Void OnPlayerScoresFlag(CSmScore _ScorerScore, CSmScore _AssistScore) {
	PlayerStatistics::AddPlayerRoundInteger(_ScorerScore, C_PlayerStatisticsKey_FlagsScored, 1);
	Scores::AddPlayerRoundPoints(_ScorerScore, C_PointsValue_ScoreFlag);
	Scores::AddClanRoundPoints(_ScorerScore.TeamNum, 1); // TeamNum == Clan == Teams[]_Index + 1
	Net_SendPlayerScore(_ScorerScore);
	Net_SendTeamScores();

	if (_AssistScore != Null) {
		PlayerStatistics::AddPlayerRoundInteger(_AssistScore, C_PlayerStatisticsKey_FlagScoreAssists, 1);
		Scores::AddPlayerRoundPoints(_AssistScore, C_PointsValue_ScoreFlagAssist);
		Net_SendPlayerScore(_AssistScore);
	}
}

Void OnPlayerScoresFlag(CSmScore _ScorerScore) {
	OnPlayerScoresFlag(_ScorerScore, Null);
}

Void OnPlayerStealsFlag(CSmScore _NewCarrierScore) {
	PlayerStatistics::AddPlayerRoundInteger(_NewCarrierScore, C_PlayerStatisticsKey_FlagsStolen, 1);
	Scores::AddPlayerRoundPoints(_NewCarrierScore, C_PointsValue_StealFlag);
	Net_SendPlayerScore(_NewCarrierScore);
}

Void OnPlayerPassesFlag(CSmScore _OldCarrierScore) {
	PlayerStatistics::AddPlayerRoundInteger(_OldCarrierScore, C_PlayerStatisticsKey_FlagTeamPass, 1);
}

Void OnPlayerCarriesFlag(CSmScore _CarrierScore) {
	PlayerStatistics::AddPlayerRoundInteger(_CarrierScore, C_PlayerStatisticsKey_FlagPossession, Period);
}

Void OnPlayerRespawn(CSmScore _Score) {
	PlayerStatistics::AddPlayerRoundInteger(_Score, C_PlayerStatisticsKey_Respawn, 1);
}

Void OnPlayerChangesVehicle(CSmScore _Score) {
	PlayerStatistics::AddPlayerRoundInteger(_Score, C_PlayerStatisticsKey_VehicleChanged, 1);
}

Void OnPlayerDistanceDriven(CSmScore _Score, Real _Distance) {
	PlayerStatistics::AddPlayerRoundReal(_Score, C_PlayerStatisticsKey_DistanceDriven, _Distance);
}

/* Progression */

Void Clear(Integer _Level) {
	Scores::Clear(_Level);
	PlayerStatistics::Clear(_Level);
	TeamPointsProgression::Clear(_Level);
	Net_SendScores();
}

Void Clear() {
	Clear(C_Level_Match);
	Net_SendScores();
}

Void StartMatch() {
	Scores::StartMatch();
	PlayerStatistics::StartMatch();
	TeamPointsProgression::StartMatch();
	Net_SendScores();
}

Void EndMatch() {
	Scores::EndMatch();
	PlayerStatistics::EndMatch();
	TeamPointsProgression::EndMatch();
	Net_SendScores();
}

Void StartMap() {
	Scores::StartMap();
	PlayerStatistics::StartMap();
	TeamPointsProgression::StartMap();
	Net_SendScores();
}

Void EndMap() {
	Scores::EndMap();
	PlayerStatistics::EndMap();
	TeamPointsProgression::EndMap();
	Net_SendScores();
}

Void StartRound() {
	Scores::StartRound();
	PlayerStatistics::StartRound();
	TeamPointsProgression::StartRound();
	Net_SendScores();
}

Void EndRound() {
	Scores::EndRound();
	PlayerStatistics::EndRound();
	TeamPointsProgression::EndRound();
	Net_SendScores();
}

Void Yield() {
	Scores::Yield();
}

Void Unload() {
	Scores::Unload();
}

Void Load() {
	Scores::Load();
}