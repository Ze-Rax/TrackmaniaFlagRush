#Include "ColorLib" as CL

#Include "Libs/Zrx/ModeLibs/Common/ModeUtils.Script.txt"									as ModeUtils
#Include "Libs/Zrx/ModeLibs/Common/EventFeed.Script.txt"									as EventFeed

#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"					as FlagRush_Common
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt"						as FlagRush_Teams
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt"	as FlagRush_Colors
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/Sound.Script.txt"					as FlagRush_Sound

#Const C_ChatPrefix		"[FlagRush]"

#Const C_MessagePriority_Default			1
#Const C_MessagePriority_Event				2
#Const C_MessagePriority_Progression	3

Void Private_ClearAllMessages() {
	UIManager.UIAll.ClearMessages();
	foreach (Player in AllPlayers) {
		declare CUIConfig UI <=> UIManager.GetUI(Player);
		if (UI != Null) {
			UI.ClearMessages();
		}
	}
}

Vec3 Private_GetTeamColor(Integer Clan) {
	declare netwrite Vec3 Net_FlagRush_MidColor for Teams[Clan - 1];
	return Net_FlagRush_MidColor;
}

Text Private_GetTeamColorCode(Integer Clan) {
	return """${{{ CL::RgbToHex3(Private_GetTeamColor(Clan)) }}}""";
}

Text Private_GetColoredTeamName(Integer Clan) {
	return """$<${{{ CL::RgbToHex3(Private_GetTeamColor(Clan)) }}}{{{ Teams[Clan-1].Name }}}$>""";
}

Text Private_GetColoredPlayerName(CSmPlayer Player) {
	return """$<{{{ Private_GetTeamColorCode(Player.CurrentClan) }}}{{{ Player.User.Name }}}$>""";
}

Void Private_QueueBigMessage(Text Message, Integer Duration, Integer Priority, CUIConfig::EUISound Sound) {
	Private_ClearAllMessages();
	UIManager.UIAll.QueueMessage(Duration, Priority, CUIConfig::EMessageDisplay::Big, Message, Sound, 0);
}

Void Private_SendChat(Text Message) {
	UIManager.UIAll.SendChat("""{{{ C_ChatPrefix }}} $<{{{ Message }}}$>""");
}

Void MatchWin(Integer WinnerClan, Integer Duration) {
	declare Text Message = """{{{ Private_GetColoredTeamName(WinnerClan) }}} won the match""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndMatch);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void MatchDraw(Integer Duration) {
	declare Text Message = """Match draw""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndMatch);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void MapWin(Integer WinnerClan, Integer Duration) {
	declare Text Message = """{{{ Private_GetColoredTeamName(WinnerClan) }}} won the map""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void MapDraw(Integer Duration) {
	declare Text Message = "Map draw";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void MapSkip(Integer Duration) {
	declare Text Message = "Map skipped";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void RoundStart(Integer NbRound, Integer Duration) {
	declare Text Message = """Round {{{ NbRound }}} start""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void RoundWin(Integer WinnerClan, Integer Duration)  {
	declare Text Message = """{{{ Private_GetColoredTeamName(WinnerClan) }}} won the round""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void RoundDraw(Integer Duration) {
	declare Text Message = "Round draw";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void RoundSkip(Integer Duration) {
	declare Text Message = "Round skipped";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::EndRound);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void OvertimeStart(Integer Duration) {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}Overtime$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void WarmUpStart(Integer Duration) {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}WarmUp$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void WarmUpEnd(Integer Duration) {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}WarmUp end$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void WarmUpWaitForApproval() {
	declare Text Message = """$<${{{CL::RgbToHex3(FlagRush_Colors::C_Warning)}}}Waiting for admin confirmation to start the match.$>""";
	Private_SendChat(Message);
}

Void WarmUpApproved() {
	declare Text Message = """$<${{{CL::RgbToHex3(FlagRush_Colors::C_Success)}}}The match can start.$>""";
	Private_SendChat(Message);
}

Void PauseStart(Integer Duration) {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}The round was paused$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void PauseEnd(Integer Duration) {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}The round continues$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::PhaseChange);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void FlagPickUp(CSmPlayer Player, Integer Duration) {
	declare Text Message = """{{{ Private_GetColoredPlayerName(Player) }}} has the $<{{{ Private_GetTeamColorCode(Player.CurrentClan) }}}flag$>""";
	declare Vec3 TeamColor = Private_GetTeamColor(Player.CurrentClan);
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Event, CUIConfig::EUISound::Checkpoint);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Flag, TeamColor);
}

Void FlagScored(CSmPlayer Scorer, Integer Duration) {
	declare Text Message = """{{{ Private_GetColoredPlayerName(Scorer) }}} scored for {{{ Private_GetColoredTeamName(Scorer.CurrentClan) }}}""";
	declare Vec3 TeamColor = Private_GetTeamColor(Scorer.CurrentClan);
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Event, CUIConfig::EUISound::Finish);
	FlagRush_Sound::Play(["file://Media/Manialinks/Nadeo/CMGame/Utils/AudioManager/Game/KnockOutPlayer_01.wav", "file://Media/Manialinks/Nadeo/CMGame/Utils/AudioManager/Game/ShowWinners.wav"]);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Flag, TeamColor);
}

Void FlagDropped(CUser OldCarrierUser, Integer Duration) {
	declare CSmScore OldCarrierScore <=> ModeUtils::GetScore(OldCarrierUser.Login);
	declare Text PlayerName = """$<{{{ Private_GetTeamColorCode(OldCarrierScore.TeamNum) }}}{{{ OldCarrierScore.User.Name }}}$>""";
	declare Text Message = """{{{ PlayerName }}} dropped the flag$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Event, CUIConfig::EUISound::Checkpoint);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Flag);
}

Void FlagReset(Integer Duration) {
	declare Text Message = "The flag was reset";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Event, CUIConfig::EUISound::Warning);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Flag);
}

Void FlagCarrierTeleport() {
	declare Text Message = "Flag carrier teleported!";
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Info);
}

Void PlayerOutOfBounds(CSmPlayer Player) {
	declare Text Message = """{{{ Private_GetColoredPlayerName(Player) }}} went out of bounds""";
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Error);
	// Play a Sound for the dead player
	declare CUIConfig UI = UIManager.GetUI(Player);
	if (UI != Null) UI.QueueMessage(2000, 1, CUIConfig::EMessageDisplay::Small, "", CUIConfig::EUISound::Capture, 1);
}

Void PlayerRespawn(CSmPlayer Player) {
	declare Text Message = """{{{ Private_GetColoredPlayerName(Player) }}} respawned""";
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Reload);
}

Void TimeLimitSecondsRemaining(Integer SecondsRemaining, Integer Duration) {
	declare Text Message ="""$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}{{{ SecondsRemaining }}} seconds remaining$>""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Event, CUIConfig::EUISound::TiePoint);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Chrono);
}

Void TimeLimitEnd(Integer Duration) {
	declare Text Message = """Time is up""";
	Private_QueueBigMessage(Message, Duration, C_MessagePriority_Progression, CUIConfig::EUISound::VictoryPoint);
	EventFeed::SendMessage(Message, EventFeed::C_IconName_Chrono);
}

Void Welcome(CSmPlayer Player, Text Version) {
	declare CUIConfig UI = UIManager.GetUI(Player);
	UI.SendChat("""Welcome to $l[https://discord.gg/J6ApdyRqEZ]$44f「$fffFlagRush$f44」$l $g[{{{Version}}}]!""");
}

Void CriticalSettingUpdate_RestartTurn() {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}A critical setting was updated! Restarting the the current turn...$>""";
	Private_SendChat(Message);
}

Void InvalidMap() {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Error) }}}The map does not conform to the FlagRush map specification. Skipping...$>""";
	Private_SendChat(Message);
}

Void AllPlayersLeft_SkipMatch() {
	declare Text Message = """$<${{{ CL::RgbToHex3(FlagRush_Colors::C_Warning) }}}All players left, skipping match...$>""";
	Private_SendChat(Message);
}