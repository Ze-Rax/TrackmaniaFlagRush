#Include "ColorLib" as CL
#Include "Libs/Zrx/ModeLibs/FlagRush/Flag.Script.txt" as Flag
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt" as FlagRush_Colors
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UIShared.Script.txt" as FlagRush_UIShared

Text GetManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_ScoresHeader">
	{{{ FlagRush_UIShared::GetGradientFramemodel() }}}

	<frame id="main" pos="0 82.5">
		<frame id="team0" z-index="1">
			<frame id="background" size="60 7.5" pos="-30" halign="center" valign="center">
				<frameinstance modelid="gradient" id="gradient" scale="0.6"/>
			</frame>
			<label pos="-32.5 -0.5" z-index="1" size="35 8" text="Team Blue" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" halign="center" textsize="4" id="name" textfont="GameFontRegular" valign="center2"/>

			<quad pos="-60 " z-index="1" size="10 8" valign="center" id="background-score" style="UICommon64_1" substyle="BgFrame1" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_TeamBlue) }}}" halign="center"/>
			<label pos="-60 -0.5" z-index="2" size="11.8 9" text="0" halign="center" valign="center2" textsize="5" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" id="score" textfont="GameFontBlack" />
		</frame>

		<frame id="team1" z-index="1">
			<frame id="background" size="60 7.5" pos="30" halign="center" valign="center">
				<frameinstance modelid="gradient" id="gradient" scale="0.6" rot="180"/>
			</frame>
			<label pos="32.5 -0.5" z-index="1" size="35 8" text="Team Red" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" halign="center" textsize="4" id="name" textfont="GameFontRegular" valign="center2"/>

			<quad pos="60 " z-index="1" size="10 8" valign="center" id="background-score" style="UICommon64_1" substyle="BgFrame1" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_TeamRed) }}}" halign="center"/>
			<label pos="60 -0.5" z-index="2" size="11.8 9" text="0" halign="center" valign="center2" textsize="5" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" id="score" textfont="GameFontBlack" />
		</frame>

		<frame id="timer" z-index="2">
			<quad pos="0 0" size="20 8" id="background" valign="center" z-index="-1" style="UICommon64_1" substyle="BgFrame1" halign="center" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralDark) }}}"/>
			<label pos="0 0" z-index="1" size="20 8" text="00:00" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" id="timelimit" halign="center" valign="center" textsize="2" textfont="GameFontSemiBold"/>
			<quad pos="0 0" z-index="1" size="8 8" halign="center" valign="center" style="UICommon64_1" substyle="Flag_light" id="icon"/>
		</frame>

		<frame id="carrier" pos="0 -6.5">
			<frame id="background">
				<quad pos="-24 0" z-index="-1" size="6 6" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralDark) }}}" halign="center" rot="90"/>
				<quad pos="0 0" z-index="-1" size="50 6" opacity="1" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralDark) }}}" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame2"/>
				<quad pos="24 0" z-index="-1" size="6 6" valign="center" style="UICommon64_1" substyle="BgFrame1" colorize="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralDark) }}}" halign="center"/>
			</frame>

			<label pos="0 0.5" z-index="1" size="70 8" text="Playername" textcolor="{{{ CL::RgbToHex6(FlagRush_Colors::C_NeutralLight) }}}" id="name" halign="center" valign="center" textsize="3" textfont="GameFontRegular" />
		</frame>
	</frame>

	<script><!--
	#Include "MathLib" as ML
	#Include "TextLib" as TL

	#Struct K_BackgroundGradient {
		CMlQuad Base;
		CMlQuad LeftGradient;
		CMlQuad RightGradient;
	}

	#Struct K_TeamArea {
		CMlFrame Frame;
		K_BackgroundGradient BackgroundGradient;
		CMlLabel TeamName;
		CMlQuad ScoreBackground;
		CMlLabel Score;
	}

	#Struct K_Timer {
		CMlFrame Frame;
		CMlLabel TimerLabel;
		CMlQuad Icon;
	}

	#Struct K_Carrier {
		CMlFrame Frame;
		CMlLabel CarrierLabel;
	}

	{{{ Flag::DumpNetFlagStructs() }}}

	declare K_TeamArea[] TeamAreas;
	declare K_Timer Timer;
	declare K_Carrier Carrier;

	{{{ FlagRush_UIShared::GetTeamColorNetreadFunctions() }}}

	/**
	 * Assigns all needed MlControl references.
	 */
	Void AssignMlControlReferences() {
		TeamAreas = [];
		for (Team, 0, 1) {
			declare CMlFrame TeamAreaFrame = (Page.GetFirstChild("team" ^ Team) as CMlFrame);

			declare CMlFrame GradientFrame = (TeamAreaFrame.GetFirstChild("gradient") as CMlFrame);
			declare K_BackgroundGradient BackgroundGradient = K_BackgroundGradient {
				Base = (GradientFrame.GetFirstChild("base") as CMlQuad),
				LeftGradient = (GradientFrame.GetFirstChild("gradient-left") as CMlQuad),
				RightGradient = (GradientFrame.GetFirstChild("gradient-right") as CMlQuad)
			};

			TeamAreas.add(K_TeamArea {
				Frame = TeamAreaFrame,
				BackgroundGradient = BackgroundGradient,
				TeamName = (TeamAreaFrame.GetFirstChild("name") as CMlLabel),
				ScoreBackground = (TeamAreaFrame.GetFirstChild("background-score") as CMlQuad),
				Score = (TeamAreaFrame.GetFirstChild("score") as CMlLabel)
			});
		}

		declare CMlFrame TimerFrame = (Page.GetFirstChild("timer") as CMlFrame);
		Timer = K_Timer {
			Frame = TimerFrame,
			TimerLabel = (TimerFrame.GetFirstChild("timelimit") as CMlLabel),
			Icon = (TimerFrame.GetFirstChild("icon") as CMlQuad)
		};

		declare CMlFrame CarrierFrame = (Page.GetFirstChild("carrier") as CMlFrame);
		Carrier = K_Carrier {
			Frame = CarrierFrame,
			CarrierLabel = (CarrierFrame.GetFirstChild("name") as CMlLabel)
		};
	}

	/**
	 * Set the default values for all controls.
	 */
	Void InitMlControls() {
		for (Clan , 1, 2) {
			TeamAreas[Clan - 1].BackgroundGradient.Base.BgColor = GetTeamMidColor(Clan);
			TeamAreas[Clan - 1].BackgroundGradient.LeftGradient.ModulateColor = GetTeamDarkColor(Clan);
			TeamAreas[Clan - 1].BackgroundGradient.RightGradient.ModulateColor = GetTeamLightColor(Clan);
			TeamAreas[Clan - 1].ScoreBackground.ModulateColor = GetTeamMidColor(Clan);
		}
	}

	/**
	 * Updates the round scores (flags scored) for the teams.
	 */
	Void UpdateTeams() {
		for (Team, 0, 1) {
			declare netread Integer Net_FlagRush_TeamRoundScore for Teams[Team];
			TeamAreas[Team].Score.Value = TL::ToText(Net_FlagRush_TeamRoundScore);
			TeamAreas[Team].TeamName.Value = Teams[Team].Name;
		}
		InitMlControls();
	}

	/**
	 * Updates the center timer.
	 */
	Void UpdateTimer() {
		declare netread Integer Net_EndTime for Teams[0];
		declare netread Boolean FlagRush_Net_WarmUpIsRunning for Teams[0];
		declare netread Boolean FlagRush_Net_OvertimeIsRunning for Teams[0];

		declare Integer RoundTimeLeft = Net_EndTime - GameTime;
		declare Boolean IsTimeLeft = RoundTimeLeft > 0;
		Timer.TimerLabel.TextSizeReal = 2.;
		Timer.TimerLabel.AutoNewLine = False;
		if(IsTimeLeft) {
			Timer.Icon.Hide();
			Timer.TimerLabel.Show();
			Timer.TimerLabel.Value = TL::TimeToText(
				ML::Max(RoundTimeLeft, 0),
				RoundTimeLeft < 10000 && !FlagRush_Net_WarmUpIsRunning
			);

			if (FlagRush_Net_WarmUpIsRunning) {
				Timer.TimerLabel.TextColor = {{{ FlagRush_Colors::C_Warning }}};
			} else if (IsTimeLeft && RoundTimeLeft / 1000 < 30) {
				Timer.TimerLabel.TextColor = {{{ FlagRush_Colors::C_Error }}};
			} else {
				Timer.TimerLabel.TextColor = {{{ FlagRush_Colors::C_NeutralLight }}};
			}
		} else if (FlagRush_Net_OvertimeIsRunning && !FlagRush_Net_WarmUpIsRunning && Net_EndTime >= 0) {
			Timer.Icon.Hide();
			Timer.TimerLabel.Show();
			Timer.TimerLabel.TextSizeReal = 1.5;
			Timer.TimerLabel.AutoNewLine = True; // Else multi line string won't be centered
			Timer.TimerLabel.Value = "Overtime" ^ "\n" ^ "+" ^ TL::TimeToText(-RoundTimeLeft);
			Timer.TimerLabel.TextColor = {{{ FlagRush_Colors::C_Warning }}};
		} else {
			declare netread K_Net_Flag FlagRush_Net_Flag for Teams[0] = K_Net_Flag{};
			Timer.Icon.Colorize = GetTeamMidColor(FlagRush_Net_Flag.Location.Player.Clan);
			Timer.Icon.Show();
			Timer.TimerLabel.Hide();
		}
	}

	Text ResolveFlagLocationName() {
		declare netread K_Net_Flag FlagRush_Net_Flag for Teams[0] = K_Net_Flag{};
		if (FlagRush_Net_Flag.Location.Player.Login != "") {
			foreach (Player in Players) {
				if (Player.User.Login == FlagRush_Net_Flag.Location.Player.Login) {
					return Player.User.Name;
				}
			}
			return FlagRush_Net_Flag.Location.Player.Login; // Disconnected?
		} else if (FlagRush_Net_Flag.Location.IsAtLandmark) {
			return "Flagspawn";
		}
		return "Dropped";
	}

	/**
	 * Updates the flag carrier display.
	 */
	Void UpdateCarrier() {
		declare netread Boolean FlagRush_Net_WarmUpIsRunning for Teams[0];
		if (FlagRush_Net_WarmUpIsRunning) {
			Carrier.CarrierLabel.Value = "WarmUp";
			Carrier.CarrierLabel.TextColor = {{{ FlagRush_Colors::C_Warning }}};
		} else {
			declare netread K_Net_Flag FlagRush_Net_Flag for Teams[0] = K_Net_Flag{};
			Carrier.CarrierLabel.Value = ResolveFlagLocationName();
			Carrier.CarrierLabel.TextColor = GetTeamMidColor(FlagRush_Net_Flag.Location.Player.Clan);
		}
	}

	main() {

		AssignMlControlReferences();
		InitMlControls();

		while (True) {
			yield;

			UpdateTeams();
			UpdateTimer();
			UpdateCarrier();
		}
	}
	--></script>
	</manialink>
	""";
}