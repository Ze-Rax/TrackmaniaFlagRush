// #RequireContext CMlScriptIngame
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UIShared.Script.txt" 								as UIShared
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt"							as FlagRush_Teams

#Struct FlagRush_Teams::K_TeamSkin as K_TeamSkin

Void Toggle(Boolean Status) {
	declare netwrite Integer Net_FlagRush_MVPStamp for Teams[0];
	declare netwrite Boolean Net_FlagRush_MVPShow for Teams[0];
	Net_FlagRush_MVPStamp = Now;
	Net_FlagRush_MVPShow = Status;
}

Text GetManialink() {
	declare K_TeamSkin[Integer] TeamSkins = FlagRush_Teams::GetTeamSkins();

	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_MVP">
		<framemodel id="player">
			<label id="name" pos="0 0" z-index="0" size="80 8" text="PlayerName" textfont="GameFontBlack" textsize="6" halign="center" valign="center2"/>
			<label id="score" pos="0 -6" z-index="0" size="80 8" text="# Points" textfont="GameFontRegular" textsize="4" halign="center" valign="center"/>
			<label id="description" pos="0 -12" z-index="0" size="80 16" text="" textfont="GameFontRegular" textsize="2" halign="center" valign="center2"/>
		</framemodel>

		<frame id="mvp-frame" z-index="-1" hidden="1">
			<frame id="title-frame" pos="0 40" halign="center" valign="center">
				<label id="title" z-index="0" size="150 12" text="M$n $mV$n $mP" textfont="GameFontExtraBold" textsize="22" halign="center" valign="center2"/>
			</frame>
			<quad id="car1" pos="0 -22" z-index="0" size="55 42" bgcolor="0000" halign="center" valign="center" scriptevents="1"/>
			<quad id="car2" pos="-61 -9.5" z-index="0" size="55 37" bgcolor="0000" halign="center" valign="center" scriptevents="1"/>
			<quad id="car3" pos="61 -9.5" z-index="0" size="55 37" bgcolor="0000" halign="center" valign="center" scriptevents="1"/>

			<frameinstance id="mvp0" pos="0 -40" modelid="player" hidden="1" />
			<frameinstance id="mvp1" pos="-65 -25" modelid="player" hidden="1" />
			<frameinstance id="mvp2" pos="65 -25" modelid="player" hidden="1" />
			<quad id="background" pos="0 0" z-index="-2" size="320 200" image="file:///Media/Manialinks/Nadeo/TMNext/Menus/PageGarage/Garage_background.dds" opacity="1" halign="center" valign="center" />
			<frame size="360 80" valign="center" halign="center" pos="0 -10">
				<camera id="camera" pos="0 10" size="360 180" valign="center" halign="center" />
			</frame>
		</frame>

	<script><!--
	#Include "AnimLib" as AL

	#Struct K_Item {
		Ident ItemId;
		Vec3 Position;
	}

	declare Ident SceneId;
	declare K_Item[] Items;

	{{{ UIShared::GetTeamColorNetreadFunctions() }}}

	/**
	* Get matchpoints, order is from z to a
	*/
	Integer[CSmScore] GetMatchPoints() {
		declare Integer[CSmScore] Output;
		foreach(Score in Scores) {
			declare netread Integer Net_FlagRush_Points_Match for Score;
			Output[Score] = Net_FlagRush_Points_Match;
		}
		return Output.sortreverse();
	}

	/**
	* Get Best player of FlagsScored
	*/
	CSmScore GetScoreMostFlagsScored() {
		declare CSmScore BestScore;
		declare Integer MaxFlagsScored = 0;
		foreach (Score in Scores) {
			declare netread Integer Net_FlagRush_FlagsScored_Match for Score;
			if (Net_FlagRush_FlagsScored_Match > MaxFlagsScored) {
				BestScore <=> Score;
				MaxFlagsScored = Net_FlagRush_FlagsScored_Match;
			}
		}
		return BestScore;
	}

	/**
	* Get Best player of FlagsStolen
	*/
	CSmScore GetScoreMostFlagsStolen() {
		declare CSmScore BestScore;
		declare Integer MaxFlagStolen = 0;
		foreach(Score in Scores) {
			declare netread Integer Net_FlagRush_FlagsStolen_Match for Score;
			if (Net_FlagRush_FlagsStolen_Match > MaxFlagStolen) {
				BestScore <=> Score;
				MaxFlagStolen = Net_FlagRush_FlagsStolen_Match;
			}
		}
		return BestScore;
	}

	/**
	* Maps range of numbers to another
	*/
	Real MapRange(Real Value, Real FromLow, Real FromHigh, Real ToLow, Real ToHigh) {
		return ToLow + (ToHigh - ToLow) * (Value - FromLow) / (FromHigh - FromLow);
	}

	/**
	* Render PlayerFrame
	*/
	Void RenderPlayer(CMlFrame Frame, CSmScore Score) {
		Frame.Show();
		declare CMlLabel LblName = (Frame.GetFirstChild("name") as CMlLabel);
		declare CMlLabel LblScore = (Frame.GetFirstChild("score") as CMlLabel);
		declare CMlLabel LblDesc = (Frame.GetFirstChild("description") as CMlLabel);
		declare netread Integer Net_FlagRush_Points_Match for Score;
		LblDesc.Value = "";

		if (Score == GetScoreMostFlagsStolen()) {
			declare netread Integer Net_FlagRush_FlagsStolen_Match for Score;
			LblDesc.Value ^="Most Flags Stolen ("^Net_FlagRush_FlagsStolen_Match^") \n";
		}

		if (Score == GetScoreMostFlagsScored()) {
			declare netread Integer Net_FlagRush_FlagsScored_Match for Score;
			LblDesc.Value ^="Most Flags Scored ("^Net_FlagRush_FlagsScored_Match^")";
		}

		LblName.Value = Score.User.Name;
		LblScore.Value = Net_FlagRush_Points_Match ^ " Points";

	}

	Void RemoveItems() {
		foreach (Key => Item in Items) {
			if (Item.ItemId != NullId) {
				MenuSceneMgr.ItemDestroy(SceneId, Item.ItemId);
			}
		}
		Items.clear();
	}

	Void ShowScene() {
		if (SceneId != NullId) return;

		declare CMlCamera Camera = (Page.GetFirstChild("camera") as CMlCamera);
		declare CMlFrame Frame = (Page.GetFirstChild("mvp-frame") as CMlFrame);
		declare CMlQuad Background = (Page.GetFirstChild("background") as CMlQuad);
		declare CMlLabel Title = (Page.GetFirstChild("title") as CMlLabel);
		declare CMlFrame TitleFrame = (Page.GetFirstChild("title-frame") as CMlFrame);
		declare Integer AnimStart = Now;
		declare Text FlagRush_AudioUrl = "file://Media/Sounds/Nadeo/CommonLibs/Game/trophysolo_argent.wav";
		Background.Opacity = 0.;
		Title.Opacity = 0.;
		TitleFrame.RelativeScale = 5.5;

		RemoveItems();

		SceneId = MenuSceneMgr.SceneCreate("Empty");
		MenuSceneMgr.CameraSetLocation(SceneId, <0., 3.3, -14.>, 9., 35.);
		MenuSceneMgr.PlaneReflectEnable(SceneId, 0.1, Null, Null, Null, Null, 0.);

		/* Add items to the scene */
		declare Vec3[] CarPositions = [	<  0.0, 0.0, 0.0 >,
			<  3.5, 0.0, 2.0 >,
			< -3.5, 0.0, 2.0 >
		];

		declare Integer[CSmScore] MatchScores = GetMatchPoints();
		declare Integer Index = 0;
		foreach (PlayerScore => Points in MatchScores) {
			if (Index > 2) break;
			if (PlayerScore != Null) {
				declare CMlFrame Frame = (Page.GetFirstChild("mvp"^Index) as CMlFrame);
				declare Text[] TeamSkinName = [ "{{{ TeamSkins[0].SkinName }}}", "{{{ TeamSkins[1].SkinName }}}"];
				declare Text[] TeamSkinUrl = [ "{{{ TeamSkins[0].SkinUrl }}}", "{{{ TeamSkins[1].SkinUrl }}}"];
				declare Text SkinName = PlayerScore.User.Model_CarSport_SkinName;
				declare Text SkinUrl = PlayerScore.User.Model_CarSport_SkinUrl;

				if (TeamSkinName.existskey(PlayerScore.TeamNum-1)) {
							SkinName = TeamSkinName[PlayerScore.TeamNum-1];
							SkinUrl = TeamSkinUrl[PlayerScore.TeamNum-1];
				} else {
						SkinName = "{{{ TeamSkins[0].SkinName }}}";  // just to be sure the file exists for the skin url...
				}

				declare ItemId = MenuSceneMgr.ItemCreate(SceneId, "CarSport", SkinName, SkinUrl);
				declare Pos = CarPositions[Index];
				Items.add(K_Item{ItemId = ItemId, Position = Pos});
				MenuSceneMgr.ItemSetLocation(SceneId, ItemId, Pos, 180., False);
				RenderPlayer(Frame, PlayerScore);
			}
			Index += 1;
		}

		Camera.Show();
		Frame.Show();
		Audio.PlaySoundEvent(FlagRush_AudioUrl, 1.);

		AnimMgr.Add(Background, "<quad opacity=\"1\" />", 1000, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(Title, "<elem opacity=\"1\" />", 350, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.AddChain(TitleFrame, "<elem scale=\"1\" />", 500, CAnimManager::EAnimManagerEasing::BackInOut);

		while(True) {
			yield;
			declare Real z1 = AL::Ease("QuintInOut", 1.*Now-AnimStart+1000, 140., -137., 5000.); 		// center car
			declare Real z2 = AL::Ease("QuintInOut", 1.*Now-AnimStart+1500, 140., -137.5, 5000.); 	// left car
			declare Real z3 = AL::Ease("QuintInOut", 1.*Now-AnimStart+2000, 140., -137.5, 5000.); 	// right car

			foreach (Key => Item in Items) {
				if (Item.ItemId == NullId) continue;
				switch (Key) {
					case 0: Items[Key].Position.Z = z1-3;
					case 1: Items[Key].Position.Z = z2;
					case 2: Items[Key].Position.Z = z3;
				}
				MenuSceneMgr.ItemSetLocation(SceneId, Item.ItemId, Item.Position, 180., False);
			}

			// break the inner loop after 4 seconds.
			if (Now - AnimStart > 4000) {
				break;
			}
		}
	}

	Void HideScene() {
		declare CMlCamera Camera = (Page.GetFirstChild("camera") as CMlCamera);
		declare CMlFrame Frame = (Page.GetFirstChild("mvp-frame") as CMlFrame);
		if (SceneId != NullId) {
			RemoveItems();
			MenuSceneMgr.SceneDestroy(SceneId);
			SceneId = NullId;
			Camera.Hide();
			Frame.Hide();
		}
	}

	main() {
		declare netread Integer Net_FlagRush_MVPStamp for Teams[0];
		declare netread Boolean Net_FlagRush_MVPShow for Teams[0];
		declare Integer LastUpdate = Net_FlagRush_MVPStamp;

		declare Boolean RotateEnabled;
		declare Real StartPosition;
		declare Text TargetCar = "car1";
		declare Real[Text] LastAngle = ["car1" => 0., "car2" =>0., "car3" => 0.];
		declare Integer[Text] StartJump = ["car1" => 0, "car2" => 0, "car3" => 0];
		declare Boolean LastMouseLeft = MouseLeftButton;
		declare K_Item Item;

		while(True) {
			yield;

			if (Net_FlagRush_MVPStamp > LastUpdate) {
				LastUpdate = Net_FlagRush_MVPStamp;
				if (Net_FlagRush_MVPShow) ShowScene();
				else HideScene();
			}

			if (SceneId == NullId) continue; // loop stops here if no scene is defined

			declare Integer I;
			foreach (Car => StartTime in StartJump) {
				if (StartTime != 0 && Now > StartTime ) {
					declare Real PosY = AL::Ease("BounceOut", 1.*Now-StartTime, 1. , -1., 750.);
					Item = Items[0];
					if(Items.existskey(I)) {
						Items[I].Position.Y = PosY;
						Item = Items[I];
					}
					MenuSceneMgr.ItemSetLocation(SceneId, Item.ItemId, Item.Position, 180.+LastAngle[Car], False);
					if (Now - StartTime > 750) {
						StartJump[Car] = 0;
					}
				}
				I += 1;
			}

			if (RotateEnabled) {
				declare Real Angle = MapRange(MouseX-StartPosition, -160., 160. , -180. , 180.) + LastAngle[TargetCar];
				Item = Items[0];
				switch (TargetCar) {
					case "car1": if(Items.existskey(0)) Item = Items[0];
					case "car2": if(Items.existskey(1)) Item = Items[1];
					case "car3": if(Items.existskey(2)) Item = Items[2];
				}

				MenuSceneMgr.ItemSetLocation(SceneId, Item.ItemId, Item.Position, 180.+Angle, False);

				if (MouseLeftButton != LastMouseLeft) {
					RotateEnabled = False;
					LastAngle[TargetCar] = Angle;
					continue;
				}
			} else {
				foreach (i => Item in Items) {
					declare Real Angle = LastAngle["car"^(i+1)] + MapRange(MouseX, -160., 160. , -7. , 7.);
					MenuSceneMgr.ItemSetLocation(SceneId, Item.ItemId, Item.Position, 180.+Angle, False);
				}
			}

			foreach (Event in PendingEvents) {
				if (Event.Type == CMlScriptEvent::Type::MouseClick) {
					if (MouseLeftButton) {
						RotateEnabled = True;
						StartPosition = MouseX;
						TargetCar = Event.ControlId;
					}
				}
				if (Event.Type == CMlScriptEvent::Type::MouseRightClick) {
					if (RotateEnabled) {
						StartJump[TargetCar] = Now;
					} else {
						StartJump[Event.ControlId] = Now;
					}
				}
			}

			LastMouseLeft = MouseLeftButton;
		}

	}
	--></script>
	</manialink>
	""";
}