//#RequireContext CSmMlScriptIngame

#Include "Libs/Nadeo/CMGame/Modes/Legacy/Layers2.Script.txt" as Layers

#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UIShared.Script.txt" as FlagRush_UIShared
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Map.Script.txt" as FlagRush_Map

#Const C_LayerName "FlagRush_MapMarkers"

#Const C_BaseMarkerFrameIdPrefix			"marker-base-team"
#Const C_FlagSpawnMarkerFrameIdPrefix	"marker-flag-spawn-"
#Const C_FlagSpawnMarkerFrameDefault	"marker-flag-defaultspawn"

#Const C_TeamBaseMarker_Box		<0., 2., 0.>
#Const C_FlagSpawnMarker_Box	<0., 2., 0.>

// Markers are automatically removed on map switch. Use IDs to prevent reference errors.
declare Ident[] G_FlagSpawnMarkerIds;
declare Ident[] G_BaseMarkerIds;

Text Private_GenerateBaseId(Integer _Clan, Integer _BaseIndex) {
	return """{{{ C_BaseMarkerFrameIdPrefix}}}{{{ _Clan }}}-{{{ _BaseIndex }}}""";
}

Text GetManialink() {
	declare Text BasesFrameInstancesXml;
	declare Integer NbBasesPerTeam = FlagRush_Map::GetBases(1).count;
	for(Clan, 1, 2) {
		for(I, 0, NbBasesPerTeam-1) {
			declare Text BaseId = Private_GenerateBaseId(Clan, I);
			BasesFrameInstancesXml ^= """<frameinstance modelid="model-marker-base" id="{{{ BaseId }}}" hidden="1"/>""";
		}
	}

	declare Text FlagSpawnMarkerFrameInstancesXml;
	for(I, 0, FlagRush_Map::GetFlagSpawns().count - 2) {
		FlagSpawnMarkerFrameInstancesXml ^= """<frameinstance modelid="model-marker-flagspawn" id="{{{ C_FlagSpawnMarkerFrameIdPrefix ^ I }}}" hidden="1"/>""";
	}

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="{{{ C_LayerName }}}">

	<framemodel id="model-marker-base">
		<label id="quad-icon" pos="0 0" z-index="1" size="10 10" text="" textsize="4.5" textemboss="1" halign="center" valign="center2"/>
	</framemodel>

	<framemodel id="model-marker-flagspawn">
		<quad id="quad-flag" pos="0" size="8 8" halign="center" valign="center" style="UICommon64_1" substyle="Flag_light"/>
		<quad id="quad-flag-dropshadow" pos="0.25 -0.25" z-index="-1" size="8 8" halign="center" valign="center" style="UICommon64_1" substyle="Flag_dark"/>
		<label id="label-order" pos="0 4" halign="center" valign="center2" text="0" textprefix="#" textsize="0.5" textfont="GameFontExtraBold" textemboss="1" hidden="1"/>
	</framemodel>

	<frame z-index="1">
		<frameinstance modelid="model-marker-flagspawn" id="{{{ C_FlagSpawnMarkerFrameDefault }}}" hidden="1"/>
		{{{ FlagSpawnMarkerFrameInstancesXml }}}
	</frame>
	<frame z-index="0">
		{{{ BasesFrameInstancesXml }}}
	</frame>

	<script><!--
		#Include "MathLib" as ML

		#Const C_BaseIcon_Attack ""
		#Const C_BaseIcon_Defend ""

		#Struct K_BaseMarker {
			CMlFrame Frame;
			CMlLabel Icon;
		}

		#Struct K_FlagSpawnMarker {
			CMlFrame Frame;
			CMlQuad Icon;
			CMlLabel Order;
		}

		declare K_BaseMarker[][Integer] G_TeamBaseMarkers;
		declare K_FlagSpawnMarker[] G_FlagSpawnMarkers;
		declare K_FlagSpawnMarker G_DefaultFlagSpawnMarker;

		{{{ FlagRush_UIShared::GetTeamColorNetreadFunctions() }}}

		Void Init() {
			// Team bases
			for (Clan, 1, 2) {
				G_TeamBaseMarkers[Clan] = [];
				for (I, 0, {{{NbBasesPerTeam-1}}}) {
					declare CMlFrame FrameMarkerBase = (Page.GetFirstChild("{{{ C_BaseMarkerFrameIdPrefix }}}" ^ Clan ^ "-" ^ I) as CMlFrame);
					declare CMlLabel Icon = (FrameMarkerBase.GetFirstChild("quad-icon") as CMlLabel);
					G_TeamBaseMarkers[Clan].add(K_BaseMarker{ Frame = FrameMarkerBase, Icon = Icon });
				}
			}

			// Flag spawns
			for(I, 0, {{{ FlagRush_Map::GetFlagSpawns().count - 2 }}}) {
				declare CMlFrame FlagSpawnFrame = (Page.GetFirstChild("{{{ C_FlagSpawnMarkerFrameIdPrefix }}}" ^ I) as CMlFrame);
				declare CMlQuad FlagSpawnIcon = (FlagSpawnFrame.GetFirstChild("quad-flag") as CMlQuad);
				declare CMlLabel FlagSpawnOrder = (FlagSpawnFrame.GetFirstChild("label-order") as CMlLabel);
				G_FlagSpawnMarkers.add(K_FlagSpawnMarker{ Frame = FlagSpawnFrame, Icon = FlagSpawnIcon, Order = FlagSpawnOrder});
			}

			declare CMlFrame FlagSpawnFrame = (Page.GetFirstChild("{{{ C_FlagSpawnMarkerFrameDefault }}}") as CMlFrame);
			declare CMlQuad FlagSpawnIcon = (FlagSpawnFrame.GetFirstChild("quad-flag") as CMlQuad);
			declare CMlLabel FlagSpawnOrder = (FlagSpawnFrame.GetFirstChild("label-order") as CMlLabel);
			G_DefaultFlagSpawnMarker = K_FlagSpawnMarker{ Frame = FlagSpawnFrame, Icon = FlagSpawnIcon, Order = FlagSpawnOrder};
			G_FlagSpawnMarkers.add(G_DefaultFlagSpawnMarker);

			G_DefaultFlagSpawnMarker.Order.Value = "1";
			G_DefaultFlagSpawnMarker.Order.Show();
		}

		Void UpdateBaseMarkers() {
			declare Integer UIClan = 0;
			if (GUIPlayer != Null) {
				UIClan = GUIPlayer.CurrentClan;
			} else if (InputPlayer != Null) {
				UIClan = InputPlayer.CurrentClan;
			}

			foreach (Clan => BaseMarkers in G_TeamBaseMarkers) {
				declare Boolean ShowDefenseIcon = UIClan == 0 || Clan == UIClan;
				declare Vec3 Color = GetTeamMidColor(Clan);
				foreach (BaseMarker in BaseMarkers) {
					BaseMarker.Icon.TextColor = Color;
					if (ShowDefenseIcon) {
						BaseMarker.Icon.Value = C_BaseIcon_Defend;
					} else {
						BaseMarker.Icon.Value = C_BaseIcon_Attack;
					}
				}
			}
		}

		main() {
			Init();
			while(True) {
				yield;
				UpdateBaseMarkers();
			}
		}
	--></script>
</manialink>
	""";
}

CUIConfigMarker Private_GetMarker(Ident _Id) {
	return UIManager.UIAll.Markers.get(_Id, Null);
}

Void Private_RemoveMarker(Ident _Id) {
	declare CUIConfigMarker Marker = Private_GetMarker(_Id);
	if (Marker != Null) {
		UIManager.UIAll.RemoveMarker(Marker);
	}
}

Void Private_RemoveAllMarkers() {
	foreach (Id in G_BaseMarkerIds) {
		Private_RemoveMarker(Id);
	}

	foreach (Id in G_FlagSpawnMarkerIds) {
		Private_RemoveMarker(Id);
	}
}

Void SetFlagSpawnMarkerVisibility(Boolean _Visible) {
	foreach (FlagSpawnMarkerId in G_FlagSpawnMarkerIds) {
		declare CUIConfigMarker FlagSpawnMarker = Private_GetMarker(FlagSpawnMarkerId);
		if (FlagSpawnMarker == Null) {
			continue;
		}

		if (_Visible) {
			FlagSpawnMarker.HudVisibility = CUIConfigMarker::EHudVisibility::WhenInFrustum;
		} else {
			FlagSpawnMarker.HudVisibility = CUIConfigMarker::EHudVisibility::Never;
		}
	}
}

Void ShowFlagSpawnMarkers() {
	SetFlagSpawnMarkerVisibility(True);
}

Void HideFlagSpawnMarkers() {
	SetFlagSpawnMarkerVisibility(False);
}

Void Show() {
	Layers::Show(C_LayerName);
}

Void Hide() {
	Layers::Hide(C_LayerName);
}

Void Update() {
	Private_RemoveAllMarkers();
	Layers::Update(C_LayerName, GetManialink());

	// Bases
	G_BaseMarkerIds = [];
	for(Clan, 1, 2) {
		for(BaseIndex, 0, FlagRush_Map::GetBases(Clan).count -1) {
			declare CUIConfigMarker MarkerBase = UIManager.UIAll.AddMarker(FlagRush_Map::GetBases(Clan)[BaseIndex]);
			MarkerBase.HudVisibility = CUIConfigMarker::EHudVisibility::WhenInFrustum;
			MarkerBase.ManialinkFrameId = Private_GenerateBaseId(Clan, BaseIndex);
			MarkerBase.Box = C_TeamBaseMarker_Box;
			G_BaseMarkerIds.add(MarkerBase.Id);
		}
	}

	// Flag spawn
	G_FlagSpawnMarkerIds = [];
	declare Integer Index = 0;
	foreach(FlagSpawn in FlagRush_Map::GetFlagSpawns()) {
		declare CUIConfigMarker Marker = UIManager.UIAll.AddMarker(FlagSpawn);
		if (FlagSpawn == FlagRush_Map::GetDefaultFlagSpawn()) {
			Marker.ManialinkFrameId = C_FlagSpawnMarkerFrameDefault;
		} else {
			Marker.ManialinkFrameId = C_FlagSpawnMarkerFrameIdPrefix ^ Index;
			Index += 1;
		}
		Marker.Box = C_FlagSpawnMarker_Box;
		G_FlagSpawnMarkerIds.add(Marker.Id);
	}
}

Void Unload() {
	Private_RemoveAllMarkers();
	Layers::Destroy(C_LayerName);
}

Void Load() {
	Unload();
	Layers::Create(C_LayerName, GetManialink());
	Layers::SetType(C_LayerName, CUILayer::EUILayerType::Markers);
	Layers::Attach(C_LayerName);
}
