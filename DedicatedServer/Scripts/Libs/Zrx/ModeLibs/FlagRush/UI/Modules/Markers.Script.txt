//#RequireContext CSmMlScriptIngame

#Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UIShared.Script.txt" as FlagRush_UIShared
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Map.Script.txt" as FlagRush_Map

#Const C_FlagMarkerFrameId						"marker-flag"
#Const C_FlagSpawnMarkerFrameIdPrefix	"marker-flag-spawn-"
#Const C_FlagSpawnMarkerFrameDefault	"marker-flag-defaultspawn"

#Const C_FlagMarker_Box_Player		<0., 1., 0.>
#Const C_FlagMarker_Box_Landmark	<0., 2., 0.>
#Const C_FlagMarker_Box_Position	<0., 0., 0.>

#Const C_TeamBaseMarker_Box		<0., 8., 0.>
#Const C_FlagSpawnMarker_Box	<0., 2., 0.>

// Markers are automatically removed on map switch. Use IDs to prevent reference errors.
declare Ident G_FlagMarkerId;
declare Ident[] G_FlagSpawnMarkerIds;
declare Ident[] G_BaseMarkerIds;

Text GetManialink() {
	declare Text BasesFrameInstancesXml;
	declare Integer NbBasesPerTeam = FlagRush_Map::GetBases(1).count;
	for(Clan, 1, 2) {
		for(I, 0, NbBasesPerTeam-1) {
			BasesFrameInstancesXml ^= """<frameinstance modelid="model-marker-base" id="marker-base-team{{{ Clan }}}-{{{ I }}}" hidden="1"/>""";
		}
	}

	declare Text FlagSpawnMarkerFrameInstancesXml;
	for(I, 0, FlagRush_Map::GetFlagSpawns().count - 2) {
		FlagSpawnMarkerFrameInstancesXml ^= """<frameinstance modelid="model-marker-flagspawn" id="{{{ C_FlagSpawnMarkerFrameIdPrefix ^ I }}}" hidden="1"/>""";
	}

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRush_Markers">

	<framemodel id="model-marker-base">
		<label id="quad-icon" pos="0 0" z-index="1" size="10 10" text="" textsize="5" halign="center" valign="center2"/>
	</framemodel>

	<framemodel id="model-marker-flagspawn">
		<quad id="quad-flag" pos="0" size="8 8" halign="center" valign="center" style="UICommon64_1" substyle="Flag_light"/>
		<label id="label-order" pos="0 4" halign="center" valign="center2" text="0" textprefix="#" textsize="0.5" textfont="GameFontExtraBold" textemboss="1" hidden="1"/>
	</framemodel>

	<framemodel id="model-marker-flag">
		<quad id="quad-flag" pos="0 1" z-index="2" size="10 10" halign="center" style="UICommon64_1" substyle="Flag_light"  valign="center"/>
		<label id="distance" pos="0 -2" z-index="2" size="10 5" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="0.4" textemboss="1" hidden="1"/>
		<quad id="up" pos="0 7.5" z-index="0" size="6 6" opacity="1" style="UICommon64_2" substyle="ArrowUpSlim_light" halign="center" valign="center" hidden="1" />
		<quad id="down" pos="0 -6" z-index="0" size="6 6" opacity="1" style="UICommon64_2" substyle="ArrowDownSlim_light" halign="center" valign="center" hidden="1"/>

		<frame id="gauge-frame" pos="0 7" scale="0.65">
			<frame size="10 20" pos="0 0">
				<quad id="gauge-left" pos="0 -10" z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" rot="0" hidden="1" />
			</frame>
			<frame size="10 20" pos="-10 0">
				<quad id="gauge-right" pos="10 -10" z-index="0" size="10 20" colorize="FFF" image="file://Media/Manialinks/Nadeo/Trackmania/Ingame/NewSpeed-gauge1.dds" valign="center" halign="right" rot="180" hidden="1"/>
			</frame>
		</frame>
	</framemodel>

  <!-- Wrap in frames because C++ side z-index computation is broken -->
	<frame z-index="2">
		<frameinstance modelid="model-marker-flag" id="{{{ C_FlagMarkerFrameId }}}" hidden="1"/>
	</frame>
	<frame z-index="1">
		<frameinstance modelid="model-marker-flagspawn" id="{{{ C_FlagSpawnMarkerFrameDefault }}}" hidden="1"/>
		{{{ FlagSpawnMarkerFrameInstancesXml }}}
	</frame>
	<frame z-index="0">
		{{{ BasesFrameInstancesXml }}}
	</frame>

	<script><!--
		#Include "MathLib" as ML

		#Const C_Flag_NoStealOpacity 0.5
		#Const C_BaseIcon_Attack ""
		#Const C_BaseIcon_Defend ""

		#Struct K_BaseMarker {
			CMlFrame Frame;
			CMlLabel Icon;
		}

		#Struct K_FlagSpawnMarker {
			CMlFrame Frame;
			CMlQuad Icon;
			CMlLabel Order;
		}

		#Struct K_CircularGauge {
			CMlFrame Frame;
			CMlQuad Left;
			CMlQuad Right;
		}

		#Struct K_FlagMarker {
			CMlFrame Frame;
			CMlQuad Icon;
			CMlLabel Distance;
			CMlQuad Up;
			CMlQuad Down;
			K_CircularGauge Gauge;
		}

		declare K_BaseMarker[][Integer] G_TeamBaseMarkers;
		declare K_FlagSpawnMarker[] G_FlagSpawnMarkers;
		declare K_FlagSpawnMarker G_DefaultFlagSpawnMarker;
		declare K_FlagMarker G_FlagMarker;

		{{{ FlagRush_UIShared::GetTeamColorNetreadFunctions() }}}
		{{{ FlagRush_UIShared::GetLoginMappingFunctions() }}}
		{{{ FlagRush_UIShared::GetPlayerPositionFunctions() }}}

		Void RenderGauge(K_CircularGauge Gauge, Real Value) {
			if (Value <= 0.01) {
				Gauge.Right.Hide();
				Gauge.Left.Hide();
				return;
			} else if (Value <= 0.5) {
				Gauge.Right.Show();
				Gauge.Left.Hide();
				Gauge.Right.RelativeRotation = -180. + Value * 360;
				Gauge.Left.RelativeRotation = 0.;
			} else {
				Gauge.Right.Show();
				Gauge.Left.Show();
				Gauge.Right.RelativeRotation = 0.;
				Gauge.Left.RelativeRotation = 180. + Value * 360;
			}
		}

		Void AssignMlControlReferences() {
			// Team bases
			for (Clan, 1, 2) {
				G_TeamBaseMarkers[Clan] = [];
				for (I, 0, {{{NbBasesPerTeam-1}}}) {
					declare CMlFrame FrameMarkerBase = (Page.GetFirstChild("marker-base-team" ^ Clan ^ "-" ^ I) as CMlFrame);
					declare CMlLabel Icon = (FrameMarkerBase.GetFirstChild("quad-icon") as CMlLabel);
					G_TeamBaseMarkers[Clan].add(K_BaseMarker{ Frame = FrameMarkerBase, Icon = Icon });
				}
			}

			// Flag spawns
			for(I, 0, {{{ FlagRush_Map::GetFlagSpawns().count - 2 }}}) {
				declare CMlFrame FlagSpawnFrame = (Page.GetFirstChild("{{{ C_FlagSpawnMarkerFrameIdPrefix }}}" ^ I) as CMlFrame);
				declare CMlQuad FlagSpawnIcon = (FlagSpawnFrame.GetFirstChild("quad-flag") as CMlQuad);
				declare CMlLabel FlagSpawnOrder = (FlagSpawnFrame.GetFirstChild("label-order") as CMlLabel);
				G_FlagSpawnMarkers.add(K_FlagSpawnMarker{ Frame = FlagSpawnFrame, Icon = FlagSpawnIcon, Order = FlagSpawnOrder});
			}

			declare CMlFrame FlagSpawnFrame = (Page.GetFirstChild("{{{ C_FlagSpawnMarkerFrameDefault }}}") as CMlFrame);
			declare CMlQuad FlagSpawnIcon = (FlagSpawnFrame.GetFirstChild("quad-flag") as CMlQuad);
			declare CMlLabel FlagSpawnOrder = (FlagSpawnFrame.GetFirstChild("label-order") as CMlLabel);
			G_DefaultFlagSpawnMarker = K_FlagSpawnMarker{ Frame = FlagSpawnFrame, Icon = FlagSpawnIcon, Order = FlagSpawnOrder};
			G_FlagSpawnMarkers.add(G_DefaultFlagSpawnMarker);

			// Flag marker
			declare CMlFrame FlagFrame <=> (Page.GetFirstChild("{{{ C_FlagMarkerFrameId }}}") as CMlFrame);
			declare CMlQuad FlagIcon <=> (FlagFrame.GetFirstChild("quad-flag") as CMlQuad);
			declare CMlLabel FlagDistance <=> (Page.GetFirstChild("distance") as CMlLabel);
			declare CMlQuad FlagUp <=> (FlagFrame.GetFirstChild("up") as CMlQuad);
			declare CMlQuad FlagDown <=> (FlagFrame.GetFirstChild("down") as CMlQuad);
			declare CMlFrame FlagGaugeFrame <=> (FlagFrame.GetFirstChild("gauge-frame") as CMlFrame);
			declare CMlQuad FlagGaugeLeft <=> (FlagGaugeFrame.GetFirstChild("gauge-left") as CMlQuad);
			declare CMlQuad FlagGaugeRight <=> (FlagGaugeFrame.GetFirstChild("gauge-right") as CMlQuad);
			declare K_CircularGauge FlagGauge = K_CircularGauge{ Frame = FlagGaugeFrame, Left = FlagGaugeLeft, Right = FlagGaugeRight };
			G_FlagMarker = K_FlagMarker{ Frame = FlagFrame, Icon = FlagIcon, Distance = FlagDistance, Up = FlagUp, Down = FlagDown, Gauge = FlagGauge };
		}

		Void InitMlControls() {
			G_DefaultFlagSpawnMarker.Order.Value = "1";
			G_DefaultFlagSpawnMarker.Order.Show();
		}

		Void UpdateBaseMarkers() {
			declare netread Boolean FlagRush_Net_UseReversedBases for Teams[0];

			declare Integer UIClan = 0;
			if (GUIPlayer != Null) UIClan = GUIPlayer.CurrentClan;
			else if (InputPlayer != Null) UIClan = InputPlayer.CurrentClan;

			foreach (Clan => BaseMarkers in G_TeamBaseMarkers) {
				declare Boolean ShowDefenseIcon;
				declare Vec3 Color;
				if (FlagRush_Net_UseReversedBases) {
					Color = GetTeamMidColor(3 - Clan); // Color of opponent clan
					ShowDefenseIcon = UIClan == 0 || Clan != UIClan;
				} else {
					Color = GetTeamMidColor(Clan);
					ShowDefenseIcon = UIClan == 0 || Clan == UIClan;
				}

				foreach (BaseMarker in BaseMarkers) {
					BaseMarker.Icon.TextColor = Color;
					if (ShowDefenseIcon) {
						BaseMarker.Icon.Value = C_BaseIcon_Defend;
					} else {
						BaseMarker.Icon.Value = C_BaseIcon_Attack;
					}
				}
			}
		}

		main() {
			AssignMlControlReferences();
			InitMlControls();
			while(True) {
				yield;
				UpdateBaseMarkers();
			}
		}
	--></script>
</manialink>
	""";
}

CUIConfigMarker Private_GetMarker(Ident Id) {
	if (!UIManager.UIAll.Markers.existskey(Id)) {
		return Null;
	}
	return UIManager.UIAll.Markers[Id];
}

Void Private_RemoveMarker(Ident Id) {
	declare CUIConfigMarker Marker = Private_GetMarker(Id);
	if (Marker == Null) {
		return;
	}
	UIManager.UIAll.RemoveMarker(Marker);
}

Void FlagMarker_Remove() {
	declare CUIConfigMarker Marker = Private_GetMarker(G_FlagMarkerId);
	if(Marker != Null) {
		UIManager.UIAll.RemoveMarker(Marker);
	}
	G_FlagMarkerId = NullId;
}

Void FlagMarker_SetOnLandmark(CMapLandmark Landmark) {
	FlagMarker_Remove();
	declare FlagMarker = UIManager.UIAll.AddMarker(Landmark);
	FlagMarker.Box = C_FlagMarker_Box_Landmark;
	FlagMarker.ManialinkFrameId = C_FlagMarkerFrameId;
	G_FlagMarkerId = FlagMarker.Id;
}

Void FlagMarker_SetOnPlayer(CSmPlayer Player) {
	FlagMarker_Remove();
	declare FlagMarker = UIManager.UIAll.AddMarker(Player);
	FlagMarker.Box = C_FlagMarker_Box_Player;
	FlagMarker.ManialinkFrameId = C_FlagMarkerFrameId;
	G_FlagMarkerId = FlagMarker.Id;
}

Void FlagMarker_SetOnPosition(Vec3 Position) {
	FlagMarker_Remove();
	declare FlagMarker = UIManager.UIAll.AddMarker(Position);
	FlagMarker.Box = C_FlagMarker_Box_Position;
	FlagMarker.ManialinkFrameId = C_FlagMarkerFrameId;
	G_FlagMarkerId = FlagMarker.Id;
}

Void FlagMarker_SetVisible(Boolean Visible) {
	declare CUIConfigMarker FlagMarker = Private_GetMarker(G_FlagMarkerId);
	if (FlagMarker == Null) {
		return;
	}

	if (Visible) {
		FlagMarker.HudVisibility = CUIConfigMarker::EHudVisibility::Always;
	} else {
		FlagMarker.HudVisibility = CUIConfigMarker::EHudVisibility::Never;
	}
}

Void FlagSpawnMarkers_SetVisible(Boolean Visible) {
	foreach (FlagSpawnMarkerId in G_FlagSpawnMarkerIds) {
		declare CUIConfigMarker FlagSpawnMarker = Private_GetMarker(FlagSpawnMarkerId);
		if (FlagSpawnMarker == Null) {
			continue;
		}

		if (Visible) {
			FlagSpawnMarker.HudVisibility = CUIConfigMarker::EHudVisibility::WhenInFrustum;
		} else {
			FlagSpawnMarker.HudVisibility = CUIConfigMarker::EHudVisibility::Never;
		}
	}
}

Void CreateMapMarkers() {
	// Create Markers for the Bases
	foreach (Id in G_BaseMarkerIds) {
		Private_RemoveMarker(Id);
	}
	G_BaseMarkerIds = [];
	for(Clan, 1, 2) {
		for(BaseIndex, 0, FlagRush_Map::GetBases(Clan).count -1) {
			declare CUIConfigMarker MarkerBase = UIManager.UIAll.AddMarker(FlagRush_Map::GetBases(Clan)[BaseIndex]);
			MarkerBase.HudVisibility = CUIConfigMarker::EHudVisibility::WhenInFrustum;
			MarkerBase.ManialinkFrameId = """marker-base-team{{{Clan}}}-{{{BaseIndex}}}""";
			MarkerBase.Box = C_TeamBaseMarker_Box;
			G_BaseMarkerIds.add(MarkerBase.Id);
		}
	}

	// Create a marker for each flag spawn
	foreach (Id in G_FlagSpawnMarkerIds) {
		Private_RemoveMarker(Id);
	}
	G_FlagSpawnMarkerIds = [];
	declare Integer Index = 0;
	foreach(FlagSpawn in FlagRush_Map::GetFlagSpawns()) {
		declare CUIConfigMarker Marker = UIManager.UIAll.AddMarker(FlagSpawn);
		if (FlagSpawn == FlagRush_Map::GetDefaultFlagSpawn()) {
			Marker.ManialinkFrameId = C_FlagSpawnMarkerFrameDefault;
		} else {
			Marker.ManialinkFrameId = C_FlagSpawnMarkerFrameIdPrefix ^ Index;
			Index += 1;
		}

		Marker.Box = C_FlagSpawnMarker_Box;
		G_FlagSpawnMarkerIds.add(Marker.Id);
	}
}