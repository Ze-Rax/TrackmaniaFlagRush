// #RequireContext CSmMlScriptIngame
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/UIShared.Script.txt" as UIShared
#Include "/Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_ColorPalette.Script.txt" as FlagRush_Colors

#Const C_MenuPage_MainMenu "mainmenu"
#Const C_MenuPage_TeamsMenu "teamsmenu"
#Const C_MenuPage_CallvotesMenu "callvotesmenu"

#Const C_Action_Resume "resume"
#Const C_Action_JoinTeam "jointeam"
#Const C_Action_ToggleSpecate "togglespectate"
#Const C_Action_RestartMatch "restartmatch"
#Const C_Action_SkipMap "skipmap"
#Const C_Action_BalanceTeams "balanceteams"
#Const C_Action_Modesettings "modesettings"
#Const C_Action_Quit "quit"

#Const C_TeamsMenu_Pagination_Pagesize 5
#Const C_MenuElementAnimationDurationMs 750
#Const C_MenuElementAnimationStartDelayStepMs 50
#Const C_FocusElementAnimationDuration 100
#Const C_FocusScale 1.1

Text GetManialink() {
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="FlagRush_Menu">
	<framemodel id="menu-button">
		<quad size="50 8" id="background" style="Bgs1InRace" substyle="BgColorContour" halign="center" valign="center2" />
		<label size="49 7" id="label" text="Button Text" textsize="1.2" halign="center" valign="center2" focusareacolor1="0000" focusareacolor2="fff8" textemboss="1" scriptevents="1"/>
	</framemodel>

	<framemodel id="teams-playercard">
		<quad id="background" pos="0 0" z-index="-1" size="50 6" opacity="{{{ FlagRush_Colors::C_TransparentBackgroundOpacity }}}" style="UICommon64_1" substyle="BgFrame1" colorize="000" halign="center" valign="center"/>
		<quad id="avatar" pos="-20 0" size="5 5" bgcolor="FFF" keepratio="Fit" halign="center" valign="center" />
		<label id="name" pos="-15 0" size="15 5" text="Player Name" textsize="1" textfont="GameFontRegular" halign="left" valign="center2" />
	</framemodel>

	<framemodel id="teamlist">
		<frameinstance modelid="menu-button" id="action-jointeam" data-action="jointeam" data-text="Join Team" data-width="35" pos="0 25"/>

		<frameinstance modelid="teams-playercard" id="playercard-0" pos="0 15"/>
		<frameinstance modelid="teams-playercard" id="playercard-1" pos="0 9"/>
		<frameinstance modelid="teams-playercard" id="playercard-2" pos="0 3"/>
		<frameinstance modelid="teams-playercard" id="playercard-3" pos="0 -3"/>
		<frameinstance modelid="teams-playercard" id="playercard-4" pos="0 -9"/>
	</framemodel>

	<frame id="main-menu" hidden="1">
		<quad id="background" pos="0 0" z-index="-1" size="70 80" opacity="{{{ FlagRush_Colors::C_TransparentBackgroundOpacity }}}" halign="center" valign="center" bgcolor="000"/>
		<label id="title" pos="0 32" z-index="0" size="93.6 7.89" text="FlagRush" textfont="GameFontRegular" textsize="6" halign="center" valign="center"/>
		<quad id="divider" pos="0 24" z-index="0" size="50 0.33" bgcolor="FFF" halign="center" valign="top"/>

		<frameinstance modelid="menu-button" id="action-resume" data-action="{{{ C_Action_Resume }}}" data-text="Resume" pos="0 15"/>
		<frameinstance modelid="menu-button" id="action-spectate" data-action="{{{ C_Action_ToggleSpecate}}}" data-text="Spectate" pos="0 5"/>
		<frameinstance modelid="menu-button" id="action-teams" data-action="{{{ C_MenuPage_TeamsMenu }}}" data-text="Teams..." pos="0 -5"/>
		<frameinstance modelid="menu-button" id="action-callvotes" data-action="{{{ C_MenuPage_CallvotesMenu }}}" data-text="Callvotes..." pos="0 -15"/>
		<frameinstance modelid="menu-button" id="action-quit" data-action="{{{ C_Action_Quit }}}" data-text="Quit" pos="0 -25"/>
	</frame>

	<frame id="teams-menu" hidden="1">
		<quad id="background" z-index="-2" pos="0 0" size="120 90" opacity="{{{ FlagRush_Colors::C_TransparentBackgroundOpacity }}}" halign="center" valign="center" bgcolor="000"/>
		<label id="title" pos="0 40" z-index="0" size="93.6 7.89" text="Teams" textfont="GameFontRegular" textsize="6" halign="center" valign="center"/>
		<quad id="divider" pos="0 35" z-index="0" size="50 0.33" bgcolor="FFF" halign="center" valign="top"/>

		<frameinstance modelid="teamlist" id="teamlist-1" pos="-30 0"/>
		<frameinstance modelid="teamlist" id="teamlist-2" pos="30 0"/>

		<frame id="pagecontrols" pos="0 -16">
			<quad id="page-previous" pos="0 0" size="6 6" halign="right" valign="center" style="UICommon64_2" substyle="ArrowUpSlim_light" scriptevents="1" />
			<quad id="page-next" pos="0 0"  size="6 6" halign="left" valign="center" style="UICommon64_2" substyle="ArrowDownSlim_light" scriptevents="1" />
		</frame>

		<frameinstance modelid="menu-button" id="action-balanceteams" data-action="{{{ C_Action_BalanceTeams }}}" data-text="Balance teams" pos="0 -25"/>
		<frameinstance modelid="menu-button" id="action-back" data-action="{{{ C_MenuPage_MainMenu }}}" data-text="Back..." pos="0 -35"/>
	</frame>

	<frame id="callvotes-menu" hidden="1">
		<quad id="background" pos="0 0" z-index="-1" size="70 80" opacity="{{{ FlagRush_Colors::C_TransparentBackgroundOpacity }}}" halign="center" valign="center" bgcolor="000"/>
		<label id="title" pos="0 32" z-index="0" size="93.6 7.89" text="Callvotes" textfont="GameFontRegular" textsize="6" halign="center" valign="center"/>
		<quad id="divider" pos="0 24" z-index="0" size="50 0.33" bgcolor="FFF" halign="center" valign="top"/>

		<frameinstance modelid="menu-button" id="action-restartmatch" data-action="{{{ C_Action_RestartMatch }}}" data-text="Restart match" pos="0 15"/>
		<frameinstance modelid="menu-button" id="action-skipmap" data-action="{{{ C_Action_SkipMap }}}" data-text="Skip map" pos="0 5"/>
		<frameinstance modelid="menu-button" id="action-balanceteams" data-action="{{{ C_Action_BalanceTeams }}}" data-text="Balance teams" pos="0 -5"/>
		<frameinstance modelid="menu-button" id="action-modesettings" data-action="{{{ C_Action_Modesettings }}}" data-text="Modesettings..." pos="0 -15"/>
		<frameinstance modelid="menu-button" id="action-mainmenu" data-action="{{{ C_MenuPage_MainMenu }}}" data-text="Back..." pos="0 -25"/>
	</frame>

	<script><!--
	#Include "TextLib" as TL
	#Include "MathLib" as ML
	#Include "ColorLib" as CL

	#Const C_InputType_Mouse "Mouse"
	#Const C_InputType_Keyboard "Keyboard"
	#Const C_InputType_Pad "Pad"
	#Const C_InputType_Touch "Touch"

	#Struct K_MenuButton {
		CMlFrame Frame;
		CMlQuad Background;
		CMlLabel Label;
		Text Action;
	}

	#Struct K_TeamsPlayerCard {
		CMlFrame Frame;
		CMlQuad Background;
		CMlQuad Avatar;
		CMlLabel Name;
	}

	#Struct K_TeamList {
		K_MenuButton ButtonJoin;
		K_TeamsPlayerCard[] PlayerCards;
	}

	#Struct K_PageControls {
		CMlQuad ButtonPrevious;
		CMlQuad ButtonNext;
		Integer CurrentPageIndex;
	}

	#Struct K_MainMenu {
		CMlFrame Frame;
		K_MenuButton[] Buttons;
	}

	#Struct K_TeamsMenu {
		CMlFrame Frame;
		K_TeamList[] TeamLists;
		K_PageControls PageControls;
		K_MenuButton ButtonBalanceTeams;
		K_MenuButton ButtonBack;
	}

	#Struct K_CallvotesMenu {
		CMlFrame Frame;
		K_MenuButton[] Buttons;
	}

	#Struct K_PauseMenu {
		K_MainMenu MainMenu;
		K_TeamsMenu TeamsMenu;
		K_CallvotesMenu CallvotesMenu;
	}

	declare Boolean PageWasVisible;
	declare K_PauseMenu G_PauseMenu;
	declare Boolean G_QuitConfirm;
	declare Text G_CurrentPage;
	declare Integer G_FocusedButtonIndex;
	declare K_MenuButton G_CurrentFocusedButton;

	{{{ UIShared::GetTeamColorNetreadFunctions() }}}

	Text LastInputType() {
		switch (Input.TimeSinceLatestActivity) {
			case Input.TimeSinceLatestMouseActivity: return C_InputType_Mouse;
			case Input.TimeSinceLatestKeyboardActivity: return C_InputType_Keyboard;
			case Input.TimeSinceLatestPadActivity: return C_InputType_Pad;
			case Input.TimeSinceLatestTouchActivity: return C_InputType_Touch;
		}
		return "";
	}

	K_MenuButton InitMenuButton(CMlFrame MenuButtonFrame) {
		declare CMlLabel Label = (MenuButtonFrame.GetFirstChild("label") as CMlLabel);
		declare CMlQuad Background = (MenuButtonFrame.GetFirstChild("background") as CMlQuad);
		declare Text Action = MenuButtonFrame.DataAttributeGet("action");
		Label.DataAttributeSet("action", Action);

		if (MenuButtonFrame.DataAttributeExists("text")) {
			Label.Value = MenuButtonFrame.DataAttributeGet("text");
		}
		if (MenuButtonFrame.DataAttributeExists("width")) {
			declare Real Width = TL::ToReal(MenuButtonFrame.DataAttributeGet("width"));
			Background.Size = <Width, Background.Size.Y>;
			Label.Size = <Width - 1, Label.Size.Y>;
		}

		declare K_MenuButton _MenuButton = K_MenuButton{Frame = MenuButtonFrame, Background = Background, Label = Label, Action = Action};
		declare K_MenuButton MenuButton for Label = _MenuButton;
		return _MenuButton;
	}

	Void InitMlControlReferences() {
		// Main Menu
		declare CMlFrame MainMenuFrame = (Page.GetFirstChild("main-menu") as CMlFrame);
		declare K_MenuButton[] MainMenuButtons;

		foreach (Control in MainMenuFrame.Controls) {
			if (!TL::StartsWith("action", Control.ControlId)) continue;
			declare K_MenuButton MenuButton = InitMenuButton(Control as CMlFrame);
			MainMenuButtons.add(MenuButton);
		}

		declare K_MainMenu MainMenu = K_MainMenu{Frame = MainMenuFrame, Buttons = MainMenuButtons};

		// Teams Menu
		declare CMlFrame TeamsMenuFrame = (Page.GetFirstChild("teams-menu") as CMlFrame);

		declare K_TeamList[] TeamLists;
		for (Team, 1, 2) {
			declare CMlFrame TeamListFrame = (TeamsMenuFrame.GetFirstChild("teamlist-" ^ Team) as CMlFrame);
			declare CMlFrame JoinButtonFrame = (TeamListFrame.GetFirstChild("action-jointeam") as CMlFrame);
			JoinButtonFrame.DataAttributeSet("action", "{{{ C_Action_JoinTeam }}}-" ^ Team);
			declare K_MenuButton JoinButton = InitMenuButton(JoinButtonFrame);

			declare K_TeamsPlayerCard[] PlayerCards;
			for (PlayerCardIndex, 0, {{{ C_TeamsMenu_Pagination_Pagesize - 1 }}}) {
				declare CMlFrame PlayerCardFrame = (TeamListFrame.GetFirstChild("playercard-" ^ PlayerCardIndex) as CMlFrame);
				declare CMlQuad Background = (PlayerCardFrame.GetFirstChild("background") as CMlQuad);
				declare CMlQuad Avatar = (PlayerCardFrame.GetFirstChild("avatar") as CMlQuad);
				declare CMlLabel Name = (PlayerCardFrame.GetFirstChild("name") as CMlLabel);
				declare K_TeamsPlayerCard PlayerCard = K_TeamsPlayerCard{Frame = PlayerCardFrame, Background = Background, Avatar = Avatar, Name = Name};
				PlayerCards.add(PlayerCard);
			}

			declare K_TeamList TeamList = K_TeamList{ButtonJoin = JoinButton, PlayerCards = PlayerCards};
			TeamLists.add(TeamList);
		}

		declare CMlFrame PageControlsFrame = (TeamsMenuFrame.GetFirstChild("pagecontrols") as CMlFrame);
		declare CMlQuad ButtonPreviousPage = (PageControlsFrame.GetFirstChild("page-previous") as CMlQuad);
		declare CMlQuad ButtonNextPage = (PageControlsFrame.GetFirstChild("page-next") as CMlQuad);
		declare K_PageControls PageControls = K_PageControls{ButtonPrevious = ButtonPreviousPage, ButtonNext = ButtonNextPage};

		declare CMlFrame ButtonBalanceTeamsFrame = (TeamsMenuFrame.GetFirstChild("action-balanceteams") as CMlFrame);
		declare K_MenuButton ButtonBalanceTeams = InitMenuButton(ButtonBalanceTeamsFrame);

		declare CMlFrame ButtonBackFrame = (TeamsMenuFrame.GetFirstChild("action-back") as CMlFrame);
		declare K_MenuButton ButtonBack = InitMenuButton(ButtonBackFrame);

		declare K_TeamsMenu TeamsMenu = K_TeamsMenu{Frame = TeamsMenuFrame, TeamLists = TeamLists, PageControls = PageControls, ButtonBalanceTeams = ButtonBalanceTeams, ButtonBack = ButtonBack};

		// CallvotesMenu
		declare CMlFrame CallvotesMenuFrame = (Page.GetFirstChild("callvotes-menu") as CMlFrame);
		declare K_MenuButton[] CallvoteButtons;

		foreach (Control in CallvotesMenuFrame.Controls) {
			if (!TL::StartsWith("action", Control.ControlId)) continue;
			declare K_MenuButton MenuButton = InitMenuButton(Control as CMlFrame);
			CallvoteButtons.add(MenuButton);
		}

		declare K_CallvotesMenu CallvotesMenu = K_CallvotesMenu{Frame = CallvotesMenuFrame, Buttons = CallvoteButtons};

		G_PauseMenu = K_PauseMenu{MainMenu = MainMenu, TeamsMenu = TeamsMenu, CallvotesMenu = CallvotesMenu};
	}

	Void UpdateMainPage() {
		foreach (Button in G_PauseMenu.MainMenu.Buttons) {
			if (Button.Action == "{{{ C_Action_Quit }}}") {
				if (G_QuitConfirm) {
					Button.Background.Colorize = {{{ FlagRush_Colors::C_Warning }}};
					Button.Label.TextColor = {{{ FlagRush_Colors::C_Warning }}};
					Button.Label.Value = "Confirm quit?";
				} else {
					Button.Background.Colorize = {{{ FlagRush_Colors::C_NeutralLight }}};
					Button.Label.TextColor = {{{ FlagRush_Colors::C_NeutralLight }}};
					Button.Label.Value = Button.Frame.DataAttributeGet("text");
				}
			}
		}
	}

	Void UpdateTeamsPage() {
		declare PageIndex = G_PauseMenu.TeamsMenu.PageControls.CurrentPageIndex;

		declare CSmPlayer[][] TeamPlayers = [[], []];
		foreach (Player in Players) {
			if(Player.RequestsSpectate || Player.CurrentClan < 1) continue;
			TeamPlayers[Player.CurrentClan - 1].add(Player);
		}
		declare Integer PageCount = ((ML::Max(TeamPlayers[0].count, TeamPlayers[1].count) - 1) / {{{ C_TeamsMenu_Pagination_Pagesize }}}) + 1;
		PageIndex = ML::Clamp(PageIndex, 0, PageCount - 1);
		G_PauseMenu.TeamsMenu.PageControls.CurrentPageIndex = PageIndex;
		G_PauseMenu.TeamsMenu.PageControls.ButtonNext.Visible = PageIndex < PageCount -1;
		G_PauseMenu.TeamsMenu.PageControls.ButtonPrevious.Visible = PageIndex > 0;

		for (TeamIndex, 0, 1) {
			declare Vec3 TeamColor = GetTeamPrimaryColor(TeamIndex + 1);
			G_PauseMenu.TeamsMenu.TeamLists[TeamIndex].ButtonJoin.Background.Colorize = TeamColor;
			G_PauseMenu.TeamsMenu.TeamLists[TeamIndex].ButtonJoin.Label.Value = "Join " ^ Teams[TeamIndex].Name;

			for (PlayerCardIndex, 0, {{{ C_TeamsMenu_Pagination_Pagesize - 1 }}}) {
				declare Integer PlayerIndex = PageIndex * {{{ C_TeamsMenu_Pagination_Pagesize }}} + PlayerCardIndex;
				declare K_TeamsPlayerCard PlayerCard = G_PauseMenu.TeamsMenu.TeamLists[TeamIndex].PlayerCards[PlayerCardIndex];
				if (PlayerIndex >= TeamPlayers[TeamIndex].count) {
					PlayerCard.Frame.Hide();
					continue;
				}
				declare CSmPlayer Player <=> TeamPlayers[TeamIndex][PlayerIndex];
				PlayerCard.Frame.Show();
				PlayerCard.Name.Value = Player.User.Name;
				PlayerCard.Avatar.ImageUrl = Player.User.CountryFlagUrl;
				PlayerCard.Avatar.BgColor = TeamColor;
				PlayerCard.Background.Colorize = TeamColor * 0.5;
			}
		}
	}

	Void UpdateCurrentPage() {
		switch (G_CurrentPage) {
			case "{{{ C_MenuPage_MainMenu }}}": UpdateMainPage();
			case "{{{ C_MenuPage_TeamsMenu }}}": UpdateTeamsPage();
		}
	}

	K_MenuButton[] GetFocusableElements(Text PageName) {
		switch (G_CurrentPage) {
			case "{{{ C_MenuPage_MainMenu }}}": {
				return G_PauseMenu.MainMenu.Buttons;
			}
			case "{{{ C_MenuPage_TeamsMenu }}}": {
				declare K_MenuButton[] FocusableElements;
				FocusableElements.add(G_PauseMenu.TeamsMenu.TeamLists[0].ButtonJoin);
				FocusableElements.add(G_PauseMenu.TeamsMenu.TeamLists[1].ButtonJoin);
				FocusableElements.add(G_PauseMenu.TeamsMenu.ButtonBalanceTeams);
				FocusableElements.add(G_PauseMenu.TeamsMenu.ButtonBack);
				return FocusableElements;
			}
			case "{{{ C_MenuPage_CallvotesMenu }}}": {
				return G_PauseMenu.CallvotesMenu.Buttons;
			}
		}
		return [];
	}

	Void OnEnterFocus(K_MenuButton Button) {
		Button.Label.Focus();
		declare Real OriginalScale for Button.Frame = Button.Frame.RelativeScale;
		AnimMgr.Add(
			Button.Frame,
			"<elem scale=\"" ^ OriginalScale * {{{ C_FocusScale }}} ^ "\"/>",
			{{{ C_FocusElementAnimationDuration }}},
			CAnimManager::EAnimManagerEasing::Linear
		);
	}

	Void OnExitFocus(K_MenuButton Button) {
		if(Button.Frame == Null) return;

		declare Real OriginalScale for Button.Frame = Button.Frame.RelativeScale;
		AnimMgr.Flush(Button.Frame);
		AnimMgr.Add(
			Button.Frame,
			"<elem scale=\"" ^ OriginalScale ^ "\"/>",
			{{{ C_FocusElementAnimationDuration }}},
			CAnimManager::EAnimManagerEasing::Linear
		);
	}

	Void Focus(Integer ElementIndex) {
		OnExitFocus(G_CurrentFocusedButton);
		declare K_MenuButton[] FocusableElements = GetFocusableElements(G_CurrentPage);
		if(FocusableElements.count == 0) return;
		G_FocusedButtonIndex = ElementIndex;
		if (G_FocusedButtonIndex >= 0) G_FocusedButtonIndex %= FocusableElements.count;
		else while(G_FocusedButtonIndex < 0) G_FocusedButtonIndex += FocusableElements.count;
		G_CurrentFocusedButton = FocusableElements[G_FocusedButtonIndex];
		OnEnterFocus(G_CurrentFocusedButton);
	}

	Void Focus(K_MenuButton MenuButton) {
		if(MenuButton.Frame == Null) return;
		declare K_MenuButton[] FocusableElements = GetFocusableElements(G_CurrentPage);
		foreach (Index => Element in FocusableElements) {
			if (Element.Frame == MenuButton.Frame) {
				Focus(Index);
				return;
			}
		}
	}

	Void Navigate(Integer Direction) {
		if (Direction == 0) return;
		Focus(G_FocusedButtonIndex + Direction);
	}

	Void CloseMenu() {
		CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
	}

	Void OpenMenuPage(Text MenuPage) {
		declare CMlFrame MenuFrame;
		// Show / Hide the right frames
		switch (MenuPage) {
			case "{{{ C_MenuPage_MainMenu }}}": {
				G_QuitConfirm = False;
				G_PauseMenu.MainMenu.Frame.Show();
				G_PauseMenu.TeamsMenu.Frame.Hide();
				G_PauseMenu.CallvotesMenu.Frame.Hide();
				MenuFrame = G_PauseMenu.MainMenu.Frame;
			}
			case "{{{ C_MenuPage_TeamsMenu }}}": {
				G_PauseMenu.TeamsMenu.PageControls.CurrentPageIndex = 0;
				UpdateTeamsPage();
				G_PauseMenu.MainMenu.Frame.Hide();
				G_PauseMenu.TeamsMenu.Frame.Show();
				G_PauseMenu.CallvotesMenu.Frame.Hide();
				MenuFrame = G_PauseMenu.TeamsMenu.Frame;
			}
			case "{{{ C_MenuPage_CallvotesMenu }}}": {
				G_PauseMenu.MainMenu.Frame.Hide();
				G_PauseMenu.TeamsMenu.Frame.Hide();
				G_PauseMenu.CallvotesMenu.Frame.Show();
				MenuFrame = G_PauseMenu.CallvotesMenu.Frame;
			}
			default: return;
		}
		G_CurrentPage = MenuPage;

		G_FocusedButtonIndex = 0;
		if (LastInputType() != C_InputType_Mouse) Focus(G_FocusedButtonIndex);

		// Menu content element animations
		declare Integer AnimStartDelay = 0;
		foreach (MenuControl in MenuFrame.Controls) {
			declare Real OriginalScale for MenuControl = MenuControl.RelativeScale;
			AnimMgr.Flush(MenuControl);
			MenuControl.RelativeScale = 0.;
			AnimMgr.Add(
				MenuControl,
				"<elem scale=\"" ^ OriginalScale ^ "\"/>",
				Now + AnimStartDelay - {{{ C_MenuElementAnimationDurationMs / 4 }}},
				{{{ C_MenuElementAnimationDurationMs }}},
				CAnimManager::EAnimManagerEasing::ElasticOut
			);
			AnimStartDelay += {{{ C_MenuElementAnimationStartDelayStepMs }}};
		}
	}

	Void HandleAction(Text Action) {
		switch (Action) {
			case "{{{ C_MenuPage_MainMenu }}}": {
				OpenMenuPage("{{{ C_MenuPage_MainMenu }}}");
			}
			case "{{{ C_MenuPage_TeamsMenu }}}": {
				OpenMenuPage("{{{ C_MenuPage_TeamsMenu }}}");
			}
			case "{{{ C_MenuPage_CallvotesMenu }}}": {
				OpenMenuPage("{{{ C_MenuPage_CallvotesMenu }}}");
			}
			case "{{{ C_Action_Resume }}}": {
				CloseMenu();
			}
			case "{{{ C_Action_ToggleSpecate }}}": {
				Playground.RequestSpectatorClient( !InputPlayer.RequestsSpectate );
			}
			case "{{{ C_Action_Quit }}}": {
				if (G_QuitConfirm) {
					Playground.QuitServer(False);
					CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
				}
				else G_QuitConfirm = True;
			}
			case "{{{ C_Action_RestartMatch }}}": {
				Playground.RequestRestartMap();
				CloseMenu();
			}
			case "{{{ C_Action_SkipMap }}}": {
				Playground.RequestNextMap();
				CloseMenu();
			}
			case "{{{ C_Action_BalanceTeams }}}": {
				Playground.RequestAutoTeamBalance();
				CloseMenu();
			}
			case "{{{ C_Action_Modesettings }}}": {
				TriggerPageAction("maniaplanet:editsettings");
			}
			case "{{{ C_Action_JoinTeam }}}-1": {
				Playground.JoinTeam1();
				CloseMenu();
			}
			case "{{{ C_Action_JoinTeam }}}-2": {
				Playground.JoinTeam2();
				CloseMenu();
			}
		}
	}

	Void HandleEvents() {
		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMlScriptEvent::Type::MouseClick: {
					if (Event.Control.DataAttributeExists("action")) {
						declare Text Action = Event.Control.DataAttributeGet("action");
						HandleAction(Action);
					} else if (Event.Control == G_PauseMenu.TeamsMenu.PageControls.ButtonNext) {
						G_PauseMenu.TeamsMenu.PageControls.CurrentPageIndex += 1;
					} else if (Event.Control == G_PauseMenu.TeamsMenu.PageControls.ButtonPrevious) {
						G_PauseMenu.TeamsMenu.PageControls.CurrentPageIndex -= 1;
					}
				}
				case CMlScriptEvent::Type::MouseOver: {
					if(Event.Control != Null) {
						declare K_MenuButton MenuButton for Event.Control;
						Focus(MenuButton);
					}
				}
				case CMlScriptEvent::Type::MouseOut: {
					OnExitFocus(G_CurrentFocusedButton);
				}
				case CMlScriptEvent::Type::KeyPress: {
					if (PageWasVisible && Event.KeyName == "Escape") {
						CloseMenu();
					}
				}
			}
		}

		foreach (Event in Input.PendingEvents) {
			if (Event.Type == CInputEvent::EType::PadButtonPress)	 {
				switch (Event.Button) {
					case CInputEvent::EButton::LeftStick_Up, CInputEvent::EButton::Up: Navigate(-1);
					case CInputEvent::EButton::LeftStick_Down, CInputEvent::EButton::Down: Navigate(1);
					case CInputEvent::EButton::Menu: CloseMenu();
				}
			}
		}
	}

	main() {
		InitMlControlReferences();

		while (True) {
			yield;

			// Menu toggling
			if (!PageIsVisible) {
				PageWasVisible = False;
				continue;
			} else if (!PageWasVisible) {
				OpenMenuPage("{{{ C_MenuPage_MainMenu }}}");
			}

			UpdateCurrentPage();
			HandleEvents();
			PageWasVisible = True;
		}
	}
	--></script>
</manialink>
	""";
}