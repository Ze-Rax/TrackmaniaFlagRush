/**
 * FlagRush
 * Gamemode by Ze-Rax, Reaby, Geekid & Rxelux.
 */

#Extends "Libs/Zrx/ModeLibs/BaseModes/FlagRushProgressionBase.Script.txt"

#Const	CompatibleMapTypes	"Trackmania\\FlagRushArena,FlagRushArena"
#Const	Version							"1.5.0"
#Const	ScriptName					"Modes/TrackMania/FlagRush.Script.txt"

// ========= //
// Libraries //
// ========= //

// !! Commented out libs are already included in the base mode, but added in here for IntelliSense.

// General Libs
// #Include "TextLib" as TL
// #Include "MathLib" as ML

// #Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2.Script.txt"													as XmlRpc
// #Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2_Base.Script.txt"										as XmlRpc_Base

// #Include "Libs/Zrx/ModeLibs/Common/EventFeed.Script.txt"													as EventFeed
// #Include "Libs/Zrx/ModeLibs/Common/Commands/ModeCommands.Script.txt"							as ModeCommands
// #Include "Libs/Zrx/ModeLibs/Common/Commands/CommandUtils.Script.txt"							as CommandUtils
// #Include "Libs/Zrx/ModeLibs/Common/ModeUtils.Script.txt"													as ModeUtils
// #Include "Libs/Zrx/ModeLibs/Common/ModeEvents.Script.txt"												as ModeEvents
// #Include "Libs/Zrx/ModeLibs/Common/WarmUpReadyUp/WarmUpReadyUp.Script.txt"				as WarmUpReadyUp
#Include "Libs/Rx/ModeLibs/Common/Hitbox.Script.txt"																as Hitbox

// FlagRush Libs
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"									as FlagRush_Common
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Map.Script.txt"										as FlagRush_Map
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Scores.Script.txt"									as FlagRush_Scores
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_MatchEvaluation.Script.txt"				as FlagRush_MatchEvaluation
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt"									as FlagRush_Teams
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_RpcEvents.Script.txt"							as FlagRush_XmlRpc
#Include "Libs/Zrx/ModeLibs/FlagRush/Flag.Script.txt"																as Flag
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Handicaps.Script.txt"									as FlagRush_Handicaps
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Vehicle.Script.txt"										as FlagRush_Vehicle

// #Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UI.Script.txt"									as FlagRush_UI
// #Include "Libs/Zrx/ModeLibs/FlagRush/UI/Messages.Script.txt"											as Messages
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/Flash.Script.txt"										as FlagRush_Flash
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/VehicleSelection.Script.txt"				as FlagRush_VehicleSelection
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/FlagMarker.Script.txt"							as FlagMarker
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/FlagPossessionIndicator.Script.txt"	as FlagPossessionIndicator

// ========= //
// Constants //
// ========= //

#Const C_Debug False

#Const C_AssistTimeThreshold 5000
#Const C_RespawnDelayMin 1000 // Player needs to be unspawned for a few (?) yields before respawning, else physics with different vehicles do not apply correctly

#Const C_FlagDropPositionMode_CurrentPosition		"FlagDropPositionMode_CurrentPosition"
#Const C_FlagDropPositionMode_PreviousPosition	"FlagDropPositionMode_PreviousPosition"
#Const C_FlagDropPositionMode_LastSafePosition	"FlagDropPositionMode_LastSafePosition"

#Const FlagRush_Vehicle::C_Vehicle_Stadium as C_Vehicle_Stadium

// ======== //
// Settings //
// ======== //

#Setting S_UseCrudeExtrapolation						True		as "<hidden>"
#Setting S_TrustClientSimu									True		as "<hidden>"

// Gameplay
#Setting S_UseReversedBases									False 	as "<hidden>" // Switch team bases
#Setting S_RandomizeFlagSpawn								True 		as "<hidden>" // Randomize flag spawn location
#Setting S_FlagInitialSpawnDelaySeconds			0. 			as "<hidden>" // Initial flag spawn delay (seconds)
#Setting S_FlagRespawnDelaySeconds					0. 			as "<hidden>" // Flag respawn delay (seconds)
#Setting S_FlagDropStateDurationSeconds			8. 			as "<hidden>" // Flag drop state duration (seconds)
#Setting S_FlagStealResistDurationSeconds		1. 			as "<hidden>" // Flag steal resistance (seconds)
#Setting S_FlagSameTeamSteal								True		as "<hidden>" // Team flag steal
#Setting S_FlagStealResistanceOnTeamPass    False   as "<hidden>" // Flag steal resistance on passes between players in same team
#Setting S_FlagCarrierFragile								True		as "Flag carrier becomes fragile"
#Setting S_FlagCarrierAcceleration					0.66 		as "Flag carrier acceleration (0.0 - 1.0)"
#Setting S_FlagCarrierControl								1.0 		as "<hidden>" // Flag carrier steering control (0.0 - 1.0)
#Setting S_FlagCarrierAdherence							0.9 		as "<hidden>" // Flag carrier adherence (0.0 - 1.0)
#Setting S_RespawnSpeedLimitKmh							30.			as "<hidden>" // Speed limit for player to respawn
#Setting S_RespawnDelayPerPlayer						1.0 		as "Respawn delay (seconds) per player in a team"
#Setting S_DropFlagPickupPenalty						3.			as "<hidden>" // Flag pickup cooldown after dropping (seconds)
#Setting S_TeleportDetectionThreshold				8.			as "<hidden>" // Maximum allowed distance (meters) to teleport (lag) before dropping the flag
#Setting S_UseCollisions										False		as "Use collisions (experimental)"
#Setting S_ForceEnabledVehiclesCsv					""			as "Force enabled vehicles (Comma separated; Options: \"stadium\", \"snow\", \"rally\")"

// ======== //
// Commands //
// ======== //

// Constants are used for Commands from other sources, like UI Events.
// Constants value has to be the same as the name of the respective command without the Command_ prefix.
// The Parameter for the Command has to be sent with the Event in the Params array.
// In case of Vec2/Vec3/Int2/Int3 commands, X, Y & Z each take a seperate entry in the params array.
#Command	Command_ResetFlag								(Boolean) as		"Reset flag"
#Const		C_Command_ResetFlag															"ResetFlag"

// ============== //
// Plugs / Labels //
// ============== //

***Settings***
***
declare Boolean FlagRush_Debug for This;
FlagRush_Debug = C_Debug;

UsePvPCollisions = S_UseCollisions;

FlagRush_UI::Net_SendModeScriptRoundLogicSettings(S_UseReversedBases);
***

***LoadLibraries***
***
ModeCommands::AddQuickCommand(C_Command_ResetFlag, "UICommon64_1", "Flag_light");
Flag::Load();
***

***LoadHud***
***
FlagRush_VehicleSelection::Load();
FlagPossessionIndicator::Load();
***

***LoadItems***
***
FlagRush_Vehicle::LoadItems();
***

// ~~~~~~~~~~ Map ~~~~~~~~~~ //

***InitMap***
***
FlagRush_VehicleSelection::SetEnabledVehicles(Vehicle_GetEnabled());
***

// ~~~~~~~~~~ Turn ~~~~~~~~~~ //

***StartTurn***
***
declare CMapLandmark FlagSpawn = FlagRush_Map::GetDefaultFlagSpawn();
declare Integer FlagSpawnDate = Now + ML::NearestInteger(S_FlagInitialSpawnDelaySeconds * 1000);
Flag::Load();
Flag::SetAtLandmark(FlagSpawn);
Flag::Lock(FlagSpawnDate);
FlagMarker::Update();

foreach (Player in Players) {
	declare netwrite Integer Net_SpawnDate for Player;
	Net_SpawnDate = -1;
	SetPlayerClan(Player, Player.RequestedClan);
}
***

***EndTurn***
***
Flag::SetUnspawned();
FlagMarker::Update();
FlagRush_Handicaps::ClearQueue();
***

***AfterEndTurn***
***
foreach (Player in Players) {
	UnspawnPlayer(Player);
}
***

// ~~~~~~~~~~ PlayLoop ~~~~~~~~~~ //

***PlayLoop***
***
FlagRush_Handicaps::Yield();
declare Flag::K_Flag PreviousFlag = Flag::Get();
Flag::Yield();

// Update Flag
// Check if carrier is still connected
if (Flag::IsOnPlayer() && !Flag::IsPlayerConnected()) {
	FlagCarrier_DropFlag();
}

// Check if Carrier teleported
if (Flag::IsOnPlayer() && ML::Length(Flag::Get().Location.Position - PreviousFlag.Location.Position) > S_TeleportDetectionThreshold) {
	Messages::FlagCarrierTeleport();
	FlagCarrier_DropFlag(PreviousFlag.Location.Position);
}

if (Flag::IsAtPosition()) {
	// Check if respawn timer ended
	if (Now > Flag::Get().Drop.Timer.Until) {
		Flag_Reset();
	} else { // Check for pickups
		declare CSmPlayer NewCarrier;
		foreach (Player in Players) {
			if (!Player_CanPickUpDroppedFlag(Player)) continue;
			declare Boolean IsSameTeam = Player.CurrentClan == Flag::Get().Drop.Player.Clan;
			if (NewCarrier != Null && IsSameTeam) continue;
			NewCarrier = Player;
			if (!IsSameTeam) break;
		}

		if (NewCarrier != Null) Player_PickUpFlag(NewCarrier);
	}
}

// Try pass flag
declare CSmPlayer FlagCarrier = Flag::GetPlayer();
if (FlagCarrier != Null) {
	declare CSmPlayer FlagReceiver = GetFirstCollidingPlayer_OpponentPriority(FlagCarrier);
	if (FlagReceiver != Null) {
		declare Boolean IsLocked = Flag::IsLockedForPlayer(FlagReceiver);
		declare Boolean IsOpponent = FlagCarrier.CurrentClan != FlagReceiver.CurrentClan;
		if (!IsLocked && (IsOpponent || S_FlagSameTeamSteal)) {
			FlagCarrier_PassFlag(FlagReceiver);
		}
	}
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) OnPlayerTriggersWaypoint(Event.Player, Event.Landmark);
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) OnPlayerRequestsRespawn(Event.Player);
		}
		case CSmModeEvent::EType::OnCommand: OnGameplayCommand(CommandUtils::FromEvent(Event)); // Commands from Mode (Settings or XmlRpc)
	}
}

foreach(Command in ModeCommands::GetPendingCommands()) OnGameplayCommand(Command); // Commands from ModeCommandsUI

foreach (Player in Players) {
	if (Player_RequestsClanChange(Player)) OnPlayerRequestsClanChange(Player);
	if (Player_IsDead(Player)) OnPlayerDeath(Player);
	if (Player_CanSpawn(Player)) Player_Spawn(Player);

	Player_Net_SendPosition(Player);
}
***

// ~~~~~~~~~~ WarmUp ~~~~~~~~~~ //

***WarmUpLoop***
***
foreach (Player in Players) {
	declare Integer FlagRush_Warmup_UnspawnDate for Player = Now;
	if (Player_RequestsClanChange(Player) || Player_IsDead(Player)) {
		UnspawnPlayer(Player);
		FlagRush_Warmup_UnspawnDate = Now;
		SetPlayerClan(Player, Player.RequestedClan);
	}

	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && Now - FlagRush_Warmup_UnspawnDate > C_RespawnDelayMin) {
		Player_Initialize(Player);
		declare CMapSpawn Spawn = FlagRush_Map::GetSpawn(Player).PlayerSpawn;
		SpawnPlayer(Player, Player.CurrentClan, 100, Spawn, Now + FlagRush_Common::C_SpawnAnimDuration);
	}

	Player_Net_SendPosition(Player);
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) {
				UnspawnPlayer(Event.Player);
				declare Integer FlagRush_Warmup_UnspawnDate for Event.Player = Now;
				FlagRush_Warmup_UnspawnDate = Now;
			}
		}
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null && FlagRush_Map::IsOutOfBoundsTrigger(Event.Landmark) && Event.Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
				Messages::PlayerOutOfBounds(Event.Player);
				UnspawnPlayer(Event.Player);
				declare Integer FlagRush_Warmup_UnspawnDate for Event.Player = Now;
				FlagRush_Warmup_UnspawnDate = Now;
			}
		}
	}
}
***

***EndWarmUp***
***
foreach (Player in Players) {
	UnspawnPlayer(Player);
}
***

***Yield***
***
// Handle mode script updates
declare Boolean RestartTurn = False;

declare Text FlagRush_PreviousSettings_ForceEnabledVehiclesCsv for This = "";
if (FlagRush_PreviousSettings_ForceEnabledVehiclesCsv != S_ForceEnabledVehiclesCsv) {
	FlagRush_PreviousSettings_ForceEnabledVehiclesCsv = S_ForceEnabledVehiclesCsv;

	// Note: Cannot use functions like Vehicle_GetEnabled or globals in Yield due to ordering after compilation
	declare FlagRush_Vehicle::K_Vehicle[] FlagRush_ForceEnabledVehicles for This = [];
	FlagRush_ForceEnabledVehicles.clear();
	for (CsvEntry in TL::Split(",", S_ForceEnabledVehiclesCsv)) {
		declare Text VehicleId = TL::ToLowerCase(TL::Trim(CsvEntry));
		if (FlagRush_Vehicle::IsValid(VehicleId)) {
			FlagRush_ForceEnabledVehicles.add(FlagRush_Vehicle::Get(VehicleId));
		}
	}

	declare FlagRush_Vehicle::K_Vehicle[] EnabledVehicles;
	if (FlagRush_ForceEnabledVehicles.count > 0) {
		EnabledVehicles = FlagRush_ForceEnabledVehicles;
	} else {
		EnabledVehicles = FlagRush_Map::GetEnabledVehicles();
	}
	FlagRush_VehicleSelection::SetEnabledVehicles(EnabledVehicles);
	RestartTurn = True;
}

declare Boolean TrustClientSimuChanged = SettingTracker::HasChanged(S_TrustClientSimu, "S_TrustClientSimu");
declare Boolean UseCrudeExtrapolationChanged = SettingTracker::HasChanged(S_UseCrudeExtrapolation, "S_UseCrudeExtrapolation");
if (TrustClientSimuChanged || UseCrudeExtrapolationChanged) {
	RestartTurn = True;
}

declare Boolean UseReversedBasesChanged = SettingTracker::HasChanged(S_UseReversedBases, "S_UseReversedBases");
if (UseReversedBasesChanged) {
	FlagRush_UI::Net_SendModeScriptRoundLogicSettings(S_UseReversedBases);
	RestartTurn = True;
}

declare Boolean UseCollisionsChanged = SettingTracker::HasChanged(S_UseCollisions, "S_UseCollisions");
if (UseCollisionsChanged) {
	UsePvPCollisions = S_UseCollisions;
	RestartTurn = True;
}

if (RestartTurn && MB_TurnIsRunning()) {
	Messages::CriticalSettingUpdate_RestartTurn();
	MB_StopTurn();
}
***

// ========= //
// Functions //
// ========= //

FlagRush_Vehicle::K_Vehicle[] Vehicle_GetEnabled() {
	declare FlagRush_Vehicle::K_Vehicle[] FlagRush_ForceEnabledVehicles for This = [];
	if (FlagRush_ForceEnabledVehicles.count > 0) {
		return FlagRush_ForceEnabledVehicles;
	}
	return FlagRush_Map::GetEnabledVehicles();
}

Boolean Vehicle_IsEnabled(FlagRush_Vehicle::K_Vehicle Vehicle) {
	declare FlagRush_Vehicle::K_Vehicle[] Vehicles = Vehicle_GetEnabled();
	for (EnabledVehicle in Vehicles) {
		if (Vehicle.Id == EnabledVehicle.Id) {
			return True;
		}
	}
	return False;
}

FlagRush_Vehicle::K_Vehicle Vehicle_GetSelected(CSmPlayer Player) {
	declare FlagRush_Vehicle::K_Vehicle SelectedVehicle = FlagRush_VehicleSelection::GetSlectedVehicle(Player);
	if (Vehicle_IsEnabled(SelectedVehicle)) {
		return SelectedVehicle;
	}
	return Vehicle_GetEnabled()[0];
}

Ident Vehicle_GetModelId(CSmPlayer Player) {
	declare FlagRush_Vehicle::K_Vehicle Vehicle = Vehicle_GetSelected(Player);
	if (Vehicle.Id == C_Vehicle_Stadium.Id) {
		return FlagRush_Teams::GetSkinModelIdForTeam(Player.RequestedClan);
	}
	return FlagRush_Vehicle::GetItemId(Vehicle.Id);
}

CSmPlayer GetFirstCollidingPlayer_OpponentPriority(CSmPlayer ReferencePlayer) {
	declare CSmPlayer FirstCollidingPlayer;
	foreach (Player in Players) {
		if (Player == ReferencePlayer || !Hitbox::AreColliding(ReferencePlayer, Player)) continue;
		declare Boolean IsSameTeam = Player.CurrentClan == ReferencePlayer.CurrentClan;
		if (FirstCollidingPlayer != Null && IsSameTeam) continue;
		FirstCollidingPlayer = Player;
		if (!IsSameTeam) return FirstCollidingPlayer;
	}
	return FirstCollidingPlayer;
}

Void Flag_Reset(Boolean Silent) {
	if (!Silent) Messages::FlagReset(C_Duration_EventMessage);

	declare CMapLandmark FlagSpawn;
	if (!S_RandomizeFlagSpawn) FlagSpawn = FlagRush_Map::GetDefaultFlagSpawn();
	else FlagSpawn = FlagRush_Map::GetRandomFlagSpawn();
	Flag::SetAtLandmark(FlagSpawn);
	Flag::Lock(Now + ML::NearestInteger(S_FlagRespawnDelaySeconds * 1000));
	FlagMarker::Update();
	FlagRush_XmlRpc::Send_FlagReset();
}

Void Flag_Reset() {
	Flag_Reset(False);
}

Void Player_Net_SendPosition(CSmPlayer Player) {
	declare netwrite Vec3 Net_Position for Player;
	Net_Position = Player.Position;
	declare netwrite Real Net_Yaw for Player;
	Net_Yaw = Player.AimYaw;
}

Boolean Player_RequestsClanChange(CSmPlayer Player) {
	return Player.CurrentClan != Player.RequestedClan;
}

Boolean Player_IsDead(CSmPlayer Player) {
	return Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Player.Armor <= 0;
}

Void Player_Initialize(CSmPlayer Player) {
	Player.TrustClientSimu = !UsePvPCollisions && S_TrustClientSimu;
	Player.UseCrudeExtrapolation = !UsePvPCollisions && S_UseCrudeExtrapolation;
	Player.Dossard_Number = "  ";
	Player.Dossard_Color = <1., 1., 1.>;
	Player.ForceModelId = Vehicle_GetModelId(Player);
}

Boolean Player_CanSpawn(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) return False;
	declare netwrite Integer Net_SpawnDate for Player;
	return Net_SpawnDate < Now;
}

Void Player_Spawn(CSmPlayer Player) {
	Player_Initialize(Player);
	declare CMapLandmark SpawnLandmark = FlagRush_Map::GetSpawn(Player);
	if (SpawnLandmark != Null) {
		SpawnPlayer(Player, Player.CurrentClan, 1, SpawnLandmark.PlayerSpawn, Now + FlagRush_Common::C_SpawnAnimDuration);
	}
}

Void Player_Unspawn(CSmPlayer Player) {
	UnspawnPlayer(Player);
	declare netwrite Integer Net_SpawnDate for Player = Now;
	declare Integer SpawnDelay = ML::NearestInteger(S_RespawnDelayPerPlayer * ClansNbPlayers[Player.RequestedClan] * 1000);
	Net_SpawnDate = Now + ML::Min(SpawnDelay, C_RespawnDelayMin);
}

Void Player_ApplyHandicaps(CSmPlayer Player) {
	if (S_FlagCarrierFragile) FlagRush_Handicaps::Queue_Fragile(Player, True);
	if (S_FlagCarrierAcceleration != 1.) FlagRush_Handicaps::Queue_AccelCoef(Player, S_FlagCarrierAcceleration);
	if (S_FlagCarrierControl != 1.) FlagRush_Handicaps::Queue_ControlCoef(Player, S_FlagCarrierControl);
	if (S_FlagCarrierAdherence != 1.) FlagRush_Handicaps::Queue_AdherenceCoef(Player, S_FlagCarrierAdherence);
}

Void Player_ResetHandicaps(CSmPlayer Player) {
	FlagRush_Handicaps::Queue_Reset(Player);
}

Boolean Player_CanPickUpDroppedFlag(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned || Player.Armor <= 0) return False;
	declare Boolean IsLocked = Flag::IsLockedForPlayer(Player);
	return Flag::IsAtPosition() && !IsLocked && Hitbox::AreColliding(Player, Flag::Get().Location.Position);
}

Void Player_PickUpFlag(CSmPlayer Player) {
	Messages::FlagPickUp(Player, C_Duration_EventMessage);
	declare Integer StealResistanceEndDate = Now + ML::NearestInteger(S_FlagStealResistDurationSeconds * 1000);
	Flag::SetAtPlayer(Player);
	Flag::RemoveDropTimer();
	Flag::Lock(StealResistanceEndDate);
	FlagMarker::Update();
	Player_ApplyHandicaps(Player);
	FlagRush_XmlRpc::Send_FlagPickup();
}

Void FlagCarrier_PassFlag(CSmPlayer Player) {
	// Old Carrier
	declare CSmPlayer OldCarrier = Flag::GetPlayer();
	declare Boolean IsNotSameTeam = Player.CurrentClan != OldCarrier.CurrentClan;
	if (IsNotSameTeam) {
		FlagRush_Scores::OnPlayerStealFlag(Player);
	}
	Player_ResetHandicaps(OldCarrier);
	// New Carrier
	Messages::FlagPickUp(Player, C_Duration_EventMessage);
	declare Integer StealResistanceEndDate = Now + ML::NearestInteger(S_FlagStealResistDurationSeconds * 1000);
	Flag::SetAtPlayer(Player);
	if (IsNotSameTeam || S_FlagStealResistanceOnTeamPass) {
		Flag::Lock(StealResistanceEndDate);
	} else {
		Flag::LockForClan(StealResistanceEndDate, Player.CurrentClan);
	}
	FlagMarker::Update();
	Player_ApplyHandicaps(Player);
	FlagRush_XmlRpc::Send_FlagPass(OldCarrier);
}

Void FlagCarrier_DropFlag(Vec3 _Position) {
	declare CSmPlayer CarrierPlayer = Flag::GetPlayer();

	// If dropping in player stack, do a pass instead
	if (CarrierPlayer != Null) {
		declare CSmPlayer ReceiverPlayer = GetFirstCollidingPlayer_OpponentPriority(CarrierPlayer);
		if (ReceiverPlayer != Null) {
			FlagCarrier_PassFlag(ReceiverPlayer);
			return;
		}
	}

	// Reset player
	if (CarrierPlayer != Null) {
		Player_ResetHandicaps(CarrierPlayer);
		Flag::LockForPlayer(Now + ML::NearestInteger(S_DropFlagPickupPenalty * 1000), CarrierPlayer);
	}

	declare CUser CarrierUser = Users.get(Flag::Get().Location.Player.UserId, Null);
	declare Integer DropStateEndDate = Now + ML::NearestInteger(S_FlagDropStateDurationSeconds * 1000);
	Flag::SetDropTimer(DropStateEndDate);
	Flag::SetAtPosition(_Position);
	FlagMarker::Update();
	Messages::FlagDropped(CarrierUser, C_Duration_EventMessage);
	FlagRush_XmlRpc::Send_FlagDrop(CarrierUser);
}

Void FlagCarrier_DropFlag() {
	FlagCarrier_DropFlag(Flag::Get().Location.Position);
}

Void FlagCarrier_ScoreFlag() {
	declare CSmPlayer CarrierPlayer = Flag::GetPlayer();
	Messages::FlagScored(CarrierPlayer, C_Duration_EventMessage);
	FlagRush_Scores::OnPlayerScoreFlag(CarrierPlayer.Score);
	declare Flag::K_Flag Flag = Flag::Get();

	// Check for assist
	declare CUser Assist;
	if (Now - Flag.LastPass.Date <= C_AssistTimeThreshold && Flag.LastPass.From.Id != NullId) {
		declare CSmScore AssistScore <=> Scores[Flag.LastPass.From.ScoreId];
		if (AssistScore.TeamNum == CarrierPlayer.Score.TeamNum) {
			Assist = AssistScore.User;
			FlagRush_Scores::OnPlayerScoreFlagAssist(AssistScore);
		}
	}
	Player_ResetHandicaps(CarrierPlayer);
	FlagRush_XmlRpc::Send_FlagScored(CarrierPlayer, Assist);
	Flag_Reset(True);
	if (S_UseTurns) MB_StopTurn();
}

// =========================================================== //
// "Event Callbacks": Resolve mode events to the right actions //
// =========================================================== //

Void OnPlayerRequestsClanChange(CSmPlayer Player) {
	if (Player == Flag::GetPlayer()) {
		FlagCarrier_DropFlag();
	}
	Player_Unspawn(Player);
	SetPlayerClan(Player, Player.RequestedClan);
}

Void OnPlayerRequestsRespawn(CSmPlayer Player) {
	if (Player == Flag::GetPlayer()) {
		FlagCarrier_DropFlag();
		return;
	}

	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
		return;
	}

	if (S_RespawnSpeedLimitKmh >= 0 && Player.Speed > S_RespawnSpeedLimitKmh / 3.6) {
		FlagRush_Flash::FlashRespawn(Player);
		return;
	}

	Player_Unspawn(Player);
	Messages::PlayerRespawn(Player);
}

Void OnPlayerDeath(CSmPlayer Player) {
	if (Player == Flag::GetPlayer()) {
		FlagCarrier_DropFlag(Flag::Get().Location.LastSafePosition);
	}
	FlagRush_XmlRpc::Send_PlayerDeath(Player);
	Player_Unspawn(Player);
}

Void OnPlayerOutOfBound(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
		return;
	}

	Messages::PlayerOutOfBounds(Player);
	if (Player == Flag::GetPlayer()) {
		FlagCarrier_DropFlag(Flag::Get().Location.LastSafePosition);
	}
	FlagRush_XmlRpc::Send_PlayerDeath(Player);
	Player_Unspawn(Player);
}

Void OnPlayerTriggersWaypoint(CSmPlayer Player, CMapLandmark Landmark) {
	if (FlagRush_Map::IsOutOfBoundsTrigger(Landmark)) {
		OnPlayerOutOfBound(Player);
	} else if (Flag::Get().Location.LandmarkId == Landmark.Id && !Flag::IsLockedForPlayer(Player)) {
		Player_PickUpFlag(Player);
	} else if (Player == Flag::GetPlayer()){
		declare Integer TargetBaseClan;
		if (S_UseReversedBases) {
			TargetBaseClan = Player.CurrentClan;
		} else {
			TargetBaseClan = 3 - Player.CurrentClan;
		}
		if (FlagRush_Map::GetBases(TargetBaseClan).exists(Landmark)) {
			FlagCarrier_ScoreFlag();
		}
	}
}

Void OnGameplayCommand(CommandUtils::K_Command Command) {
	declare Text CommandText;
	switch (Command.Name) {
		case C_Command_ResetFlag: {
			Flag_Reset(Command.ValueBoolean);
			CommandText = "The flag was reset.";
		}
		default: return;
	}
	declare Text Message = """{{{ Messages::C_ChatPrefix }}} Received command "{{{ TL::Replace(Command.Name, CommandUtils::C_CommandPrefix, "") }}}" by {{{ Command.Source.Name }}}.""";
	if (CommandText != "") Message ^= " " ^ CommandText;
	UIManager.UIAll.SendChat(Message);
}
