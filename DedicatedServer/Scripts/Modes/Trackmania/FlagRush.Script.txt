/**
 * FlagRush
 * Gamemode by Ze-Rax, Reaby, Geekid & Rxelux
 */

#Extends "Libs/Zrx/ModeLibs/BaseModes/FlagRushProgressionBase.Script.txt"

#Const	CompatibleMapTypes	"Trackmania\\FlagRushArena,FlagRushArena"
#Const	Version							"1.4.0"
#Const	ScriptName					"Modes/TrackMania/FlagRush.Script.txt"

// ========= //
// Libraries //
// ========= //

// !! Commented out libs are already included in the base mode, but added in here for IntelliSense.

// General Libs
// #Include "TextLib" as TL
// #Include "MathLib" as ML

// #Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2.Script.txt"										as XmlRpc
// #Include "Libs/Nadeo/ModeLibs/Legacy/XmlRpc2_Base.Script.txt"								as XmlRpc_Base

// #Include "Libs/Zrx/ModeLibs/Common/EventFeed.Script.txt"										as EventFeed
// #Include "Libs/Zrx/ModeLibs/Common/Commands/ModeCommands.Script.txt"				as ModeCommands
// #Include "Libs/Zrx/ModeLibs/Common/Commands/CommandUtils.Script.txt"				as CommandUtils
// #Include "Libs/Zrx/ModeLibs/Common/ModeUtils.Script.txt"										as ModeUtils
// #Include "Libs/Zrx/ModeLibs/Common/ModeEvents.Script.txt"										as ModeEvents
// #Include "Libs/Zrx/ModeLibs/Common/WarmUpReadyUp/WarmUpReadyUp.Script.txt"	as WarmUpReadyUp
#Include "Libs/Rx/ModeLibs/Common/Hitbox.Script.txt"												as Hitbox

// FlagRush Libs
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Common.Script.txt"						as FlagRush_Common
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Map.Script.txt"								as FlagRush_Map
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Scores.Script.txt"						as FlagRush_Scores
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_MatchEvaluation.Script.txt"		as FlagRush_MatchEvaluation
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Teams.Script.txt"							as FlagRush_Teams
// #Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_RpcEvents.Script.txt"					as FlagRush_XmlRpc
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_FlagState.Script.txt"					as FlagRush_FlagState
#Include "Libs/Zrx/ModeLibs/FlagRush/FlagRush_Handicaps.Script.txt"					as FlagRush_Handicaps

// #Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_UI.Script.txt"							as FlagRush_UI
// #Include "Libs/Zrx/ModeLibs/FlagRush/UI/FlagRush_Messages.Script.txt"				as FlagRush_Messages
#Include "Libs/Zrx/ModeLibs/FlagRush/UI/Modules/Flash.Script.txt"						as FlagRush_Flash

// ========= //
// Constants //
// ========= //

#Const C_Debug False

#Const C_AssistTimeThreshold 5000

#Const C_FlagDropPositionMode_CurrentPosition		"FlagDropPositionMode_CurrentPosition"
#Const C_FlagDropPositionMode_PreviousPosition	"FlagDropPositionMode_PreviousPosition"
#Const C_FlagDropPositionMode_LastSafePosition	"FlagDropPositionMode_LastSafePosition"

// ======== //
// Settings //
// ======== //

#Setting S_UseCrudeExtrapolation						True		as "<hidden>"
#Setting S_TrustClientSimu									True		as "<hidden>"

// Gameplay
#Setting S_UseReversedBases									False 	as "<hidden>" // Switch team bases
#Setting S_RandomizeFlagSpawn								True 		as "<hidden>" // Randomize flag spawn location
#Setting S_FlagInitialSpawnDelaySeconds			0. 			as "<hidden>" // Initial flag spawn delay (seconds)
#Setting S_FlagRespawnDelaySeconds					0. 			as "<hidden>" // Flag respawn delay (seconds)
#Setting S_FlagDropStateDurationSeconds			8. 			as "<hidden>" // Flag drop state duration (seconds)
#Setting S_FlagStealResistDurationSeconds		1. 			as "<hidden>" // Flag steal resistance (seconds)
#Setting S_FlagSameTeamSteal								True		as "<hidden>" // Team flag steal
#Setting S_FlagStealResistanceOnTeamPass    False   as "<hidden>" // Flag steal resistance on passes between players in same team
#Setting S_FlagCarrierFragile								True		as "Flag carrier becomes fragile"
#Setting S_FlagCarrierAcceleration					0.66 		as "Flag carrier acceleration (0.0 - 1.0)"
#Setting S_FlagCarrierControl								1.0 		as "<hidden>" // Flag carrier steering control (0.0 - 1.0)
#Setting S_FlagCarrierAdherence							0.9 		as "<hidden>" // Flag carrier adherence (0.0 - 1.0)
#Setting S_RespawnSpeedLimitKmh							30.			as "<hidden>" // Speed limit for player to respawn
#Setting S_RespawnDelayPerPlayer						1.0 		as "Respawn delay (seconds) per player in a team"
#Setting S_DropFlagPickupPenalty						3.			as "<hidden>" // Flag pickup cooldown after dropping (seconds)
#Setting S_DropFlagOnTeleportDetection			True		as "<hidden>"
#Setting S_UseCollisions										False		as "Use collisions (experimental)"

// ======== //
// Commands //
// ======== //

// Constants are used for Commands from other sources, like UI Events.
// Constants value has to be the same as the name of the respective command without the Command_ prefix.
// The Parameter for the Command has to be sent with the Event in the Params array.
// In case of Vec2/Vec3/Int2/Int3 commands, X, Y & Z each take a seperate entry in the params array.
#Command	Command_ResetFlag								(Boolean) as		"Reset flag"
#Const		C_Command_ResetFlag															"ResetFlag"

// ============== //
// Plugs / Labels //
// ============== //

***Settings***
***
declare Boolean FlagRush_Debug for This;
FlagRush_Debug = C_Debug;

UsePvPCollisions = S_UseCollisions;

FlagRush_UI::Net_SendModeScriptRoundLogicSettings(S_UseReversedBases);
***

***LoadLibraries***
***
ModeCommands::AddQuickCommand(C_Command_ResetFlag, "UICommon64_1", "Flag_light");
FlagRush_FlagState::Load();
***

// ~~~~~~~~~~ Turn ~~~~~~~~~~ //

***StartTurn***
***
declare CMapLandmark FlagSpawn = FlagRush_Map::GetDefaultFlagSpawn();
declare Integer FlagSpawnDate = Now + ML::NearestInteger(S_FlagInitialSpawnDelaySeconds * 1000);
FlagRush_FlagState::SetAtLandmark(FlagSpawn, FlagSpawnDate);

foreach (Player in Players) {
	declare netwrite Integer Net_SpawnDate for Player;
	Net_SpawnDate = -1;
	SetPlayerClan(Player, Player.RequestedClan);
}
***

***EndTurn***
***
FlagRush_FlagState::SetUnspawned();
FlagRush_Handicaps::ClearQueue();
***

***AfterEndTurn***
***
foreach (Player in Players) {
	UnspawnPlayer(Player);
}
***

// ~~~~~~~~~~ PlayLoop ~~~~~~~~~~ //

***PlayLoop***
***
FlagRush_Handicaps::Yield();
FlagRush_FlagState::Yield();

// Update Flag
if (FlagRush_FlagState::CarrierDisconnected()) FlagCarrier_DropFlag();

if (S_DropFlagOnTeleportDetection && FlagRush_FlagState::CarrierTeleported()) {
	FlagRush_Messages::FlagCarrierTeleport();
	FlagCarrier_DropFlag(C_FlagDropPositionMode_PreviousPosition);
}

if (FlagRush_FlagState::IsDropped()) {
	if (Now > FlagRush_FlagState::Get().CurrentStateEndDate) { // Drop state duration ran out
		Flag_Reset();
	} else { // Check for pickups
		declare CSmPlayer NewCarrier;
		foreach (Player in Players) {
			if (!Player_CanPickUpDroppedFlag(Player)) continue;
			declare Boolean IsSameTeam = Player.CurrentClan == FlagRush_FlagState::Get().LastDrop.OldCarrier.Clan;
			if (NewCarrier != Null && IsSameTeam) continue;
			NewCarrier = Player;
			if (!IsSameTeam) break;
		}

		if (NewCarrier != Null) Player_PickUpFlag(NewCarrier);
	}
}

// Try pass flag
declare CSmPlayer FlagCarrier = FlagRush_FlagState::GetFlagCarrierPlayer();

if (FlagCarrier != Null) {
	declare CSmPlayer FlagReceiver = GetFirstCollidingPlayer_OpponentPriority(FlagCarrier);
	if (FlagReceiver != Null) {
		declare Boolean IsSameTeam = FlagCarrier.CurrentClan == FlagReceiver.CurrentClan;
		declare Boolean TimerPassed = Now > FlagRush_FlagState::Get().CurrentStateEndDate;
		declare Boolean SameTeamCanSteal = S_FlagSameTeamSteal && TimerPassed;
		declare Boolean OpponentCanSteal = !FlagRush_FlagState::Get().HasStealResistance || TimerPassed;
		if (IsSameTeam && SameTeamCanSteal || !IsSameTeam && OpponentCanSteal) {
			FlagCarrier_PassFlag(FlagReceiver);
		}
	}
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) OnPlayerTriggersWaypoint(Event.Player, Event.Landmark);
		}
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) OnPlayerRequestsRespawn(Event.Player);
		}
		case CSmModeEvent::EType::OnCommand: OnGameplayCommand(CommandUtils::FromEvent(Event)); // Commands from Mode (Settings or XmlRpc)
	}
}

foreach(Command in ModeCommands::GetPendingCommands()) OnGameplayCommand(Command); // Commands from ModeCommandsUI

foreach (Player in Players) {
	if (Player_RequestsClanChange(Player)) OnPlayerRequestsClanChange(Player);
	if (Player_IsDead(Player)) OnPlayerDeath(Player);
	if (Player_CanSpawn(Player)) Player_Spawn(Player);

	Player_Net_SendPosition(Player);
}
***

// ~~~~~~~~~~ WarmUp ~~~~~~~~~~ //

***WarmUpLoop***
***
foreach (Player in Players) {
	if (Player_RequestsClanChange(Player) || Player_IsDead(Player)) {
		UnspawnPlayer(Player);
		SetPlayerClan(Player, Player.RequestedClan);
	}

	if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) {
		Player_Initialize(Player);
		declare CMapSpawn Spawn = FlagRush_Map::GetSpawn(Player).PlayerSpawn;
		SpawnPlayer(Player, Player.CurrentClan, 100, Spawn, Now + FlagRush_Common::C_SpawnAnimDuration);
	}

	Player_Net_SendPosition(Player);
}

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerRequestRespawn: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null) UnspawnPlayer(Event.Player);
		}
		case CSmModeEvent::EType::OnPlayerTriggersWaypoint: {
			// Player might have left in the same server frame, causing Player to be Null
			if (Event.Player != Null && FlagRush_Map::IsOutOfBoundsTrigger(Event.Landmark)) {
				FlagRush_Messages::PlayerOutOfBounds(Event.Player);
				UnspawnPlayer(Event.Player);
			}
		}
	}
}
***

***EndWarmUp***
***
foreach (Player in Players) {
	UnspawnPlayer(Player);
}
***

***Yield***
***
// Handle mode script updates
declare Boolean FlagRush_PreviousSettings_TrustClientSimu for This;
declare Boolean FlagRush_PreviousSettings_UseCrudeExtrapolation for This;
declare Boolean FlagRush_PreviousSettings_UseReversedBases for This;
declare Boolean FlagRush_PreviousSettings_UseCollisions for This;
if (
	FlagRush_PreviousSettings_TrustClientSimu != S_TrustClientSimu
	|| FlagRush_PreviousSettings_UseCrudeExtrapolation != S_UseCrudeExtrapolation
	|| FlagRush_PreviousSettings_UseReversedBases != S_UseReversedBases
	|| FlagRush_PreviousSettings_UseCollisions != S_UseCollisions
) {
	FlagRush_PreviousSettings_TrustClientSimu = S_TrustClientSimu;
	FlagRush_PreviousSettings_UseCrudeExtrapolation = S_UseCrudeExtrapolation;
	FlagRush_PreviousSettings_UseReversedBases = S_UseReversedBases;
	FlagRush_PreviousSettings_UseCollisions = S_UseCollisions;

	FlagRush_UI::Net_SendModeScriptRoundLogicSettings(S_UseReversedBases);
	UsePvPCollisions = S_UseCollisions;
	if (MB_TurnIsRunning()) {
		FlagRush_Messages::CriticalSettingUpdate_RestartTurn();
		MB_StopTurn();
	}
}
***

// ========= //
// Functions //
// ========= //

CSmPlayer GetFirstCollidingPlayer_OpponentPriority(CSmPlayer ReferencePlayer) {
	declare CSmPlayer FirstCollidingPlayer;
	foreach (Player in Players) {
		if (Player == ReferencePlayer || !Hitbox::AreColliding(ReferencePlayer, Player)) continue;
		declare Boolean IsSameTeam = Player.CurrentClan == ReferencePlayer.CurrentClan;
		if (FirstCollidingPlayer != Null && IsSameTeam) continue;
		FirstCollidingPlayer = Player;
		if (!IsSameTeam) return FirstCollidingPlayer;
	}
	return FirstCollidingPlayer;
}

Void Flag_Reset(Boolean Silent) {
	if (!Silent) FlagRush_Messages::FlagReset(C_Duration_EventMessage);

	declare CMapLandmark FlagSpawn;
	if (!S_RandomizeFlagSpawn) FlagSpawn = FlagRush_Map::GetDefaultFlagSpawn();
	else FlagSpawn = FlagRush_Map::GetRandomFlagSpawn();
	FlagRush_FlagState::SetAtLandmark(FlagSpawn, Now + ML::NearestInteger(S_FlagRespawnDelaySeconds * 1000));
	FlagRush_XmlRpc::Send_FlagReset();
}

Void Flag_Reset() {
	Flag_Reset(False);
}

Void Player_Net_SendPosition(CSmPlayer Player) {
	declare netwrite Vec3 Net_Position for Player;
	Net_Position = Player.Position;
	declare netwrite Real Net_Yaw for Player;
	Net_Yaw = Player.AimYaw;
}

Boolean Player_RequestsClanChange(CSmPlayer Player) {
	return Player.CurrentClan != Player.RequestedClan;
}

Boolean Player_IsDead(CSmPlayer Player) {
	return Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned && Player.Armor <= 0;
}

Void Player_Initialize(CSmPlayer Player) {
	Player.TrustClientSimu = !UsePvPCollisions && S_TrustClientSimu;
	Player.UseCrudeExtrapolation = !UsePvPCollisions && S_UseCrudeExtrapolation;
	Player.Dossard_Number = "  ";
	Player.Dossard_Color = <1., 1., 1.>;
	if (S_UseTeamSkins) Player.ForceModelId = FlagRush_Teams::GetSkinModelIdForTeam(Player.RequestedClan);
	else Player.ForceModelId = NullId;
}

Boolean Player_CanSpawn(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) return False;
	declare netwrite Integer Net_SpawnDate for Player;
	return Net_SpawnDate < Now;
}

Void Player_Spawn(CSmPlayer Player) {
	Player_Initialize(Player);
	declare CMapLandmark SpawnLandmark = FlagRush_Map::GetSpawn(Player);
	if (SpawnLandmark != Null) {
		SpawnPlayer(Player, Player.CurrentClan, 1, SpawnLandmark.PlayerSpawn, Now + FlagRush_Common::C_SpawnAnimDuration);
	}
}

Void Player_Unspawn(CSmPlayer Player) {
	UnspawnPlayer(Player);
	declare netwrite Integer Net_SpawnDate for Player;
	declare Integer SpawnDelay = ML::NearestInteger(S_RespawnDelayPerPlayer * ClansNbPlayers[Player.RequestedClan] * 1000);
	Net_SpawnDate = Now + SpawnDelay;
}

Void Player_ApplyHandicaps(CSmPlayer Player) {
	if (S_FlagCarrierFragile) FlagRush_Handicaps::Queue_Fragile(Player, True);
	if (S_FlagCarrierAcceleration != 1.) FlagRush_Handicaps::Queue_AccelCoef(Player, S_FlagCarrierAcceleration);
	if (S_FlagCarrierControl != 1.) FlagRush_Handicaps::Queue_ControlCoef(Player, S_FlagCarrierControl);
	if (S_FlagCarrierAdherence != 1.) FlagRush_Handicaps::Queue_AdherenceCoef(Player, S_FlagCarrierAdherence);
}

Void Player_ResetHandicaps(CSmPlayer Player) {
	FlagRush_Handicaps::Queue_Reset(Player);
}

Boolean Player_CanPickUpDroppedFlag(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned || Player.Armor <= 0) return False;
	declare Integer FlagRush_LastFlagDropDate for Player = -1;
	declare Boolean DidNotDropFlag = FlagRush_LastFlagDropDate != FlagRush_FlagState::Get().LastDrop.Date;
	declare Boolean DropPickupPenaltyExpired = Now - FlagRush_LastFlagDropDate > ML::NearestInteger(S_DropFlagPickupPenalty * 1000);
	return (DidNotDropFlag || DropPickupPenaltyExpired) && Hitbox::AreColliding(Player, FlagRush_FlagState::Get().Position);
}

Void Player_PickUpFlag(CSmPlayer Player) {
	FlagRush_Messages::FlagPickUp(Player, C_Duration_EventMessage);
	declare Integer StealResistanceEndDate = Now + ML::NearestInteger(S_FlagStealResistDurationSeconds * 1000);
	FlagRush_FlagState::SetAtCarrier(Player, StealResistanceEndDate, True);
	Player_ApplyHandicaps(Player);
	FlagRush_XmlRpc::Send_FlagPickup();
}

Void FlagCarrier_PassFlag(CSmPlayer Player) {
	// Old Carrier
	declare CSmPlayer OldCarrier = FlagRush_FlagState::GetFlagCarrierPlayer();
	declare Boolean IsNotSameTeam = Player.CurrentClan != OldCarrier.CurrentClan;
	if (IsNotSameTeam) {
		FlagRush_Scores::OnPlayerStealFlag(Player);
	}
	Player_ResetHandicaps(OldCarrier);
	// New Carrier
	FlagRush_Messages::FlagPickUp(Player, C_Duration_EventMessage);
	declare Integer StealResistanceEndDate = Now + ML::NearestInteger(S_FlagStealResistDurationSeconds * 1000);
	FlagRush_FlagState::Pass(Player, StealResistanceEndDate, IsNotSameTeam || S_FlagStealResistanceOnTeamPass);
	Player_ApplyHandicaps(Player);
	FlagRush_XmlRpc::Send_FlagPass(OldCarrier);
}

Void FlagCarrier_DropFlag(Text FlagDropPositionMode) {
	declare CSmPlayer CarrierPlayer = FlagRush_FlagState::GetFlagCarrierPlayer();

	// If manual dropping in player stack, do a pass instead
	if (CarrierPlayer != Null && FlagDropPositionMode == C_FlagDropPositionMode_CurrentPosition) {
		declare CSmPlayer ReceiverPlayer = GetFirstCollidingPlayer_OpponentPriority(CarrierPlayer);
		if (ReceiverPlayer != Null) {
			FlagCarrier_PassFlag(ReceiverPlayer);
			return;
		}
	}

	// Determine Position
	declare Vec3 Position;
	switch (FlagDropPositionMode) {
		case C_FlagDropPositionMode_PreviousPosition: {
			Position = FlagRush_FlagState::Get().PrevPosition;
		}
		case C_FlagDropPositionMode_LastSafePosition: {
			Position = FlagRush_FlagState::Get().LastSafePosition;
		}
		default: {
			if (CarrierPlayer != Null) {
				Position = CarrierPlayer.Position;
			} else {
				Position = FlagRush_FlagState::Get().Position;
			}
		}
	}

	// Reset player
	if (CarrierPlayer != Null) {
		Player_ResetHandicaps(CarrierPlayer);
		declare Integer FlagRush_LastFlagDropDate for CarrierPlayer;
		FlagRush_LastFlagDropDate = Now;
	}

	declare CUser CarrierUser = ModeUtils::GetUser(FlagRush_FlagState::Get().Carrier.Login);
	declare DropStateEndDate = Now + ML::NearestInteger(S_FlagDropStateDurationSeconds * 1000);
	FlagRush_FlagState::Drop(Position, DropStateEndDate);
	FlagRush_Messages::FlagDropped(CarrierUser, C_Duration_EventMessage);
	FlagRush_XmlRpc::Send_FlagDrop(CarrierUser);
}

Void FlagCarrier_DropFlag() {
	FlagCarrier_DropFlag(C_FlagDropPositionMode_CurrentPosition);
}

Void FlagCarrier_ScoreFlag() {
	declare CSmPlayer CarrierPlayer = FlagRush_FlagState::GetFlagCarrierPlayer();
	FlagRush_Messages::FlagScored(CarrierPlayer, C_Duration_EventMessage);
	FlagRush_Scores::OnPlayerScoreFlag(CarrierPlayer.Score);

	// Check for assist
	declare FlagRush_FlagState::K_FlagPass LastPass = FlagRush_FlagState::Get().LastFlagPass;
	declare CUser Assist;
	if (Now - LastPass.Date <= C_AssistTimeThreshold && LastPass.OldCarrier.PlayerId != NullId) {
		declare CSmScore AssistScore <=> ModeUtils::GetScore(LastPass.OldCarrier.Login);
		if (AssistScore.TeamNum == CarrierPlayer.Score.TeamNum) {
			Assist = AssistScore.User;
			FlagRush_Scores::OnPlayerScoreFlagAssist(AssistScore);
		}
	}
	Player_ResetHandicaps(CarrierPlayer);
	FlagRush_XmlRpc::Send_FlagScored(CarrierPlayer, Assist);
	Flag_Reset(True);
	if (S_UseTurns) MB_StopTurn();
}

// =========================================================== //
// "Event Callbacks": Resolve mode events to the right actions //
// =========================================================== //

Void OnPlayerRequestsClanChange(CSmPlayer Player) {
	if (Player == FlagRush_FlagState::GetFlagCarrierPlayer()) FlagCarrier_DropFlag();
	Player_Unspawn(Player);
	SetPlayerClan(Player, Player.RequestedClan);
}

Void OnPlayerRequestsRespawn(CSmPlayer Player) {
	if (Player == FlagRush_FlagState::GetFlagCarrierPlayer()) {
		FlagCarrier_DropFlag();
		return;
	}

	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
		return;
	}

	if (S_RespawnSpeedLimitKmh >= 0 && Player.Speed > S_RespawnSpeedLimitKmh / 3.6) {
		FlagRush_Flash::FlashRespawn(Player);
		return;
	}

	Player_Unspawn(Player);
	FlagRush_Messages::PlayerRespawn(Player);
}

Void OnPlayerDeath(CSmPlayer Player) {
	if (Player == FlagRush_FlagState::GetFlagCarrierPlayer()) {
		FlagCarrier_DropFlag();
	}
	FlagRush_XmlRpc::Send_PlayerDeath(Player);
	Player_Unspawn(Player);
}

Void OnPlayerOutOfBound(CSmPlayer Player) {
	if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) {
		return;
	}

	FlagRush_Messages::PlayerOutOfBounds(Player);
	if (Player == FlagRush_FlagState::GetFlagCarrierPlayer()) {
		FlagCarrier_DropFlag(C_FlagDropPositionMode_LastSafePosition);
	}
	FlagRush_XmlRpc::Send_PlayerDeath(Player);
	Player_Unspawn(Player);
}

Void OnPlayerTriggersWaypoint(CSmPlayer Player, CMapLandmark Landmark) {
	if (FlagRush_Map::IsOutOfBoundsTrigger(Landmark)) {
		OnPlayerOutOfBound(Player);
	} else if (FlagRush_FlagState::Get().Landmark == Landmark && Now > FlagRush_FlagState::Get().CurrentStateEndDate) {
		Player_PickUpFlag(Player);
	} else if (Player == FlagRush_FlagState::GetFlagCarrierPlayer()){
		declare Integer TargetBaseClan;
		if (S_UseReversedBases) {
			TargetBaseClan = Player.CurrentClan;
		} else {
			TargetBaseClan = 3 - Player.CurrentClan;
		}
		if (FlagRush_Map::GetBases(TargetBaseClan).exists(Landmark)) {
			FlagCarrier_ScoreFlag();
		}
	}
}

Void OnGameplayCommand(CommandUtils::K_Command Command) {
	declare Text CommandSource = CommandUtils::ResolveSource(Command);
	declare Text CommandText;
	switch (Command.Name) {
		case C_Command_ResetFlag: {
			Flag_Reset(Command.ValueBoolean);
			CommandText = "The flag was reset.";
		}
		default: return;
	}
	declare Text Message = """{{{ FlagRush_Messages::C_ChatPrefix }}} Received command "{{{ TL::Replace(Command.Name, CommandUtils::C_CommandPrefix, "") }}}" by {{{ CommandSource }}}.""";
	if (CommandText != "") Message ^= " " ^ CommandText;
	UIManager.UIAll.SendChat(Message);
}
