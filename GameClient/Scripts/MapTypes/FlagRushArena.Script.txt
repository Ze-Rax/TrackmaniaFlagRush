/**
*  Trackmania FlagRush
*
*  Exactly one StartTeam1
*  Exactly one StartTeam2
*  At least one BaseTeam1 and same amount of BaseTeam2
*  At least one FlagSpawn
*/

#RequireContext CSmMapType

#Const Version "2022-09-17"
#Const C_MapTypeVersion 1
#Const ScriptName "MapTypes/FlagRushArena.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "ColorLib" as CL

#Include "Libs/Nadeo/TMNext/TrackMania/ColorPalette.Script.txt" as ColorPalette
#Include "Libs/Nadeo/ModeLibs/Legacy/MapType.Script.txt" as MapType
#Include "Libs/Nadeo/TMxSM/Race/Landmark.Script.txt" as Landmark
#Include "Libs/Nadeo/TMxSM/Race/MapSet.Script.txt" as MapSet
#Include "Libs/Nadeo/TMxSM/Race/MapGet.Script.txt" as MapGet
#Include "Libs/Nadeo/TMNext/TrackMania/Stores/ClubStore.Script.txt" as ClubStore
#Include "Libs/Nadeo/TMNext/TrackMania/Structures/ClubStruct.Script.txt" as ClubStruct
#Include "Libs/Nadeo/CommonLibs/Common/ReportContext.Script.txt" as ReportContext
#Include "Libs/Nadeo/TMNext/TrackMania/Editor/MapType.Script.txt" as TMMapType
#Include "Modes/TrackMania/TM_RaceTest_Local.Script.txt" as RaceTest

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_StartTagPrefix						"SpawnTeam"
#Const C_FinishTagPrefix					"BaseTeam"
#Const C_FlagSpawnTag							"FlagSpawn"
#Const C_DefaultFlagSpawnTag			"DefaultFlagSpawn"
#Const C_FlagResetTag 						"FlagResetTrigger"

#Const C_StartTagNoFunction				"Unused Start"
#Const C_FinishTagNoFunction			"Unused Finish"
#Const C_CheckpointTagNoFunction	"Unused Checkpoint"
#Const C_MultilapTagNoFunction		"Unused Multilap"
#Const C_LandmarkTagNoFunction		"Unused Landmark"

#Const C_UI_BackgroundOpacity			0.75
#Const C_UI_ButtonOpacity					0.75

#Const C_Dbg_ButtonActivatorOpacity	0.0
#Const C_Dbg_ButtonActivatorColor	"F00"

#Const C_DefaultTeamColors [1 => <0., 0., 1.>, 2 => <1., 0., 0.>]

#Const C_UIEventType_ToggleTeamColorsWindow		"ToggleTeamColorsWindow"
#Const C_UIEventType_SetTeamColorHue					"SetTeamColorHue"
#Const C_UIEventType_ResetTeamColorHue				"ResetTeamColorHue"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globables
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

declare CUILayer G_Toolbar;
declare CUILayer G_TeamColorsWindow;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the map is valid
Void UpdateValidability() {
	declare SpawnsTeam1Count = 0;
	declare SpawnsTeam2Count = 0;
	declare BasesTeam1Count = 0;
	declare BasesTeam2Count = 0;
	declare FlagSpawnsCount = 0;
	declare DefaultFlagSpawnsCount = 0;

	foreach (Anchor in AnchorData) {
		switch (Anchor.WaypointType) {
			case CAnchorData::EWaypointType::Start: {
				if (Anchor.Tag == """{{{C_StartTagPrefix}}}1""") SpawnsTeam1Count += 1;
				else if (Anchor.Tag == """{{{C_StartTagPrefix}}}2""") SpawnsTeam2Count += 1;
			}
			case CAnchorData::EWaypointType::Finish: {
				if (Anchor.Tag == """{{{C_FinishTagPrefix}}}1""") BasesTeam1Count += 1;
				else if (Anchor.Tag == """{{{C_FinishTagPrefix}}}2""") BasesTeam2Count += 1;
			}
			case CAnchorData::EWaypointType::StartFinish: {
				// What to do with multilaps?
			}
			case CAnchorData::EWaypointType::Checkpoint: {
				if (Anchor.Tag == C_FlagSpawnTag) FlagSpawnsCount += 1;
				else if (Anchor.Tag == C_DefaultFlagSpawnTag) {
					FlagSpawnsCount += 1;
					DefaultFlagSpawnsCount += 1;
				}
			}
		}
	}

	declare IsValid = True;
	declare Message = "$fff$sYour map is missing the following reqirements:\n";

	if (SpawnsTeam1Count != 1) {
		IsValid = False;
		Message ^= "\n" ^ """You must place exactly one $44f{{{C_StartTagPrefix}}}1$fff! ({{{SpawnsTeam1Count}}}/1)""";
	}
	if (SpawnsTeam2Count != 1) {
		IsValid = False;
		Message ^= "\n" ^ """You must place exactly one $f44{{{C_StartTagPrefix}}}2$fff! ({{{SpawnsTeam2Count}}}/1)""";
	}
	if (BasesTeam1Count  < 1) {
		IsValid = False;
		Message ^= "\n" ^ """You must place at least one $44f{{{C_FinishTagPrefix}}}1$fff! ({{{BasesTeam1Count}}}/1)""";
	}
	if (BasesTeam2Count  < 1) {
		IsValid = False;
		Message ^= "\n" ^ """You must place at least one $f44{{{C_FinishTagPrefix}}}2$fff! ({{{BasesTeam1Count}}}/1)""";
	}
	if (BasesTeam1Count != BasesTeam2Count) {
		IsValid = False;
		Message ^= "\n" ^ """You must place as many $44f{{{C_FinishTagPrefix}}}1$fff as $f44{{{C_FinishTagPrefix}}}2$fff! ($44f{{{BasesTeam1Count}}}$fff-$f44{{{BasesTeam2Count}}}$fff)""";
	}
	if (FlagSpawnsCount  < 1) {
		IsValid = False;
		Message ^= "\n" ^ """You must place at least one {{{C_FlagSpawnTag}}}!""";
	}
	if (DefaultFlagSpawnsCount == 0) {
		IsValid = False;
		Message ^= "\n" ^ """You haven't set a default {{{C_FlagSpawnTag}}}!""";
	}
	if (DefaultFlagSpawnsCount > 1) {
		IsValid = False;
		Message ^= "\n" ^ """You cannot have more than one default {{{C_FlagSpawnTag}}}! ({{{DefaultFlagSpawnsCount}}}/1)""";
	}
	Message ^= "\n\n" ^ "Need help? Check out $4cf$l[https://docs.google.com/document/d/e/2PACX-1vRVujmSYunjz7mrLf5sTF4BDS7GwayxjWyY8clXgyiZzgH_EYz0d7mx2EJHu0FdNoyoJgPyEpkD-yoe/pub]this FlagRush Mapping Guide$l$fff by Realspace!";

	if (IsValid) {
		ValidationStatus = CMapType::ValidationStatus::Validated;
	} else {
		ValidationStatus = CMapType::ValidationStatus::NotValidable;
	}
	ValidabilityRequirementsMessage = Message;
}

/**
 * Manialink page with buttons to be added in the editor toolbar.
 * Sends Layer custom events when buttons are clicked.
 */
Text GetToolbarManialink() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRushArena_Toolbar">
	<frame id="teamcolor" pos="42 -84.5">
		<quad id="background" z-index="-1" size="12 10" halign="center" valign="center" style="UICommon128_1" substyle="BgFrameTilted2" opacity="{{{ C_UI_BackgroundOpacity }}}" />
		<quad id="button" size="7 7" z-index="1" halign="center" valign="center" style="UICommon64_1" substyle="Flag_dark" scriptevents="1" tooltip="FlagRush Teams" />
	</frame>

	<script><!--
	main() {
		declare CMlQuad ButtonTeamColors <=> (Page.GetFirstChild("button") as CMlQuad);

		while(True) {
			yield;

			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						switch (Event.Control) {
							case ButtonTeamColors: {
								SendCustomEvent("{{{ C_UIEventType_ToggleTeamColorsWindow }}}", []);
							}
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>
	""";
}

/**
 * Manialink page to adjust the color of the teams.
 * Sends layer custom events when colors are reset or adjusted.
 */
Text GetTeamColorWindowManialink() {
	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRushArena_TeamColorsWindow">
	<framemodel id="teamcolorselector">
		<label id="header" pos="0 0" z-index="0" size="20 5" text="Team X" halign="center" valign="center2" textfont="GameFontSemiBold"/>
		<frame pos="0 -8" size="45 6" halign="center" valign="center">
			<colorpicker id="colorpicker" pos="-20 39.75" z-index="0" size="40 40" scriptevents="1" />
		</frame>
		<label id="hue-label" pos="0 -16" z-index="0" size="20 5" text="180" halign="center" valign="center2" textfont="GameFontRegular" textprefix="Hue: "/>
		<label id="reset" pos="0 -24" z-index="0" size="31.7 5" text="Reset to default" halign="center" valign="center2" style="CardButtonMedium" scriptevents="1" />
	</framemodel>

	<quad pos="0 0" z-index="-1" size="100 60" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{ColorPalette::C_Color_GreenThree}}}" halign="center" valign="center" />
	<label pos="0 22.5" z-index="0" size="90 10" text="FlagRush Team Colors" halign="center" valign="center2" textfont="GameFontBlack" textsize="5" />

	<frameinstance modelid="teamcolorselector" id="team-1-color" pos="-25 10"/>
	<frameinstance modelid="teamcolorselector" id="team-2-color" pos="25 10"/>

	<label id="close" pos="0 -24" z-index="0" size="20 5" text="Close" style="CardButtonMediumL" valign="center" halign="center" scriptevents="1"/>

	<script><!--
	#Include "ColorLib" as CL
	#Include "TextLib" as TL

	#Const C_DefaultTeamColors [1 => {{{ C_DefaultTeamColors[1] }}}, 2 => {{{ C_DefaultTeamColors[2] }}}]

	#Struct K_TeamColorPicker {
		CMlFrame Frame;
		CMlLabel Header;
		CMlColorPicker ColorPicker;
		CMlLabel HueLabel;
		CMlLabel ResetButton;
	}

	declare K_TeamColorPicker[Integer] G_TeamColorPickers;
	declare CMlLabel G_CloseButton;

	Void UpdateHueLabel(Integer Clan) {
		declare CMlColorPicker ColorPicker = G_TeamColorPickers[Clan].ColorPicker;
		declare Real Hue = CL::RgbToHsv(ColorPicker.Color).X;
		declare CMlLabel HueLabel = G_TeamColorPickers[Clan].HueLabel;
		HueLabel.Value = TL::FormatReal(Hue * 360, 0, False, True);
	}

	Void Init() {
		// References
		G_CloseButton <=> (Page.GetFirstChild("close") as CMlLabel);

		// Team color pickers in window
		for (Clan, 1, 2) {
			declare K_TeamColorPicker TeamColorPicker;
			// References
			TeamColorPicker.Frame <=> (Page.GetFirstChild("team-" ^ Clan ^ "-color") as CMlFrame);
			TeamColorPicker.Header <=> (TeamColorPicker.Frame.GetFirstChild("header") as CMlLabel);
			TeamColorPicker.ColorPicker <=> (TeamColorPicker.Frame.GetFirstChild("colorpicker") as CMlColorPicker);
			TeamColorPicker.HueLabel <=> (TeamColorPicker.Frame.GetFirstChild("hue-label") as CMlLabel);
			TeamColorPicker.ResetButton <=> (TeamColorPicker.Frame.GetFirstChild("reset") as CMlLabel);

			G_TeamColorPickers[Clan] = TeamColorPicker;

			// Set initial values
			TeamColorPicker.Header.Value = "Team " ^ Clan;
			TeamColorPicker.ColorPicker.Color = C_DefaultTeamColors[Clan];
			UpdateHueLabel(Clan);
		}
	}

	main() {
		Init();

		declare Integer LastResetClicked = -1000;
		while (True) {
			yield;

			foreach (Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						if (Event.Control == G_CloseButton) {
							SendCustomEvent("{{{ C_UIEventType_ToggleTeamColorsWindow }}}", []);
						} else {
							foreach (Clan => TeamColorPicker in G_TeamColorPickers) {
								switch (Event.Control) {
									case TeamColorPicker.ColorPicker: {
										// Setting a color (on reset) fires a Mouse click event on the color picker. Ignore that.
										if (Now - Period == LastResetClicked) {
											break;
										}

										declare Real Hue = CL::RgbToHsv(TeamColorPicker.ColorPicker.Color).X;
										SendCustomEvent("{{{ C_UIEventType_SetTeamColorHue }}}", [TL::ToText(Clan), TL::ToText(Hue)]);
										UpdateHueLabel(Clan);
									}
									case TeamColorPicker.ResetButton: {
										SendCustomEvent("{{{ C_UIEventType_ResetTeamColorHue }}}", [TL::ToText(Clan)]);
										TeamColorPicker.ColorPicker.Color = C_DefaultTeamColors[Clan];
										UpdateHueLabel(Clan);
										LastResetClicked = Now;
									}
								}
							}
						}
					}
					case CMlScriptEvent::Type::PluginCustomEvent: {
						if (Event.CustomEventType == "{{{ C_UIEventType_SetTeamColorHue }}}") {
							declare Integer Clan = TL::ToInteger(Event.CustomEventData[0]);
							declare Real Hue = TL::ToReal(Event.CustomEventData[1]);
							G_TeamColorPickers[Clan].ColorPicker.Color = CL::HsvToRgb(<Hue, 1., 1.>);
							UpdateHueLabel(Clan);
							LastResetClicked = Now;
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>
	""";
}

Text GetEditAnchorManialink() {
	// To understand: Check ColorPalette.Script.txt
	declare Color_BlueTwo = <0.1, 0.1, 0.9>;
	declare Color_RedTwo = <0.9, 0.1, 0.1>;
	declare Color_NeutralTwo = ColorPalette::C_Color_Vec3_GreenTwo;

	declare Color_HeaderPanelBackground = ColorPalette::C_Color_GreenTwo;
	declare Color_BodyPanelBackground = ColorPalette::C_Color_GreenThree;

	declare Color_ButtonLabel_Blue = <1., 1., 1.>;
	declare Color_ButtonBackground_Blue = Color_BlueTwo;
	declare Color_ButtonBackground_Blue_Focus = ColorPalette::GetColorFive(Color_BlueTwo);
	declare Color_ButtonLabel_Red = <1., 1., 1.>;
	declare Color_ButtonBackground_Red = Color_RedTwo;
	declare Color_ButtonBackground_Red_Focus = ColorPalette::GetColorFive(Color_RedTwo);
	declare Color_ButtonLabel_Neutral = <1., 1., 1.>;
	declare Color_ButtonBackground_Neutral = Color_NeutralTwo;
	declare Color_ButtonBackground_Neutral_Focus = ColorPalette::GetColorFive(Color_NeutralTwo);

	return """
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3" name="FlagRushArena_AnchorEdit">
	<frame id="anchor-window" pos="132.5 50" hidden="1">
		<frame id="header">
			<quad pos="0 0" z-index="0" size="50 10" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{Color_HeaderPanelBackground}}}" halign="center" valign="center" opacity="{{{C_UI_BackgroundOpacity}}}"/>
			<label pos="0 0" z-index="1" size="45 8" text="LandmarkType" halign="center" valign="center" textsize="4" style="Default" textfont="GameFontSemiBold" id="label-header"/>
		</frame>

		<frame id="body" pos="0 -25">
			<frame id="body-teamselection" z-index="1" hidden="1">
			<quad pos="0 0" z-index="0" size="50 35" halign="center" valign="center" colorize="{{{Color_BodyPanelBackground}}}" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_UI_BackgroundOpacity}}}"/>
				<label pos="0 10" size="45 8" text="Team:" halign="center" valign="center" style="Default" textfont="GameFontRegular" textsize="3" z-index="1" textcolor="FFF"/>

				<quad pos="-12.5 0" z-index="1" size="20 8" id="button-team1-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Blue)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="-12.5 0" z-index="2" size="20 6" text="Team 1" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Blue)}}}" />
				<quad pos="-12.5 0" z-index="3" size="20 8" id="button-team1-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>

				<quad pos="12.5 0" z-index="1" size="20 8" id="button-team2-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Red)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="12.5 0" z-index="2" size="20 6" text="Team 2" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Red)}}}"/>
				<quad pos="12.5 0" z-index="3" size="20 8" id="button-team2-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>

				<quad pos="0 -10" z-index="1" size="45 8" id="button-teamnone-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Neutral)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="0 -10" z-index="2" size="45 6" text="None" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<quad pos="0 -10" z-index="3" size="45 8" id="button-teamnone-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>
			</frame>

			<frame id="body-cpfunction" z-index="1" hidden="1">
				<quad pos="0 -10" z-index="0" size="50 55" halign="center" valign="center" colorize="{{{Color_BodyPanelBackground}}}" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_UI_BackgroundOpacity}}}"/>
				<label pos="0 10" size="45 8" text="Function:" halign="center" valign="center" style="Default" textfont="GameFontRegular" textsize="3" z-index="1" textcolor="FFF"/>

				<quad pos="0 0" z-index="1" size="45 8" id="button-cpfunctionflag-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Neutral)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="0 0" z-index="2" size="45 6" text="Flag spawn" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<quad pos="0 0" z-index="3" size="45 8" id="button-cpfunctionflag-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>

				<quad pos="17.5 -10" z-index="1" size="10 8" id="button-cpfunctionflagdefault-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Neutral)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="-20 -10" z-index="2" size="30 6" id="button-cpfunctionflagdefault-label" text="Default flag spawn:" halign="left" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<label pos="17.5 -10" z-index="2" size="10 6" id="button-cpfunctionflagdefault-icon" text="" halign="center" valign="center" style="Default" textfont="GameFontBlack" textsize="4" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<quad pos="17.5 -10" z-index="3" size="10 8" id="button-cpfunctionflagdefault-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>

				<quad pos="0 -20" z-index="1" size="45 8" id="button-cpfunctionreset-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Neutral)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="0 -20" z-index="2" size="45 6" text="Flag Reset Trigger" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<quad pos="0 -20" z-index="3" size="45 8" id="button-cpfunctionreset-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>

				<quad pos="0 -30" z-index="1" size="45 8" id="button-cpfunctionnone-bg" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1"  colorize="{{{CL::RgbToHex6(Color_ButtonBackground_Neutral)}}}" opacity="{{{C_UI_ButtonOpacity}}}"/>
				<label pos="0 -30" z-index="2" size="45 6" text="None" halign="center" valign="center" style="Default" textfont="GameFontBlack" textcolor="{{{CL::RgbToHex6(Color_ButtonLabel_Neutral)}}}"/>
				<quad pos="0 -30" z-index="3" size="45 8" id="button-cpfunctionnone-activator" halign="center" valign="center" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_Dbg_ButtonActivatorOpacity}}}" colorize="{{{C_Dbg_ButtonActivatorColor}}}" scriptevents="1"/>
			</frame>

			<frame id="body-noedit" z-index="1" hidden="1">
			<quad pos="0 0" z-index="0" size="50 35" halign="center" valign="center" colorize="{{{Color_BodyPanelBackground}}}" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_UI_BackgroundOpacity}}}"/>
				<label pos="0 10" size="45 8" text="Unsupported:" halign="center" valign="center" style="Default" textfont="GameFontSemibold" textsize="3" z-index="1" textcolor="{{{ColorPalette::C_Color_Bad}}}"/>
				<label pos="0 -5" size="45 18" text="This landmark is not supported and can therefore not be edited!" halign="center" valign="center" style="Default" textfont="GameFontRegular" textsize="2.5" z-index="1" autonewline="1" textcolor="FFF"/>
			</frame>
		</frame>

		<frame id="order" pos="-35 -15" hidden="1">
			<quad pos="0 0" z-index="0" size="15 15" halign="center" valign="center" colorize="{{{Color_BodyPanelBackground}}}" style="UICommon64_1" substyle="BgFrame1" opacity="{{{C_UI_BackgroundOpacity}}}"/>
			<label pos="0 3.5" z-index="1" size="10 5" text="Order" halign="center" valign="center" style="Default" textfont="GameFontRegular" textsize="2" textcolor="FFF"/>
			<label pos="0 -1.5" z-index="1" size="10 8" text="0" halign="center" valign="center" style="Default" textfont="GameFontBlack" textsize="5" textcolor="FFF" id="label-ordervalue"/>

			<quad pos="0 10" z-index="0" size="8 5" bgcolor="FFF" opacity="0.7" style="UICommon64_2" substyle="ArrowUpSlim_light" valign="center" halign="center" scriptevents="1" id="button-order-up"/>
			<quad pos="0 -10" z-index="0" size="8 5" bgcolor="FFF" opacity="0.7" style="UICommon64_2" substyle="ArrowDownSlim_light" valign="center" halign="center" scriptevents="1" id="button-order-down"/>
		</frame>
	</frame>

	<script><!--
	#Include "TextLib" as TL

	main() {
		declare CMlFrame FrameAnchorWindow = (Page.GetFirstChild("anchor-window") as CMlFrame);

		declare CMlFrame FrameHeader = (Page.GetFirstChild("header") as CMlFrame);
		declare CMlFrame FrameTeamselection = (Page.GetFirstChild("body-teamselection") as CMlFrame);
		declare CMlFrame FrameCPFunction = (Page.GetFirstChild("body-cpfunction") as CMlFrame);
		declare CMlFrame FrameNoEdit = (Page.GetFirstChild("body-noedit") as CMlFrame);
		declare CMlFrame FrameOrder = (Page.GetFirstChild("order") as CMlFrame);

		declare CMlLabel LabelHeaderLandmark = (Page.GetFirstChild("label-header") as CMlLabel);

		declare CMlQuad ButtonTeam1Bg = (Page.GetFirstChild("button-team1-bg") as CMlQuad);
		declare CMlQuad ButtonTeam1Activator = (Page.GetFirstChild("button-team1-activator") as CMlQuad);
		declare CMlQuad ButtonTeam2Bg = (Page.GetFirstChild("button-team2-bg") as CMlQuad);
		declare CMlQuad ButtonTeam2Activator = (Page.GetFirstChild("button-team2-activator") as CMlQuad);
		declare CMlQuad ButtonTeamNoneBg = (Page.GetFirstChild("button-teamnone-bg") as CMlQuad);
		declare CMlQuad ButtonTeamNoneActivator = (Page.GetFirstChild("button-teamnone-activator") as CMlQuad);

		declare CMlQuad ButtonCPFunctionFlagBg = (Page.GetFirstChild("button-cpfunctionflag-bg") as CMlQuad);
		declare CMlQuad ButtonCPFunctionFlagActivator = (Page.GetFirstChild("button-cpfunctionflag-activator") as CMlQuad);
		declare CMlQuad ButtonCPFunctionFlagDefaultToggleBg = (Page.GetFirstChild("button-cpfunctionflagdefault-bg") as CMlQuad);
		declare CMlLabel ButtonCPFucntionFlagDefaultToggleIcon = (Page.GetFirstChild("button-cpfunctionflagdefault-icon") as CMlLabel);
		declare CMlLabel ButtonCPFucntionFlagDefaultToggleLabel = (Page.GetFirstChild("button-cpfunctionflagdefault-label") as CMlLabel);
		declare CMlQuad ButtonCPFunctionFlagDefaultActivator = (Page.GetFirstChild("button-cpfunctionflagdefault-activator") as CMlQuad);
		declare CMlQuad ButtonCPFunctionNoneBg = (Page.GetFirstChild("button-cpfunctionnone-bg") as CMlQuad);
		declare CMlQuad ButtonCPFunctionNoneActivator = (Page.GetFirstChild("button-cpfunctionnone-activator") as CMlQuad);
		declare CMlQuad ButtonCPFunctionResetBg = (Page.GetFirstChild("button-cpfunctionreset-bg") as CMlQuad);
		declare CMlQuad ButtonCPFunctionResetActivator = (Page.GetFirstChild("button-cpfunctionreset-activator") as CMlQuad);

		declare CMlLabel LabelOrder = (Page.GetFirstChild("label-ordervalue") as CMlLabel);
		declare CMlQuad ButtonOrderUp = (Page.GetFirstChild("button-order-up") as CMlQuad);
		declare CMlQuad ButtonOrderDown = (Page.GetFirstChild("button-order-down") as CMlQuad);

		// Declare for Page
		declare Boolean FlagRushArena_IsEditingAnchor for Page;

		declare Boolean FlagRushArena_EditStart for Page;
		declare Boolean FlagRushArena_EditFinish for Page;
		declare Boolean FlagRushArena_EditCheckpoint for Page;

		declare Ident FlagRushArena_EditedAnchorId for Page;
		declare Text FlagRushArena_EditedAnchorTag for Page;
		declare Text FlagRushArena_EditedAnchorDefaultTag for Page;
		declare Integer FlagRushArena_EditedAnchorOrder for Page;

		// Main loop
		while(True) {
			yield;

			// Show the right frames
			FrameAnchorWindow.Visible = FlagRushArena_IsEditingAnchor;
			FrameTeamselection.Visible = FlagRushArena_EditStart || FlagRushArena_EditFinish;
			FrameOrder.Visible = False; // Order not used yet
			FrameCPFunction.Visible = FlagRushArena_EditCheckpoint;
			FrameNoEdit.Visible = !(FlagRushArena_EditStart || FlagRushArena_EditFinish || FlagRushArena_EditCheckpoint);

			// Put order value and right header text
			LabelOrder.Value = TL::ToText(FlagRushArena_EditedAnchorOrder);
			declare Text HeaderText;
			if(FlagRushArena_EditStart) {
				HeaderText = "Spawn";
			} else if (FlagRushArena_EditFinish) {
				HeaderText = "Base";
			} else if (FlagRushArena_EditCheckpoint) {
				HeaderText = "Checkpoint";
				if(FlagRushArena_EditedAnchorTag == "{{{C_FlagSpawnTag}}}" || FlagRushArena_EditedAnchorTag == "{{{C_DefaultFlagSpawnTag}}}") {
					ButtonCPFucntionFlagDefaultToggleLabel.Opacity = 1.;
					ButtonCPFucntionFlagDefaultToggleIcon.Opacity = 1.;
					ButtonCPFunctionFlagDefaultToggleBg.Opacity = 1.;
				} else {
					ButtonCPFucntionFlagDefaultToggleLabel.Opacity = .25;
					ButtonCPFucntionFlagDefaultToggleIcon.Opacity = .25;
					ButtonCPFunctionFlagDefaultToggleBg.Opacity = .25;
				}
				if (FlagRushArena_EditedAnchorTag == "{{{C_DefaultFlagSpawnTag}}}") {
					ButtonCPFucntionFlagDefaultToggleIcon.Value = "";
				} else {
					ButtonCPFucntionFlagDefaultToggleIcon.Value = "";
				}
			} else {
				HeaderText = FlagRushArena_EditedAnchorDefaultTag;
			}
			LabelHeaderLandmark.Value = HeaderText;

			// I'm sorry for the pain that these nested switch and if statements are
			foreach(Event in PendingEvents) {
				switch (Event.Type) {
					case CMlScriptEvent::Type::MouseClick: {
						switch (Event.Control) {
							case ButtonTeam1Activator: {
								if(FlagRushArena_EditStart) {
									FlagRushArena_EditedAnchorTag = "{{{C_StartTagPrefix}}}1";
								} else if (FlagRushArena_EditFinish) {
									FlagRushArena_EditedAnchorTag = "{{{C_FinishTagPrefix}}}1";
								}
							}
							case ButtonTeam2Activator: {
								if(FlagRushArena_EditStart) {
									FlagRushArena_EditedAnchorTag = "{{{C_StartTagPrefix}}}2";
								} else if (FlagRushArena_EditFinish) {
									FlagRushArena_EditedAnchorTag = "{{{C_FinishTagPrefix}}}2";
								}
							}
							case ButtonTeamNoneActivator: {
								if(FlagRushArena_EditStart) {
									FlagRushArena_EditedAnchorTag = "{{{C_StartTagNoFunction}}}";
								} else if (FlagRushArena_EditFinish) {
									FlagRushArena_EditedAnchorTag = "{{{C_FinishTagNoFunction}}}";
								}
							}
							case ButtonCPFunctionFlagActivator: {
								FlagRushArena_EditedAnchorTag = "{{{C_FlagSpawnTag}}}";
							}
							case ButtonCPFunctionFlagDefaultActivator: {
								if(FlagRushArena_EditedAnchorTag == "{{{C_FlagSpawnTag}}}") {
									FlagRushArena_EditedAnchorTag = "{{{C_DefaultFlagSpawnTag}}}";
								} else if (FlagRushArena_EditedAnchorTag == "{{{C_DefaultFlagSpawnTag}}}") {
									FlagRushArena_EditedAnchorTag = "{{{C_FlagSpawnTag}}}";
								}
							}
							case ButtonCPFunctionResetActivator: {
								FlagRushArena_EditedAnchorTag = "{{{C_FlagResetTag}}}";
							}
							case ButtonCPFunctionNoneActivator: {
								FlagRushArena_EditedAnchorTag = "{{{C_CheckpointTagNoFunction}}}";
							}
							case ButtonOrderUp: {
								FlagRushArena_EditedAnchorOrder += 1;
							}
							case ButtonOrderDown: {
								if(FlagRushArena_EditedAnchorOrder > 0) {
									FlagRushArena_EditedAnchorOrder -= 1;
								}
							}
						}
					}
					case CMlScriptEvent::Type::MouseOver: {
						switch (Event.Control) {
							case ButtonTeam1Activator: ButtonTeam1Bg.Colorize = {{{Color_ButtonBackground_Blue_Focus}}};
							case ButtonTeam2Activator: ButtonTeam2Bg.Colorize = {{{Color_ButtonBackground_Red_Focus}}};
							case ButtonTeamNoneActivator: ButtonTeamNoneBg.Colorize = {{{Color_ButtonBackground_Neutral_Focus}}};
							case ButtonCPFunctionFlagActivator: ButtonCPFunctionFlagBg.Colorize = {{{Color_ButtonBackground_Neutral_Focus}}};
							case ButtonCPFunctionNoneActivator: ButtonCPFunctionNoneBg.Colorize = {{{Color_ButtonBackground_Neutral_Focus}}};
							case ButtonCPFunctionFlagDefaultActivator: ButtonCPFunctionFlagDefaultToggleBg.Colorize = {{{Color_ButtonBackground_Neutral_Focus}}};
							case ButtonCPFunctionResetActivator: ButtonCPFunctionResetBg.Colorize = {{{Color_ButtonBackground_Neutral_Focus}}};
						}
					}
					case CMlScriptEvent::Type::MouseOut: {
						switch (Event.Control) {
							case ButtonTeam1Activator: ButtonTeam1Bg.Colorize = {{{Color_ButtonBackground_Blue}}};
							case ButtonTeam2Activator: ButtonTeam2Bg.Colorize = {{{Color_ButtonBackground_Red}}};
							case ButtonTeamNoneActivator: ButtonTeamNoneBg.Colorize = {{{Color_ButtonBackground_Neutral}}};
							case ButtonCPFunctionFlagActivator: ButtonCPFunctionFlagBg.Colorize = {{{Color_ButtonBackground_Neutral}}};
							case ButtonCPFunctionNoneActivator: ButtonCPFunctionNoneBg.Colorize = {{{Color_ButtonBackground_Neutral}}};
							case ButtonCPFunctionFlagDefaultActivator: ButtonCPFunctionFlagDefaultToggleBg.Colorize = {{{Color_ButtonBackground_Neutral}}};
							case ButtonCPFunctionResetActivator: ButtonCPFunctionResetBg.Colorize = {{{Color_ButtonBackground_Neutral}}};
						}
					}
				}
			}
		}
	}
	--></script>
</manialink>
	""";
}

Void EditAnchorData(Ident _EditedAnchorDataId) {
	declare Boolean FlagRushArena_IsEditingAnchor for ManialinkPage;
	FlagRushArena_IsEditingAnchor = _EditedAnchorDataId != NullId;

	// Reset Data for Page
	declare Boolean FlagRushArena_EditStart for ManialinkPage;
	FlagRushArena_EditStart = False;
	declare Boolean FlagRushArena_EditCheckpoint for ManialinkPage;
	FlagRushArena_EditCheckpoint = False;
	declare Boolean FlagRushArena_EditFinish for ManialinkPage;
	FlagRushArena_EditFinish = False;

	declare Ident FlagRushArena_EditedAnchorId for ManialinkPage;
	declare Text FlagRushArena_EditedAnchorTag for ManialinkPage;
	declare Text FlagRushArena_EditedAnchorDefaultTag for ManialinkPage;
	declare Integer FlagRushArena_EditedAnchorOrder for ManialinkPage;
	FlagRushArena_EditedAnchorId = NullId;
	FlagRushArena_EditedAnchorTag = "";
	FlagRushArena_EditedAnchorDefaultTag = "";
	FlagRushArena_EditedAnchorOrder = -1;

	// Check if anchor exists
	if (AnchorData.existskey(_EditedAnchorDataId)) {
		declare Anchor <=> AnchorData[_EditedAnchorDataId];

		FlagRushArena_EditedAnchorId = _EditedAnchorDataId;
		FlagRushArena_EditedAnchorTag = Anchor.Tag;
		FlagRushArena_EditedAnchorDefaultTag = Anchor.DefaultTag;
		FlagRushArena_EditedAnchorOrder = Anchor.Order;

		// Select right frame to show
		switch (Anchor.WaypointType) {
			case CAnchorData::EWaypointType::Start: {
				FlagRushArena_EditStart = True;
			}
			case CAnchorData::EWaypointType::Checkpoint: {
				FlagRushArena_EditCheckpoint = True;
			}
			case CAnchorData::EWaypointType::Finish: {
				FlagRushArena_EditFinish = True;
			}
		}
	}
}

Void InitLandmarks() {
	foreach (Anchor in AnchorData) {
		switch (Anchor.WaypointType) {
			case CAnchorData::EWaypointType::Start: {
				if(!TL::StartsWith(C_StartTagPrefix, Anchor.Tag)) Anchor.Tag = C_StartTagNoFunction;
			}
			case CAnchorData::EWaypointType::Finish: {
				if(!TL::StartsWith(C_FinishTagPrefix, Anchor.Tag)) Anchor.Tag = C_FinishTagNoFunction;
			}
			case CAnchorData::EWaypointType::Checkpoint: {
				if(!( Anchor.Tag == C_FlagSpawnTag || Anchor.Tag == C_DefaultFlagSpawnTag || Anchor.Tag == C_FlagResetTag)) Anchor.Tag = C_CheckpointTagNoFunction;
			}
			default: {
				Anchor.Tag = C_LandmarkTagNoFunction;
			}
		}
	}
}

Void PlayTestRun() {
	TMMapType::PlayTestRun_Yield();
	ReportContext::SetContext(System, ReportContext::C_Context_MapEditor);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Main
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
main() {
	HoldLoadingScreen = True;
	ReportContext::SetContext(System, ReportContext::C_Context_MapEditor);
	TMMapType::ApplyDecoImages();

	MapType::SetVersion(C_MapTypeVersion);
	InitLandmarks();
	UpdateValidability();

	G_Toolbar = UILayerCreate();
	G_Toolbar.ManialinkPage = GetToolbarManialink();
	G_TeamColorsWindow = UILayerCreate();
	G_TeamColorsWindow.ManialinkPage = GetTeamColorWindowManialink();
	G_TeamColorsWindow.IsVisible = False;

	HoldLoadingScreen = False;
	EnableMapTypeStartTest = True; // The maptype will handle the 'StartTest' event

	CustomEditAnchorData = True;

	// Block properties
	ManialinkText = GetEditAnchorManialink();
	declare PrevAnchorTag = "";
	declare PrevAnchorOrder = -1;
	declare Ident FlagRushArena_EditedAnchorId for ManialinkPage;
	declare Text FlagRushArena_EditedAnchorTag for ManialinkPage;
	declare Integer FlagRushArena_EditedAnchorOrder for ManialinkPage;

	while (True) {
		yield;

		foreach (Event in PendingEvents) {
			switch (Event.Type) {
				case CMapEditorPluginEvent::Type::LayerCustomEvent: {
					switch (Event.CustomEventType) {
						case C_UIEventType_ToggleTeamColorsWindow: {
							G_TeamColorsWindow.IsVisible = !G_TeamColorsWindow.IsVisible;
						}
					}
				}
			}
		}

		// Hide config windows when not in block property mode
		if (PlaceMode != CMapEditorPlugin::PlaceMode::BlockProperty) {
				EditAnchorData(NullId);
		}

		// Update block property
		if (PrevAnchorTag != FlagRushArena_EditedAnchorTag || PrevAnchorOrder != FlagRushArena_EditedAnchorOrder) {
			PrevAnchorTag = FlagRushArena_EditedAnchorTag;
			PrevAnchorOrder = FlagRushArena_EditedAnchorOrder;

			if (AnchorData.existskey(FlagRushArena_EditedAnchorId)) {
				declare Anchor <=> AnchorData[FlagRushArena_EditedAnchorId];
				Anchor.Order = FlagRushArena_EditedAnchorOrder;
				Anchor.Tag = FlagRushArena_EditedAnchorTag;

				// If Anchor is DefaultFlagSpawn, remove defualt from other potential flagspawns
				if(Anchor.Tag == C_DefaultFlagSpawnTag) {
					foreach(OtherAnchor in AnchorData) {
						if(OtherAnchor.Id != Anchor.Id && OtherAnchor.Tag == C_DefaultFlagSpawnTag) {
							OtherAnchor.Tag = C_FlagSpawnTag;
						}
					}
				}
			}
		}

		// Check Events
		foreach(Event in PendingEvents) {
			switch(Event.Type) {
				case CMapEditorPluginEvent::Type::MapModified: {
					InitLandmarks();
					UpdateValidability();
				}
				case CMapEditorPluginEvent::Type::EditAnchor: {
					EditAnchorData(Event.EditedAnchorDataId);
				}
				case CMapEditorPluginEvent::Type::StartTest: {
					PlayTestRun();
				}
			}
		}
	}
}